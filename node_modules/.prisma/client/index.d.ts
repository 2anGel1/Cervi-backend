
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Account
 * 
 */
export type Account = $Result.DefaultSelection<Prisma.$AccountPayload>
/**
 * Model AccountVerification
 * 
 */
export type AccountVerification = $Result.DefaultSelection<Prisma.$AccountVerificationPayload>
/**
 * Model PasswordReset
 * 
 */
export type PasswordReset = $Result.DefaultSelection<Prisma.$PasswordResetPayload>
/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Candidat
 * 
 */
export type Candidat = $Result.DefaultSelection<Prisma.$CandidatPayload>
/**
 * Model Contrat
 * 
 */
export type Contrat = $Result.DefaultSelection<Prisma.$ContratPayload>
/**
 * Model Entreprise
 * 
 */
export type Entreprise = $Result.DefaultSelection<Prisma.$EntreprisePayload>
/**
 * Model Entretien
 * 
 */
export type Entretien = $Result.DefaultSelection<Prisma.$EntretienPayload>
/**
 * Model Freelancer
 * 
 */
export type Freelancer = $Result.DefaultSelection<Prisma.$FreelancerPayload>
/**
 * Model Note
 * 
 */
export type Note = $Result.DefaultSelection<Prisma.$NotePayload>
/**
 * Model OffreEmploi
 * 
 */
export type OffreEmploi = $Result.DefaultSelection<Prisma.$OffreEmploiPayload>
/**
 * Model Projet
 * 
 */
export type Projet = $Result.DefaultSelection<Prisma.$ProjetPayload>
/**
 * Model Proposition
 * 
 */
export type Proposition = $Result.DefaultSelection<Prisma.$PropositionPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Accounts
 * const accounts = await prisma.account.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Accounts
   * const accounts = await prisma.account.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<ExtArgs>;

  /**
   * `prisma.accountVerification`: Exposes CRUD operations for the **AccountVerification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AccountVerifications
    * const accountVerifications = await prisma.accountVerification.findMany()
    * ```
    */
  get accountVerification(): Prisma.AccountVerificationDelegate<ExtArgs>;

  /**
   * `prisma.passwordReset`: Exposes CRUD operations for the **PasswordReset** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PasswordResets
    * const passwordResets = await prisma.passwordReset.findMany()
    * ```
    */
  get passwordReset(): Prisma.PasswordResetDelegate<ExtArgs>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.candidat`: Exposes CRUD operations for the **Candidat** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Candidats
    * const candidats = await prisma.candidat.findMany()
    * ```
    */
  get candidat(): Prisma.CandidatDelegate<ExtArgs>;

  /**
   * `prisma.contrat`: Exposes CRUD operations for the **Contrat** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Contrats
    * const contrats = await prisma.contrat.findMany()
    * ```
    */
  get contrat(): Prisma.ContratDelegate<ExtArgs>;

  /**
   * `prisma.entreprise`: Exposes CRUD operations for the **Entreprise** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Entreprises
    * const entreprises = await prisma.entreprise.findMany()
    * ```
    */
  get entreprise(): Prisma.EntrepriseDelegate<ExtArgs>;

  /**
   * `prisma.entretien`: Exposes CRUD operations for the **Entretien** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Entretiens
    * const entretiens = await prisma.entretien.findMany()
    * ```
    */
  get entretien(): Prisma.EntretienDelegate<ExtArgs>;

  /**
   * `prisma.freelancer`: Exposes CRUD operations for the **Freelancer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Freelancers
    * const freelancers = await prisma.freelancer.findMany()
    * ```
    */
  get freelancer(): Prisma.FreelancerDelegate<ExtArgs>;

  /**
   * `prisma.note`: Exposes CRUD operations for the **Note** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notes
    * const notes = await prisma.note.findMany()
    * ```
    */
  get note(): Prisma.NoteDelegate<ExtArgs>;

  /**
   * `prisma.offreEmploi`: Exposes CRUD operations for the **OffreEmploi** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OffreEmplois
    * const offreEmplois = await prisma.offreEmploi.findMany()
    * ```
    */
  get offreEmploi(): Prisma.OffreEmploiDelegate<ExtArgs>;

  /**
   * `prisma.projet`: Exposes CRUD operations for the **Projet** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Projets
    * const projets = await prisma.projet.findMany()
    * ```
    */
  get projet(): Prisma.ProjetDelegate<ExtArgs>;

  /**
   * `prisma.proposition`: Exposes CRUD operations for the **Proposition** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Propositions
    * const propositions = await prisma.proposition.findMany()
    * ```
    */
  get proposition(): Prisma.PropositionDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.7.1
   * Query Engine version: 61e140623197a131c2a6189271ffee05a7aa9a59
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Account: 'Account',
    AccountVerification: 'AccountVerification',
    PasswordReset: 'PasswordReset',
    Session: 'Session',
    User: 'User',
    Candidat: 'Candidat',
    Contrat: 'Contrat',
    Entreprise: 'Entreprise',
    Entretien: 'Entretien',
    Freelancer: 'Freelancer',
    Note: 'Note',
    OffreEmploi: 'OffreEmploi',
    Projet: 'Projet',
    Proposition: 'Proposition'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'account' | 'accountVerification' | 'passwordReset' | 'session' | 'user' | 'candidat' | 'contrat' | 'entreprise' | 'entretien' | 'freelancer' | 'note' | 'offreEmploi' | 'projet' | 'proposition'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Account: {
        payload: Prisma.$AccountPayload<ExtArgs>
        fields: Prisma.AccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findFirst: {
            args: Prisma.AccountFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findMany: {
            args: Prisma.AccountFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          create: {
            args: Prisma.AccountCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          createMany: {
            args: Prisma.AccountCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AccountDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          update: {
            args: Prisma.AccountUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          deleteMany: {
            args: Prisma.AccountDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AccountUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AccountUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          aggregate: {
            args: Prisma.AccountAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAccount>
          }
          groupBy: {
            args: Prisma.AccountGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountCountArgs<ExtArgs>,
            result: $Utils.Optional<AccountCountAggregateOutputType> | number
          }
        }
      }
      AccountVerification: {
        payload: Prisma.$AccountVerificationPayload<ExtArgs>
        fields: Prisma.AccountVerificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountVerificationFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountVerificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountVerificationFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountVerificationPayload>
          }
          findFirst: {
            args: Prisma.AccountVerificationFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountVerificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountVerificationFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountVerificationPayload>
          }
          findMany: {
            args: Prisma.AccountVerificationFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountVerificationPayload>[]
          }
          create: {
            args: Prisma.AccountVerificationCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountVerificationPayload>
          }
          createMany: {
            args: Prisma.AccountVerificationCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AccountVerificationDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountVerificationPayload>
          }
          update: {
            args: Prisma.AccountVerificationUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountVerificationPayload>
          }
          deleteMany: {
            args: Prisma.AccountVerificationDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AccountVerificationUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AccountVerificationUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountVerificationPayload>
          }
          aggregate: {
            args: Prisma.AccountVerificationAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAccountVerification>
          }
          groupBy: {
            args: Prisma.AccountVerificationGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AccountVerificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountVerificationCountArgs<ExtArgs>,
            result: $Utils.Optional<AccountVerificationCountAggregateOutputType> | number
          }
        }
      }
      PasswordReset: {
        payload: Prisma.$PasswordResetPayload<ExtArgs>
        fields: Prisma.PasswordResetFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PasswordResetFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PasswordResetPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PasswordResetFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PasswordResetPayload>
          }
          findFirst: {
            args: Prisma.PasswordResetFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PasswordResetPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PasswordResetFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PasswordResetPayload>
          }
          findMany: {
            args: Prisma.PasswordResetFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PasswordResetPayload>[]
          }
          create: {
            args: Prisma.PasswordResetCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PasswordResetPayload>
          }
          createMany: {
            args: Prisma.PasswordResetCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PasswordResetDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PasswordResetPayload>
          }
          update: {
            args: Prisma.PasswordResetUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PasswordResetPayload>
          }
          deleteMany: {
            args: Prisma.PasswordResetDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PasswordResetUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PasswordResetUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PasswordResetPayload>
          }
          aggregate: {
            args: Prisma.PasswordResetAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePasswordReset>
          }
          groupBy: {
            args: Prisma.PasswordResetGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PasswordResetGroupByOutputType>[]
          }
          count: {
            args: Prisma.PasswordResetCountArgs<ExtArgs>,
            result: $Utils.Optional<PasswordResetCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>,
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Candidat: {
        payload: Prisma.$CandidatPayload<ExtArgs>
        fields: Prisma.CandidatFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CandidatFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CandidatPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CandidatFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CandidatPayload>
          }
          findFirst: {
            args: Prisma.CandidatFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CandidatPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CandidatFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CandidatPayload>
          }
          findMany: {
            args: Prisma.CandidatFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CandidatPayload>[]
          }
          create: {
            args: Prisma.CandidatCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CandidatPayload>
          }
          createMany: {
            args: Prisma.CandidatCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CandidatDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CandidatPayload>
          }
          update: {
            args: Prisma.CandidatUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CandidatPayload>
          }
          deleteMany: {
            args: Prisma.CandidatDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CandidatUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CandidatUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CandidatPayload>
          }
          aggregate: {
            args: Prisma.CandidatAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCandidat>
          }
          groupBy: {
            args: Prisma.CandidatGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CandidatGroupByOutputType>[]
          }
          count: {
            args: Prisma.CandidatCountArgs<ExtArgs>,
            result: $Utils.Optional<CandidatCountAggregateOutputType> | number
          }
        }
      }
      Contrat: {
        payload: Prisma.$ContratPayload<ExtArgs>
        fields: Prisma.ContratFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContratFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContratPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContratFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContratPayload>
          }
          findFirst: {
            args: Prisma.ContratFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContratPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContratFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContratPayload>
          }
          findMany: {
            args: Prisma.ContratFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContratPayload>[]
          }
          create: {
            args: Prisma.ContratCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContratPayload>
          }
          createMany: {
            args: Prisma.ContratCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ContratDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContratPayload>
          }
          update: {
            args: Prisma.ContratUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContratPayload>
          }
          deleteMany: {
            args: Prisma.ContratDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ContratUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ContratUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContratPayload>
          }
          aggregate: {
            args: Prisma.ContratAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateContrat>
          }
          groupBy: {
            args: Prisma.ContratGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ContratGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContratCountArgs<ExtArgs>,
            result: $Utils.Optional<ContratCountAggregateOutputType> | number
          }
        }
      }
      Entreprise: {
        payload: Prisma.$EntreprisePayload<ExtArgs>
        fields: Prisma.EntrepriseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EntrepriseFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EntreprisePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EntrepriseFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EntreprisePayload>
          }
          findFirst: {
            args: Prisma.EntrepriseFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EntreprisePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EntrepriseFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EntreprisePayload>
          }
          findMany: {
            args: Prisma.EntrepriseFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EntreprisePayload>[]
          }
          create: {
            args: Prisma.EntrepriseCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EntreprisePayload>
          }
          createMany: {
            args: Prisma.EntrepriseCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.EntrepriseDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EntreprisePayload>
          }
          update: {
            args: Prisma.EntrepriseUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EntreprisePayload>
          }
          deleteMany: {
            args: Prisma.EntrepriseDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.EntrepriseUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.EntrepriseUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EntreprisePayload>
          }
          aggregate: {
            args: Prisma.EntrepriseAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateEntreprise>
          }
          groupBy: {
            args: Prisma.EntrepriseGroupByArgs<ExtArgs>,
            result: $Utils.Optional<EntrepriseGroupByOutputType>[]
          }
          count: {
            args: Prisma.EntrepriseCountArgs<ExtArgs>,
            result: $Utils.Optional<EntrepriseCountAggregateOutputType> | number
          }
        }
      }
      Entretien: {
        payload: Prisma.$EntretienPayload<ExtArgs>
        fields: Prisma.EntretienFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EntretienFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EntretienPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EntretienFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EntretienPayload>
          }
          findFirst: {
            args: Prisma.EntretienFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EntretienPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EntretienFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EntretienPayload>
          }
          findMany: {
            args: Prisma.EntretienFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EntretienPayload>[]
          }
          create: {
            args: Prisma.EntretienCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EntretienPayload>
          }
          createMany: {
            args: Prisma.EntretienCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.EntretienDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EntretienPayload>
          }
          update: {
            args: Prisma.EntretienUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EntretienPayload>
          }
          deleteMany: {
            args: Prisma.EntretienDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.EntretienUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.EntretienUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EntretienPayload>
          }
          aggregate: {
            args: Prisma.EntretienAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateEntretien>
          }
          groupBy: {
            args: Prisma.EntretienGroupByArgs<ExtArgs>,
            result: $Utils.Optional<EntretienGroupByOutputType>[]
          }
          count: {
            args: Prisma.EntretienCountArgs<ExtArgs>,
            result: $Utils.Optional<EntretienCountAggregateOutputType> | number
          }
        }
      }
      Freelancer: {
        payload: Prisma.$FreelancerPayload<ExtArgs>
        fields: Prisma.FreelancerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FreelancerFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FreelancerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FreelancerFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FreelancerPayload>
          }
          findFirst: {
            args: Prisma.FreelancerFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FreelancerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FreelancerFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FreelancerPayload>
          }
          findMany: {
            args: Prisma.FreelancerFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FreelancerPayload>[]
          }
          create: {
            args: Prisma.FreelancerCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FreelancerPayload>
          }
          createMany: {
            args: Prisma.FreelancerCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.FreelancerDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FreelancerPayload>
          }
          update: {
            args: Prisma.FreelancerUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FreelancerPayload>
          }
          deleteMany: {
            args: Prisma.FreelancerDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.FreelancerUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.FreelancerUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FreelancerPayload>
          }
          aggregate: {
            args: Prisma.FreelancerAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFreelancer>
          }
          groupBy: {
            args: Prisma.FreelancerGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FreelancerGroupByOutputType>[]
          }
          count: {
            args: Prisma.FreelancerCountArgs<ExtArgs>,
            result: $Utils.Optional<FreelancerCountAggregateOutputType> | number
          }
        }
      }
      Note: {
        payload: Prisma.$NotePayload<ExtArgs>
        fields: Prisma.NoteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NoteFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NoteFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotePayload>
          }
          findFirst: {
            args: Prisma.NoteFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NoteFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotePayload>
          }
          findMany: {
            args: Prisma.NoteFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotePayload>[]
          }
          create: {
            args: Prisma.NoteCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotePayload>
          }
          createMany: {
            args: Prisma.NoteCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.NoteDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotePayload>
          }
          update: {
            args: Prisma.NoteUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotePayload>
          }
          deleteMany: {
            args: Prisma.NoteDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.NoteUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.NoteUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotePayload>
          }
          aggregate: {
            args: Prisma.NoteAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateNote>
          }
          groupBy: {
            args: Prisma.NoteGroupByArgs<ExtArgs>,
            result: $Utils.Optional<NoteGroupByOutputType>[]
          }
          count: {
            args: Prisma.NoteCountArgs<ExtArgs>,
            result: $Utils.Optional<NoteCountAggregateOutputType> | number
          }
        }
      }
      OffreEmploi: {
        payload: Prisma.$OffreEmploiPayload<ExtArgs>
        fields: Prisma.OffreEmploiFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OffreEmploiFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OffreEmploiPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OffreEmploiFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OffreEmploiPayload>
          }
          findFirst: {
            args: Prisma.OffreEmploiFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OffreEmploiPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OffreEmploiFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OffreEmploiPayload>
          }
          findMany: {
            args: Prisma.OffreEmploiFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OffreEmploiPayload>[]
          }
          create: {
            args: Prisma.OffreEmploiCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OffreEmploiPayload>
          }
          createMany: {
            args: Prisma.OffreEmploiCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.OffreEmploiDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OffreEmploiPayload>
          }
          update: {
            args: Prisma.OffreEmploiUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OffreEmploiPayload>
          }
          deleteMany: {
            args: Prisma.OffreEmploiDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.OffreEmploiUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.OffreEmploiUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OffreEmploiPayload>
          }
          aggregate: {
            args: Prisma.OffreEmploiAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateOffreEmploi>
          }
          groupBy: {
            args: Prisma.OffreEmploiGroupByArgs<ExtArgs>,
            result: $Utils.Optional<OffreEmploiGroupByOutputType>[]
          }
          count: {
            args: Prisma.OffreEmploiCountArgs<ExtArgs>,
            result: $Utils.Optional<OffreEmploiCountAggregateOutputType> | number
          }
        }
      }
      Projet: {
        payload: Prisma.$ProjetPayload<ExtArgs>
        fields: Prisma.ProjetFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProjetFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProjetPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProjetFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProjetPayload>
          }
          findFirst: {
            args: Prisma.ProjetFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProjetPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProjetFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProjetPayload>
          }
          findMany: {
            args: Prisma.ProjetFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProjetPayload>[]
          }
          create: {
            args: Prisma.ProjetCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProjetPayload>
          }
          createMany: {
            args: Prisma.ProjetCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ProjetDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProjetPayload>
          }
          update: {
            args: Prisma.ProjetUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProjetPayload>
          }
          deleteMany: {
            args: Prisma.ProjetDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ProjetUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ProjetUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProjetPayload>
          }
          aggregate: {
            args: Prisma.ProjetAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProjet>
          }
          groupBy: {
            args: Prisma.ProjetGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProjetGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProjetCountArgs<ExtArgs>,
            result: $Utils.Optional<ProjetCountAggregateOutputType> | number
          }
        }
      }
      Proposition: {
        payload: Prisma.$PropositionPayload<ExtArgs>
        fields: Prisma.PropositionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PropositionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PropositionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PropositionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PropositionPayload>
          }
          findFirst: {
            args: Prisma.PropositionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PropositionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PropositionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PropositionPayload>
          }
          findMany: {
            args: Prisma.PropositionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PropositionPayload>[]
          }
          create: {
            args: Prisma.PropositionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PropositionPayload>
          }
          createMany: {
            args: Prisma.PropositionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PropositionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PropositionPayload>
          }
          update: {
            args: Prisma.PropositionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PropositionPayload>
          }
          deleteMany: {
            args: Prisma.PropositionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PropositionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PropositionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PropositionPayload>
          }
          aggregate: {
            args: Prisma.PropositionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProposition>
          }
          groupBy: {
            args: Prisma.PropositionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PropositionGroupByOutputType>[]
          }
          count: {
            args: Prisma.PropositionCountArgs<ExtArgs>,
            result: $Utils.Optional<PropositionCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    entreprise: number
    candidat: number
    accounts: number
    sessions: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    entreprise?: boolean | UserCountOutputTypeCountEntrepriseArgs
    candidat?: boolean | UserCountOutputTypeCountCandidatArgs
    accounts?: boolean | UserCountOutputTypeCountAccountsArgs
    sessions?: boolean | UserCountOutputTypeCountSessionsArgs
  }

  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountEntrepriseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EntrepriseWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCandidatArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CandidatWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }



  /**
   * Count Type CandidatCountOutputType
   */

  export type CandidatCountOutputType = {
    entretiens: number
    notes: number
  }

  export type CandidatCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    entretiens?: boolean | CandidatCountOutputTypeCountEntretiensArgs
    notes?: boolean | CandidatCountOutputTypeCountNotesArgs
  }

  // Custom InputTypes

  /**
   * CandidatCountOutputType without action
   */
  export type CandidatCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidatCountOutputType
     */
    select?: CandidatCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CandidatCountOutputType without action
   */
  export type CandidatCountOutputTypeCountEntretiensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EntretienWhereInput
  }


  /**
   * CandidatCountOutputType without action
   */
  export type CandidatCountOutputTypeCountNotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NoteWhereInput
  }



  /**
   * Count Type EntrepriseCountOutputType
   */

  export type EntrepriseCountOutputType = {
    offreEmplois: number
    entretiens: number
    contrats: number
    projets: number
    notes: number
  }

  export type EntrepriseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    offreEmplois?: boolean | EntrepriseCountOutputTypeCountOffreEmploisArgs
    entretiens?: boolean | EntrepriseCountOutputTypeCountEntretiensArgs
    contrats?: boolean | EntrepriseCountOutputTypeCountContratsArgs
    projets?: boolean | EntrepriseCountOutputTypeCountProjetsArgs
    notes?: boolean | EntrepriseCountOutputTypeCountNotesArgs
  }

  // Custom InputTypes

  /**
   * EntrepriseCountOutputType without action
   */
  export type EntrepriseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EntrepriseCountOutputType
     */
    select?: EntrepriseCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * EntrepriseCountOutputType without action
   */
  export type EntrepriseCountOutputTypeCountOffreEmploisArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OffreEmploiWhereInput
  }


  /**
   * EntrepriseCountOutputType without action
   */
  export type EntrepriseCountOutputTypeCountEntretiensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EntretienWhereInput
  }


  /**
   * EntrepriseCountOutputType without action
   */
  export type EntrepriseCountOutputTypeCountContratsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContratWhereInput
  }


  /**
   * EntrepriseCountOutputType without action
   */
  export type EntrepriseCountOutputTypeCountProjetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjetWhereInput
  }


  /**
   * EntrepriseCountOutputType without action
   */
  export type EntrepriseCountOutputTypeCountNotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NoteWhereInput
  }



  /**
   * Count Type FreelancerCountOutputType
   */

  export type FreelancerCountOutputType = {
    propositions: number
    contrats: number
  }

  export type FreelancerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    propositions?: boolean | FreelancerCountOutputTypeCountPropositionsArgs
    contrats?: boolean | FreelancerCountOutputTypeCountContratsArgs
  }

  // Custom InputTypes

  /**
   * FreelancerCountOutputType without action
   */
  export type FreelancerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FreelancerCountOutputType
     */
    select?: FreelancerCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * FreelancerCountOutputType without action
   */
  export type FreelancerCountOutputTypeCountPropositionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PropositionWhereInput
  }


  /**
   * FreelancerCountOutputType without action
   */
  export type FreelancerCountOutputTypeCountContratsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContratWhereInput
  }



  /**
   * Count Type ProjetCountOutputType
   */

  export type ProjetCountOutputType = {
    propositions: number
  }

  export type ProjetCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    propositions?: boolean | ProjetCountOutputTypeCountPropositionsArgs
  }

  // Custom InputTypes

  /**
   * ProjetCountOutputType without action
   */
  export type ProjetCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjetCountOutputType
     */
    select?: ProjetCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ProjetCountOutputType without action
   */
  export type ProjetCountOutputTypeCountPropositionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PropositionWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Account
   */

  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountAvgAggregateOutputType = {
    userId: number | null
    expires_at: number | null
  }

  export type AccountSumAggregateOutputType = {
    userId: number | null
    expires_at: number | null
  }

  export type AccountMinAggregateOutputType = {
    id: string | null
    userId: number | null
    type: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
  }

  export type AccountMaxAggregateOutputType = {
    id: string | null
    userId: number | null
    type: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
  }

  export type AccountCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    refresh_token: number
    access_token: number
    expires_at: number
    token_type: number
    scope: number
    id_token: number
    session_state: number
    _all: number
  }


  export type AccountAvgAggregateInputType = {
    userId?: true
    expires_at?: true
  }

  export type AccountSumAggregateInputType = {
    userId?: true
    expires_at?: true
  }

  export type AccountMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
  }

  export type AccountMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
  }

  export type AccountCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
    _all?: true
  }

  export type AccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Account to aggregate.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithAggregationInput | AccountOrderByWithAggregationInput[]
    by: AccountScalarFieldEnum[] | AccountScalarFieldEnum
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _avg?: AccountAvgAggregateInputType
    _sum?: AccountSumAggregateInputType
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }

  export type AccountGroupByOutputType = {
    id: string
    userId: number
    type: string
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectScalar = {
    id?: boolean
    userId?: boolean
    type?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
  }

  export type AccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $AccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Account"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: number
      type: string
      refresh_token: string | null
      access_token: string | null
      expires_at: number | null
      token_type: string | null
      scope: string | null
      id_token: string | null
      session_state: string | null
    }, ExtArgs["result"]["account"]>
    composites: {}
  }


  type AccountGetPayload<S extends boolean | null | undefined | AccountDefaultArgs> = $Result.GetResult<Prisma.$AccountPayload, S>

  type AccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AccountFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: AccountCountAggregateInputType | true
    }

  export interface AccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Account'], meta: { name: 'Account' } }
    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AccountFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AccountFindUniqueArgs<ExtArgs>>
    ): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Account that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AccountFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountFindFirstArgs<ExtArgs>>
    ): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Account that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AccountFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AccountFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
    **/
    create<T extends AccountCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AccountCreateArgs<ExtArgs>>
    ): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Accounts.
     *     @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
     *     @example
     *     // Create many Accounts
     *     const account = await prisma.account.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AccountCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
    **/
    delete<T extends AccountDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AccountDeleteArgs<ExtArgs>>
    ): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AccountUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AccountUpdateArgs<ExtArgs>>
    ): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AccountDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AccountUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AccountUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
    **/
    upsert<T extends AccountUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AccountUpsertArgs<ExtArgs>>
    ): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): Prisma.PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Account model
   */
  readonly fields: AccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Account model
   */ 
  interface AccountFieldRefs {
    readonly id: FieldRef<"Account", 'String'>
    readonly userId: FieldRef<"Account", 'Int'>
    readonly type: FieldRef<"Account", 'String'>
    readonly refresh_token: FieldRef<"Account", 'String'>
    readonly access_token: FieldRef<"Account", 'String'>
    readonly expires_at: FieldRef<"Account", 'Int'>
    readonly token_type: FieldRef<"Account", 'String'>
    readonly scope: FieldRef<"Account", 'String'>
    readonly id_token: FieldRef<"Account", 'String'>
    readonly session_state: FieldRef<"Account", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Account findUnique
   */
  export type AccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }


  /**
   * Account findUniqueOrThrow
   */
  export type AccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }


  /**
   * Account findFirst
   */
  export type AccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }


  /**
   * Account findFirstOrThrow
   */
  export type AccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }


  /**
   * Account findMany
   */
  export type AccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Accounts to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }


  /**
   * Account create
   */
  export type AccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to create a Account.
     */
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }


  /**
   * Account createMany
   */
  export type AccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Account update
   */
  export type AccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to update a Account.
     */
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     */
    where: AccountWhereUniqueInput
  }


  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
  }


  /**
   * Account upsert
   */
  export type AccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The filter to search for the Account to update in case it exists.
     */
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     */
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }


  /**
   * Account delete
   */
  export type AccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter which Account to delete.
     */
    where: AccountWhereUniqueInput
  }


  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Accounts to delete
     */
    where?: AccountWhereInput
  }


  /**
   * Account without action
   */
  export type AccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
  }



  /**
   * Model AccountVerification
   */

  export type AggregateAccountVerification = {
    _count: AccountVerificationCountAggregateOutputType | null
    _avg: AccountVerificationAvgAggregateOutputType | null
    _sum: AccountVerificationSumAggregateOutputType | null
    _min: AccountVerificationMinAggregateOutputType | null
    _max: AccountVerificationMaxAggregateOutputType | null
  }

  export type AccountVerificationAvgAggregateOutputType = {
    id: number | null
    attempt: number | null
    userId: number | null
  }

  export type AccountVerificationSumAggregateOutputType = {
    id: number | null
    attempt: number | null
    userId: number | null
  }

  export type AccountVerificationMinAggregateOutputType = {
    id: number | null
    accountType: string | null
    verifiedAt: Date | null
    createdAt: Date | null
    verified: boolean | null
    ip: string | null
    firstName: string | null
    lastName: string | null
    code: string | null
    userName: string | null
    password: string | null
    attempt: number | null
    userId: number | null
  }

  export type AccountVerificationMaxAggregateOutputType = {
    id: number | null
    accountType: string | null
    verifiedAt: Date | null
    createdAt: Date | null
    verified: boolean | null
    ip: string | null
    firstName: string | null
    lastName: string | null
    code: string | null
    userName: string | null
    password: string | null
    attempt: number | null
    userId: number | null
  }

  export type AccountVerificationCountAggregateOutputType = {
    id: number
    accountType: number
    verifiedAt: number
    createdAt: number
    verified: number
    ip: number
    firstName: number
    lastName: number
    code: number
    userName: number
    password: number
    attempt: number
    userId: number
    _all: number
  }


  export type AccountVerificationAvgAggregateInputType = {
    id?: true
    attempt?: true
    userId?: true
  }

  export type AccountVerificationSumAggregateInputType = {
    id?: true
    attempt?: true
    userId?: true
  }

  export type AccountVerificationMinAggregateInputType = {
    id?: true
    accountType?: true
    verifiedAt?: true
    createdAt?: true
    verified?: true
    ip?: true
    firstName?: true
    lastName?: true
    code?: true
    userName?: true
    password?: true
    attempt?: true
    userId?: true
  }

  export type AccountVerificationMaxAggregateInputType = {
    id?: true
    accountType?: true
    verifiedAt?: true
    createdAt?: true
    verified?: true
    ip?: true
    firstName?: true
    lastName?: true
    code?: true
    userName?: true
    password?: true
    attempt?: true
    userId?: true
  }

  export type AccountVerificationCountAggregateInputType = {
    id?: true
    accountType?: true
    verifiedAt?: true
    createdAt?: true
    verified?: true
    ip?: true
    firstName?: true
    lastName?: true
    code?: true
    userName?: true
    password?: true
    attempt?: true
    userId?: true
    _all?: true
  }

  export type AccountVerificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AccountVerification to aggregate.
     */
    where?: AccountVerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountVerifications to fetch.
     */
    orderBy?: AccountVerificationOrderByWithRelationInput | AccountVerificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountVerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountVerifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountVerifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AccountVerifications
    **/
    _count?: true | AccountVerificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountVerificationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountVerificationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountVerificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountVerificationMaxAggregateInputType
  }

  export type GetAccountVerificationAggregateType<T extends AccountVerificationAggregateArgs> = {
        [P in keyof T & keyof AggregateAccountVerification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccountVerification[P]>
      : GetScalarType<T[P], AggregateAccountVerification[P]>
  }




  export type AccountVerificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountVerificationWhereInput
    orderBy?: AccountVerificationOrderByWithAggregationInput | AccountVerificationOrderByWithAggregationInput[]
    by: AccountVerificationScalarFieldEnum[] | AccountVerificationScalarFieldEnum
    having?: AccountVerificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountVerificationCountAggregateInputType | true
    _avg?: AccountVerificationAvgAggregateInputType
    _sum?: AccountVerificationSumAggregateInputType
    _min?: AccountVerificationMinAggregateInputType
    _max?: AccountVerificationMaxAggregateInputType
  }

  export type AccountVerificationGroupByOutputType = {
    id: number
    accountType: string
    verifiedAt: Date | null
    createdAt: Date
    verified: boolean
    ip: string | null
    firstName: string | null
    lastName: string | null
    code: string
    userName: string
    password: string
    attempt: number | null
    userId: number
    _count: AccountVerificationCountAggregateOutputType | null
    _avg: AccountVerificationAvgAggregateOutputType | null
    _sum: AccountVerificationSumAggregateOutputType | null
    _min: AccountVerificationMinAggregateOutputType | null
    _max: AccountVerificationMaxAggregateOutputType | null
  }

  type GetAccountVerificationGroupByPayload<T extends AccountVerificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountVerificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountVerificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountVerificationGroupByOutputType[P]>
            : GetScalarType<T[P], AccountVerificationGroupByOutputType[P]>
        }
      >
    >


  export type AccountVerificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    accountType?: boolean
    verifiedAt?: boolean
    createdAt?: boolean
    verified?: boolean
    ip?: boolean
    firstName?: boolean
    lastName?: boolean
    code?: boolean
    userName?: boolean
    password?: boolean
    attempt?: boolean
    userId?: boolean
  }, ExtArgs["result"]["accountVerification"]>

  export type AccountVerificationSelectScalar = {
    id?: boolean
    accountType?: boolean
    verifiedAt?: boolean
    createdAt?: boolean
    verified?: boolean
    ip?: boolean
    firstName?: boolean
    lastName?: boolean
    code?: boolean
    userName?: boolean
    password?: boolean
    attempt?: boolean
    userId?: boolean
  }


  export type $AccountVerificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AccountVerification"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      accountType: string
      verifiedAt: Date | null
      createdAt: Date
      verified: boolean
      ip: string | null
      firstName: string | null
      lastName: string | null
      code: string
      userName: string
      password: string
      attempt: number | null
      userId: number
    }, ExtArgs["result"]["accountVerification"]>
    composites: {}
  }


  type AccountVerificationGetPayload<S extends boolean | null | undefined | AccountVerificationDefaultArgs> = $Result.GetResult<Prisma.$AccountVerificationPayload, S>

  type AccountVerificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AccountVerificationFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: AccountVerificationCountAggregateInputType | true
    }

  export interface AccountVerificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AccountVerification'], meta: { name: 'AccountVerification' } }
    /**
     * Find zero or one AccountVerification that matches the filter.
     * @param {AccountVerificationFindUniqueArgs} args - Arguments to find a AccountVerification
     * @example
     * // Get one AccountVerification
     * const accountVerification = await prisma.accountVerification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AccountVerificationFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AccountVerificationFindUniqueArgs<ExtArgs>>
    ): Prisma__AccountVerificationClient<$Result.GetResult<Prisma.$AccountVerificationPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one AccountVerification that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AccountVerificationFindUniqueOrThrowArgs} args - Arguments to find a AccountVerification
     * @example
     * // Get one AccountVerification
     * const accountVerification = await prisma.accountVerification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AccountVerificationFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountVerificationFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AccountVerificationClient<$Result.GetResult<Prisma.$AccountVerificationPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first AccountVerification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountVerificationFindFirstArgs} args - Arguments to find a AccountVerification
     * @example
     * // Get one AccountVerification
     * const accountVerification = await prisma.accountVerification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AccountVerificationFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountVerificationFindFirstArgs<ExtArgs>>
    ): Prisma__AccountVerificationClient<$Result.GetResult<Prisma.$AccountVerificationPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first AccountVerification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountVerificationFindFirstOrThrowArgs} args - Arguments to find a AccountVerification
     * @example
     * // Get one AccountVerification
     * const accountVerification = await prisma.accountVerification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AccountVerificationFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountVerificationFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AccountVerificationClient<$Result.GetResult<Prisma.$AccountVerificationPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more AccountVerifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountVerificationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AccountVerifications
     * const accountVerifications = await prisma.accountVerification.findMany()
     * 
     * // Get first 10 AccountVerifications
     * const accountVerifications = await prisma.accountVerification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountVerificationWithIdOnly = await prisma.accountVerification.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AccountVerificationFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountVerificationFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountVerificationPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a AccountVerification.
     * @param {AccountVerificationCreateArgs} args - Arguments to create a AccountVerification.
     * @example
     * // Create one AccountVerification
     * const AccountVerification = await prisma.accountVerification.create({
     *   data: {
     *     // ... data to create a AccountVerification
     *   }
     * })
     * 
    **/
    create<T extends AccountVerificationCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AccountVerificationCreateArgs<ExtArgs>>
    ): Prisma__AccountVerificationClient<$Result.GetResult<Prisma.$AccountVerificationPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many AccountVerifications.
     *     @param {AccountVerificationCreateManyArgs} args - Arguments to create many AccountVerifications.
     *     @example
     *     // Create many AccountVerifications
     *     const accountVerification = await prisma.accountVerification.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AccountVerificationCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountVerificationCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AccountVerification.
     * @param {AccountVerificationDeleteArgs} args - Arguments to delete one AccountVerification.
     * @example
     * // Delete one AccountVerification
     * const AccountVerification = await prisma.accountVerification.delete({
     *   where: {
     *     // ... filter to delete one AccountVerification
     *   }
     * })
     * 
    **/
    delete<T extends AccountVerificationDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AccountVerificationDeleteArgs<ExtArgs>>
    ): Prisma__AccountVerificationClient<$Result.GetResult<Prisma.$AccountVerificationPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one AccountVerification.
     * @param {AccountVerificationUpdateArgs} args - Arguments to update one AccountVerification.
     * @example
     * // Update one AccountVerification
     * const accountVerification = await prisma.accountVerification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AccountVerificationUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AccountVerificationUpdateArgs<ExtArgs>>
    ): Prisma__AccountVerificationClient<$Result.GetResult<Prisma.$AccountVerificationPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more AccountVerifications.
     * @param {AccountVerificationDeleteManyArgs} args - Arguments to filter AccountVerifications to delete.
     * @example
     * // Delete a few AccountVerifications
     * const { count } = await prisma.accountVerification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AccountVerificationDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountVerificationDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AccountVerifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountVerificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AccountVerifications
     * const accountVerification = await prisma.accountVerification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AccountVerificationUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AccountVerificationUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AccountVerification.
     * @param {AccountVerificationUpsertArgs} args - Arguments to update or create a AccountVerification.
     * @example
     * // Update or create a AccountVerification
     * const accountVerification = await prisma.accountVerification.upsert({
     *   create: {
     *     // ... data to create a AccountVerification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AccountVerification we want to update
     *   }
     * })
    **/
    upsert<T extends AccountVerificationUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AccountVerificationUpsertArgs<ExtArgs>>
    ): Prisma__AccountVerificationClient<$Result.GetResult<Prisma.$AccountVerificationPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of AccountVerifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountVerificationCountArgs} args - Arguments to filter AccountVerifications to count.
     * @example
     * // Count the number of AccountVerifications
     * const count = await prisma.accountVerification.count({
     *   where: {
     *     // ... the filter for the AccountVerifications we want to count
     *   }
     * })
    **/
    count<T extends AccountVerificationCountArgs>(
      args?: Subset<T, AccountVerificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountVerificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AccountVerification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountVerificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountVerificationAggregateArgs>(args: Subset<T, AccountVerificationAggregateArgs>): Prisma.PrismaPromise<GetAccountVerificationAggregateType<T>>

    /**
     * Group by AccountVerification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountVerificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountVerificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountVerificationGroupByArgs['orderBy'] }
        : { orderBy?: AccountVerificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountVerificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountVerificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AccountVerification model
   */
  readonly fields: AccountVerificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AccountVerification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountVerificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the AccountVerification model
   */ 
  interface AccountVerificationFieldRefs {
    readonly id: FieldRef<"AccountVerification", 'Int'>
    readonly accountType: FieldRef<"AccountVerification", 'String'>
    readonly verifiedAt: FieldRef<"AccountVerification", 'DateTime'>
    readonly createdAt: FieldRef<"AccountVerification", 'DateTime'>
    readonly verified: FieldRef<"AccountVerification", 'Boolean'>
    readonly ip: FieldRef<"AccountVerification", 'String'>
    readonly firstName: FieldRef<"AccountVerification", 'String'>
    readonly lastName: FieldRef<"AccountVerification", 'String'>
    readonly code: FieldRef<"AccountVerification", 'String'>
    readonly userName: FieldRef<"AccountVerification", 'String'>
    readonly password: FieldRef<"AccountVerification", 'String'>
    readonly attempt: FieldRef<"AccountVerification", 'Int'>
    readonly userId: FieldRef<"AccountVerification", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * AccountVerification findUnique
   */
  export type AccountVerificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountVerification
     */
    select?: AccountVerificationSelect<ExtArgs> | null
    /**
     * Filter, which AccountVerification to fetch.
     */
    where: AccountVerificationWhereUniqueInput
  }


  /**
   * AccountVerification findUniqueOrThrow
   */
  export type AccountVerificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountVerification
     */
    select?: AccountVerificationSelect<ExtArgs> | null
    /**
     * Filter, which AccountVerification to fetch.
     */
    where: AccountVerificationWhereUniqueInput
  }


  /**
   * AccountVerification findFirst
   */
  export type AccountVerificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountVerification
     */
    select?: AccountVerificationSelect<ExtArgs> | null
    /**
     * Filter, which AccountVerification to fetch.
     */
    where?: AccountVerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountVerifications to fetch.
     */
    orderBy?: AccountVerificationOrderByWithRelationInput | AccountVerificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AccountVerifications.
     */
    cursor?: AccountVerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountVerifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountVerifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AccountVerifications.
     */
    distinct?: AccountVerificationScalarFieldEnum | AccountVerificationScalarFieldEnum[]
  }


  /**
   * AccountVerification findFirstOrThrow
   */
  export type AccountVerificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountVerification
     */
    select?: AccountVerificationSelect<ExtArgs> | null
    /**
     * Filter, which AccountVerification to fetch.
     */
    where?: AccountVerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountVerifications to fetch.
     */
    orderBy?: AccountVerificationOrderByWithRelationInput | AccountVerificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AccountVerifications.
     */
    cursor?: AccountVerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountVerifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountVerifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AccountVerifications.
     */
    distinct?: AccountVerificationScalarFieldEnum | AccountVerificationScalarFieldEnum[]
  }


  /**
   * AccountVerification findMany
   */
  export type AccountVerificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountVerification
     */
    select?: AccountVerificationSelect<ExtArgs> | null
    /**
     * Filter, which AccountVerifications to fetch.
     */
    where?: AccountVerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountVerifications to fetch.
     */
    orderBy?: AccountVerificationOrderByWithRelationInput | AccountVerificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AccountVerifications.
     */
    cursor?: AccountVerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountVerifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountVerifications.
     */
    skip?: number
    distinct?: AccountVerificationScalarFieldEnum | AccountVerificationScalarFieldEnum[]
  }


  /**
   * AccountVerification create
   */
  export type AccountVerificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountVerification
     */
    select?: AccountVerificationSelect<ExtArgs> | null
    /**
     * The data needed to create a AccountVerification.
     */
    data: XOR<AccountVerificationCreateInput, AccountVerificationUncheckedCreateInput>
  }


  /**
   * AccountVerification createMany
   */
  export type AccountVerificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AccountVerifications.
     */
    data: AccountVerificationCreateManyInput | AccountVerificationCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * AccountVerification update
   */
  export type AccountVerificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountVerification
     */
    select?: AccountVerificationSelect<ExtArgs> | null
    /**
     * The data needed to update a AccountVerification.
     */
    data: XOR<AccountVerificationUpdateInput, AccountVerificationUncheckedUpdateInput>
    /**
     * Choose, which AccountVerification to update.
     */
    where: AccountVerificationWhereUniqueInput
  }


  /**
   * AccountVerification updateMany
   */
  export type AccountVerificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AccountVerifications.
     */
    data: XOR<AccountVerificationUpdateManyMutationInput, AccountVerificationUncheckedUpdateManyInput>
    /**
     * Filter which AccountVerifications to update
     */
    where?: AccountVerificationWhereInput
  }


  /**
   * AccountVerification upsert
   */
  export type AccountVerificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountVerification
     */
    select?: AccountVerificationSelect<ExtArgs> | null
    /**
     * The filter to search for the AccountVerification to update in case it exists.
     */
    where: AccountVerificationWhereUniqueInput
    /**
     * In case the AccountVerification found by the `where` argument doesn't exist, create a new AccountVerification with this data.
     */
    create: XOR<AccountVerificationCreateInput, AccountVerificationUncheckedCreateInput>
    /**
     * In case the AccountVerification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountVerificationUpdateInput, AccountVerificationUncheckedUpdateInput>
  }


  /**
   * AccountVerification delete
   */
  export type AccountVerificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountVerification
     */
    select?: AccountVerificationSelect<ExtArgs> | null
    /**
     * Filter which AccountVerification to delete.
     */
    where: AccountVerificationWhereUniqueInput
  }


  /**
   * AccountVerification deleteMany
   */
  export type AccountVerificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AccountVerifications to delete
     */
    where?: AccountVerificationWhereInput
  }


  /**
   * AccountVerification without action
   */
  export type AccountVerificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountVerification
     */
    select?: AccountVerificationSelect<ExtArgs> | null
  }



  /**
   * Model PasswordReset
   */

  export type AggregatePasswordReset = {
    _count: PasswordResetCountAggregateOutputType | null
    _avg: PasswordResetAvgAggregateOutputType | null
    _sum: PasswordResetSumAggregateOutputType | null
    _min: PasswordResetMinAggregateOutputType | null
    _max: PasswordResetMaxAggregateOutputType | null
  }

  export type PasswordResetAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    attempt: number | null
  }

  export type PasswordResetSumAggregateOutputType = {
    id: number | null
    userId: number | null
    attempt: number | null
  }

  export type PasswordResetMinAggregateOutputType = {
    id: number | null
    userId: number | null
    code: string | null
    attempt: number | null
    ip: string | null
    createdAt: Date | null
    codeVerified: boolean | null
    codeVerifiedAt: Date | null
    reset: boolean | null
    resetAt: Date | null
  }

  export type PasswordResetMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    code: string | null
    attempt: number | null
    ip: string | null
    createdAt: Date | null
    codeVerified: boolean | null
    codeVerifiedAt: Date | null
    reset: boolean | null
    resetAt: Date | null
  }

  export type PasswordResetCountAggregateOutputType = {
    id: number
    userId: number
    code: number
    attempt: number
    ip: number
    createdAt: number
    codeVerified: number
    codeVerifiedAt: number
    reset: number
    resetAt: number
    _all: number
  }


  export type PasswordResetAvgAggregateInputType = {
    id?: true
    userId?: true
    attempt?: true
  }

  export type PasswordResetSumAggregateInputType = {
    id?: true
    userId?: true
    attempt?: true
  }

  export type PasswordResetMinAggregateInputType = {
    id?: true
    userId?: true
    code?: true
    attempt?: true
    ip?: true
    createdAt?: true
    codeVerified?: true
    codeVerifiedAt?: true
    reset?: true
    resetAt?: true
  }

  export type PasswordResetMaxAggregateInputType = {
    id?: true
    userId?: true
    code?: true
    attempt?: true
    ip?: true
    createdAt?: true
    codeVerified?: true
    codeVerifiedAt?: true
    reset?: true
    resetAt?: true
  }

  export type PasswordResetCountAggregateInputType = {
    id?: true
    userId?: true
    code?: true
    attempt?: true
    ip?: true
    createdAt?: true
    codeVerified?: true
    codeVerifiedAt?: true
    reset?: true
    resetAt?: true
    _all?: true
  }

  export type PasswordResetAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PasswordReset to aggregate.
     */
    where?: PasswordResetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordResets to fetch.
     */
    orderBy?: PasswordResetOrderByWithRelationInput | PasswordResetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PasswordResetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordResets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordResets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PasswordResets
    **/
    _count?: true | PasswordResetCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PasswordResetAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PasswordResetSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PasswordResetMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PasswordResetMaxAggregateInputType
  }

  export type GetPasswordResetAggregateType<T extends PasswordResetAggregateArgs> = {
        [P in keyof T & keyof AggregatePasswordReset]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePasswordReset[P]>
      : GetScalarType<T[P], AggregatePasswordReset[P]>
  }




  export type PasswordResetGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PasswordResetWhereInput
    orderBy?: PasswordResetOrderByWithAggregationInput | PasswordResetOrderByWithAggregationInput[]
    by: PasswordResetScalarFieldEnum[] | PasswordResetScalarFieldEnum
    having?: PasswordResetScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PasswordResetCountAggregateInputType | true
    _avg?: PasswordResetAvgAggregateInputType
    _sum?: PasswordResetSumAggregateInputType
    _min?: PasswordResetMinAggregateInputType
    _max?: PasswordResetMaxAggregateInputType
  }

  export type PasswordResetGroupByOutputType = {
    id: number
    userId: number
    code: string
    attempt: number
    ip: string
    createdAt: Date | null
    codeVerified: boolean
    codeVerifiedAt: Date | null
    reset: boolean
    resetAt: Date | null
    _count: PasswordResetCountAggregateOutputType | null
    _avg: PasswordResetAvgAggregateOutputType | null
    _sum: PasswordResetSumAggregateOutputType | null
    _min: PasswordResetMinAggregateOutputType | null
    _max: PasswordResetMaxAggregateOutputType | null
  }

  type GetPasswordResetGroupByPayload<T extends PasswordResetGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PasswordResetGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PasswordResetGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PasswordResetGroupByOutputType[P]>
            : GetScalarType<T[P], PasswordResetGroupByOutputType[P]>
        }
      >
    >


  export type PasswordResetSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    code?: boolean
    attempt?: boolean
    ip?: boolean
    createdAt?: boolean
    codeVerified?: boolean
    codeVerifiedAt?: boolean
    reset?: boolean
    resetAt?: boolean
  }, ExtArgs["result"]["passwordReset"]>

  export type PasswordResetSelectScalar = {
    id?: boolean
    userId?: boolean
    code?: boolean
    attempt?: boolean
    ip?: boolean
    createdAt?: boolean
    codeVerified?: boolean
    codeVerifiedAt?: boolean
    reset?: boolean
    resetAt?: boolean
  }


  export type $PasswordResetPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PasswordReset"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      code: string
      attempt: number
      ip: string
      createdAt: Date | null
      codeVerified: boolean
      codeVerifiedAt: Date | null
      reset: boolean
      resetAt: Date | null
    }, ExtArgs["result"]["passwordReset"]>
    composites: {}
  }


  type PasswordResetGetPayload<S extends boolean | null | undefined | PasswordResetDefaultArgs> = $Result.GetResult<Prisma.$PasswordResetPayload, S>

  type PasswordResetCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PasswordResetFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: PasswordResetCountAggregateInputType | true
    }

  export interface PasswordResetDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PasswordReset'], meta: { name: 'PasswordReset' } }
    /**
     * Find zero or one PasswordReset that matches the filter.
     * @param {PasswordResetFindUniqueArgs} args - Arguments to find a PasswordReset
     * @example
     * // Get one PasswordReset
     * const passwordReset = await prisma.passwordReset.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PasswordResetFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PasswordResetFindUniqueArgs<ExtArgs>>
    ): Prisma__PasswordResetClient<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one PasswordReset that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PasswordResetFindUniqueOrThrowArgs} args - Arguments to find a PasswordReset
     * @example
     * // Get one PasswordReset
     * const passwordReset = await prisma.passwordReset.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PasswordResetFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PasswordResetFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PasswordResetClient<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first PasswordReset that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetFindFirstArgs} args - Arguments to find a PasswordReset
     * @example
     * // Get one PasswordReset
     * const passwordReset = await prisma.passwordReset.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PasswordResetFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PasswordResetFindFirstArgs<ExtArgs>>
    ): Prisma__PasswordResetClient<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first PasswordReset that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetFindFirstOrThrowArgs} args - Arguments to find a PasswordReset
     * @example
     * // Get one PasswordReset
     * const passwordReset = await prisma.passwordReset.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PasswordResetFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PasswordResetFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PasswordResetClient<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more PasswordResets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PasswordResets
     * const passwordResets = await prisma.passwordReset.findMany()
     * 
     * // Get first 10 PasswordResets
     * const passwordResets = await prisma.passwordReset.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const passwordResetWithIdOnly = await prisma.passwordReset.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PasswordResetFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PasswordResetFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a PasswordReset.
     * @param {PasswordResetCreateArgs} args - Arguments to create a PasswordReset.
     * @example
     * // Create one PasswordReset
     * const PasswordReset = await prisma.passwordReset.create({
     *   data: {
     *     // ... data to create a PasswordReset
     *   }
     * })
     * 
    **/
    create<T extends PasswordResetCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PasswordResetCreateArgs<ExtArgs>>
    ): Prisma__PasswordResetClient<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many PasswordResets.
     *     @param {PasswordResetCreateManyArgs} args - Arguments to create many PasswordResets.
     *     @example
     *     // Create many PasswordResets
     *     const passwordReset = await prisma.passwordReset.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PasswordResetCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PasswordResetCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PasswordReset.
     * @param {PasswordResetDeleteArgs} args - Arguments to delete one PasswordReset.
     * @example
     * // Delete one PasswordReset
     * const PasswordReset = await prisma.passwordReset.delete({
     *   where: {
     *     // ... filter to delete one PasswordReset
     *   }
     * })
     * 
    **/
    delete<T extends PasswordResetDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PasswordResetDeleteArgs<ExtArgs>>
    ): Prisma__PasswordResetClient<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one PasswordReset.
     * @param {PasswordResetUpdateArgs} args - Arguments to update one PasswordReset.
     * @example
     * // Update one PasswordReset
     * const passwordReset = await prisma.passwordReset.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PasswordResetUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PasswordResetUpdateArgs<ExtArgs>>
    ): Prisma__PasswordResetClient<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more PasswordResets.
     * @param {PasswordResetDeleteManyArgs} args - Arguments to filter PasswordResets to delete.
     * @example
     * // Delete a few PasswordResets
     * const { count } = await prisma.passwordReset.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PasswordResetDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PasswordResetDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PasswordResets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PasswordResets
     * const passwordReset = await prisma.passwordReset.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PasswordResetUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PasswordResetUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PasswordReset.
     * @param {PasswordResetUpsertArgs} args - Arguments to update or create a PasswordReset.
     * @example
     * // Update or create a PasswordReset
     * const passwordReset = await prisma.passwordReset.upsert({
     *   create: {
     *     // ... data to create a PasswordReset
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PasswordReset we want to update
     *   }
     * })
    **/
    upsert<T extends PasswordResetUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PasswordResetUpsertArgs<ExtArgs>>
    ): Prisma__PasswordResetClient<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of PasswordResets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetCountArgs} args - Arguments to filter PasswordResets to count.
     * @example
     * // Count the number of PasswordResets
     * const count = await prisma.passwordReset.count({
     *   where: {
     *     // ... the filter for the PasswordResets we want to count
     *   }
     * })
    **/
    count<T extends PasswordResetCountArgs>(
      args?: Subset<T, PasswordResetCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PasswordResetCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PasswordReset.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PasswordResetAggregateArgs>(args: Subset<T, PasswordResetAggregateArgs>): Prisma.PrismaPromise<GetPasswordResetAggregateType<T>>

    /**
     * Group by PasswordReset.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PasswordResetGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PasswordResetGroupByArgs['orderBy'] }
        : { orderBy?: PasswordResetGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PasswordResetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPasswordResetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PasswordReset model
   */
  readonly fields: PasswordResetFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PasswordReset.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PasswordResetClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the PasswordReset model
   */ 
  interface PasswordResetFieldRefs {
    readonly id: FieldRef<"PasswordReset", 'Int'>
    readonly userId: FieldRef<"PasswordReset", 'Int'>
    readonly code: FieldRef<"PasswordReset", 'String'>
    readonly attempt: FieldRef<"PasswordReset", 'Int'>
    readonly ip: FieldRef<"PasswordReset", 'String'>
    readonly createdAt: FieldRef<"PasswordReset", 'DateTime'>
    readonly codeVerified: FieldRef<"PasswordReset", 'Boolean'>
    readonly codeVerifiedAt: FieldRef<"PasswordReset", 'DateTime'>
    readonly reset: FieldRef<"PasswordReset", 'Boolean'>
    readonly resetAt: FieldRef<"PasswordReset", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * PasswordReset findUnique
   */
  export type PasswordResetFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * Filter, which PasswordReset to fetch.
     */
    where: PasswordResetWhereUniqueInput
  }


  /**
   * PasswordReset findUniqueOrThrow
   */
  export type PasswordResetFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * Filter, which PasswordReset to fetch.
     */
    where: PasswordResetWhereUniqueInput
  }


  /**
   * PasswordReset findFirst
   */
  export type PasswordResetFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * Filter, which PasswordReset to fetch.
     */
    where?: PasswordResetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordResets to fetch.
     */
    orderBy?: PasswordResetOrderByWithRelationInput | PasswordResetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PasswordResets.
     */
    cursor?: PasswordResetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordResets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordResets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PasswordResets.
     */
    distinct?: PasswordResetScalarFieldEnum | PasswordResetScalarFieldEnum[]
  }


  /**
   * PasswordReset findFirstOrThrow
   */
  export type PasswordResetFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * Filter, which PasswordReset to fetch.
     */
    where?: PasswordResetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordResets to fetch.
     */
    orderBy?: PasswordResetOrderByWithRelationInput | PasswordResetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PasswordResets.
     */
    cursor?: PasswordResetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordResets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordResets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PasswordResets.
     */
    distinct?: PasswordResetScalarFieldEnum | PasswordResetScalarFieldEnum[]
  }


  /**
   * PasswordReset findMany
   */
  export type PasswordResetFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * Filter, which PasswordResets to fetch.
     */
    where?: PasswordResetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordResets to fetch.
     */
    orderBy?: PasswordResetOrderByWithRelationInput | PasswordResetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PasswordResets.
     */
    cursor?: PasswordResetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordResets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordResets.
     */
    skip?: number
    distinct?: PasswordResetScalarFieldEnum | PasswordResetScalarFieldEnum[]
  }


  /**
   * PasswordReset create
   */
  export type PasswordResetCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * The data needed to create a PasswordReset.
     */
    data: XOR<PasswordResetCreateInput, PasswordResetUncheckedCreateInput>
  }


  /**
   * PasswordReset createMany
   */
  export type PasswordResetCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PasswordResets.
     */
    data: PasswordResetCreateManyInput | PasswordResetCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * PasswordReset update
   */
  export type PasswordResetUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * The data needed to update a PasswordReset.
     */
    data: XOR<PasswordResetUpdateInput, PasswordResetUncheckedUpdateInput>
    /**
     * Choose, which PasswordReset to update.
     */
    where: PasswordResetWhereUniqueInput
  }


  /**
   * PasswordReset updateMany
   */
  export type PasswordResetUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PasswordResets.
     */
    data: XOR<PasswordResetUpdateManyMutationInput, PasswordResetUncheckedUpdateManyInput>
    /**
     * Filter which PasswordResets to update
     */
    where?: PasswordResetWhereInput
  }


  /**
   * PasswordReset upsert
   */
  export type PasswordResetUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * The filter to search for the PasswordReset to update in case it exists.
     */
    where: PasswordResetWhereUniqueInput
    /**
     * In case the PasswordReset found by the `where` argument doesn't exist, create a new PasswordReset with this data.
     */
    create: XOR<PasswordResetCreateInput, PasswordResetUncheckedCreateInput>
    /**
     * In case the PasswordReset was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PasswordResetUpdateInput, PasswordResetUncheckedUpdateInput>
  }


  /**
   * PasswordReset delete
   */
  export type PasswordResetDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * Filter which PasswordReset to delete.
     */
    where: PasswordResetWhereUniqueInput
  }


  /**
   * PasswordReset deleteMany
   */
  export type PasswordResetDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PasswordResets to delete
     */
    where?: PasswordResetWhereInput
  }


  /**
   * PasswordReset without action
   */
  export type PasswordResetDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
  }



  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _avg: SessionAvgAggregateOutputType | null
    _sum: SessionSumAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type SessionSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type SessionMinAggregateOutputType = {
    id: number | null
    sessionToken: string | null
    userId: number | null
    expires: Date | null
    active: boolean | null
  }

  export type SessionMaxAggregateOutputType = {
    id: number | null
    sessionToken: string | null
    userId: number | null
    expires: Date | null
    active: boolean | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    sessionToken: number
    userId: number
    expires: number
    active: number
    _all: number
  }


  export type SessionAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type SessionSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type SessionMinAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
    active?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
    active?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
    active?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _avg?: SessionAvgAggregateInputType
    _sum?: SessionSumAggregateInputType
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    id: number
    sessionToken: string
    userId: number
    expires: Date
    active: boolean
    _count: SessionCountAggregateOutputType | null
    _avg: SessionAvgAggregateOutputType | null
    _sum: SessionSumAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    active?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    active?: boolean
  }

  export type SessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      sessionToken: string
      userId: number
      expires: Date
      active: boolean
    }, ExtArgs["result"]["session"]>
    composites: {}
  }


  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SessionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>
    ): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Session that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SessionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>
    ): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SessionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
    **/
    create<T extends SessionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SessionCreateArgs<ExtArgs>>
    ): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Sessions.
     *     @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     *     @example
     *     // Create many Sessions
     *     const session = await prisma.session.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SessionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
    **/
    delete<T extends SessionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>
    ): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SessionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>
    ): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SessionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SessionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
    **/
    upsert<T extends SessionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>
    ): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Session model
   */ 
  interface SessionFieldRefs {
    readonly id: FieldRef<"Session", 'Int'>
    readonly sessionToken: FieldRef<"Session", 'String'>
    readonly userId: FieldRef<"Session", 'Int'>
    readonly expires: FieldRef<"Session", 'DateTime'>
    readonly active: FieldRef<"Session", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }


  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }


  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }


  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }


  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
  }


  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }


  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
  }


  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
  }



  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    firstName: string | null
    lastName: string | null
    email: string | null
    userName: string | null
    phoneNumber: string | null
    passwordHash: string | null
    active: boolean | null
    createdAt: Date | null
    verifiedAt: Date | null
    signupMethod: string | null
    image: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    firstName: string | null
    lastName: string | null
    email: string | null
    userName: string | null
    phoneNumber: string | null
    passwordHash: string | null
    active: boolean | null
    createdAt: Date | null
    verifiedAt: Date | null
    signupMethod: string | null
    image: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    firstName: number
    lastName: number
    email: number
    userName: number
    phoneNumber: number
    passwordHash: number
    active: number
    createdAt: number
    verifiedAt: number
    signupMethod: number
    image: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    userName?: true
    phoneNumber?: true
    passwordHash?: true
    active?: true
    createdAt?: true
    verifiedAt?: true
    signupMethod?: true
    image?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    userName?: true
    phoneNumber?: true
    passwordHash?: true
    active?: true
    createdAt?: true
    verifiedAt?: true
    signupMethod?: true
    image?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    userName?: true
    phoneNumber?: true
    passwordHash?: true
    active?: true
    createdAt?: true
    verifiedAt?: true
    signupMethod?: true
    image?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    firstName: string | null
    lastName: string | null
    email: string | null
    userName: string | null
    phoneNumber: string | null
    passwordHash: string | null
    active: boolean | null
    createdAt: Date | null
    verifiedAt: Date | null
    signupMethod: string | null
    image: string | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    userName?: boolean
    phoneNumber?: boolean
    passwordHash?: boolean
    active?: boolean
    createdAt?: boolean
    verifiedAt?: boolean
    signupMethod?: boolean
    image?: boolean
    entreprise?: boolean | User$entrepriseArgs<ExtArgs>
    candidat?: boolean | User$candidatArgs<ExtArgs>
    accounts?: boolean | User$accountsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    userName?: boolean
    phoneNumber?: boolean
    passwordHash?: boolean
    active?: boolean
    createdAt?: boolean
    verifiedAt?: boolean
    signupMethod?: boolean
    image?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    entreprise?: boolean | User$entrepriseArgs<ExtArgs>
    candidat?: boolean | User$candidatArgs<ExtArgs>
    accounts?: boolean | User$accountsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      entreprise: Prisma.$EntreprisePayload<ExtArgs>[]
      candidat: Prisma.$CandidatPayload<ExtArgs>[]
      accounts: Prisma.$AccountPayload<ExtArgs>[]
      sessions: Prisma.$SessionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      firstName: string | null
      lastName: string | null
      email: string | null
      userName: string | null
      phoneNumber: string | null
      passwordHash: string | null
      active: boolean | null
      createdAt: Date | null
      verifiedAt: Date | null
      signupMethod: string | null
      image: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    entreprise<T extends User$entrepriseArgs<ExtArgs> = {}>(args?: Subset<T, User$entrepriseArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EntreprisePayload<ExtArgs>, T, 'findMany'> | Null>;

    candidat<T extends User$candidatArgs<ExtArgs> = {}>(args?: Subset<T, User$candidatArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CandidatPayload<ExtArgs>, T, 'findMany'> | Null>;

    accounts<T extends User$accountsArgs<ExtArgs> = {}>(args?: Subset<T, User$accountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'findMany'> | Null>;

    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly userName: FieldRef<"User", 'String'>
    readonly phoneNumber: FieldRef<"User", 'String'>
    readonly passwordHash: FieldRef<"User", 'String'>
    readonly active: FieldRef<"User", 'Boolean'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly verifiedAt: FieldRef<"User", 'DateTime'>
    readonly signupMethod: FieldRef<"User", 'String'>
    readonly image: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data?: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.entreprise
   */
  export type User$entrepriseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entreprise
     */
    select?: EntrepriseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EntrepriseInclude<ExtArgs> | null
    where?: EntrepriseWhereInput
    orderBy?: EntrepriseOrderByWithRelationInput | EntrepriseOrderByWithRelationInput[]
    cursor?: EntrepriseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EntrepriseScalarFieldEnum | EntrepriseScalarFieldEnum[]
  }


  /**
   * User.candidat
   */
  export type User$candidatArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidat
     */
    select?: CandidatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CandidatInclude<ExtArgs> | null
    where?: CandidatWhereInput
    orderBy?: CandidatOrderByWithRelationInput | CandidatOrderByWithRelationInput[]
    cursor?: CandidatWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CandidatScalarFieldEnum | CandidatScalarFieldEnum[]
  }


  /**
   * User.accounts
   */
  export type User$accountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    cursor?: AccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }


  /**
   * User.sessions
   */
  export type User$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }


  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
  }



  /**
   * Model Candidat
   */

  export type AggregateCandidat = {
    _count: CandidatCountAggregateOutputType | null
    _avg: CandidatAvgAggregateOutputType | null
    _sum: CandidatSumAggregateOutputType | null
    _min: CandidatMinAggregateOutputType | null
    _max: CandidatMaxAggregateOutputType | null
  }

  export type CandidatAvgAggregateOutputType = {
    idCandidat: number | null
    userId: number | null
  }

  export type CandidatSumAggregateOutputType = {
    idCandidat: number | null
    userId: number | null
  }

  export type CandidatMinAggregateOutputType = {
    idCandidat: number | null
    adresCandidat: string | null
    experienceCandidat: string | null
    nivEtudesCandidat: string | null
    competencesCandidat: string | null
    cVCandidat: string | null
    userId: number | null
  }

  export type CandidatMaxAggregateOutputType = {
    idCandidat: number | null
    adresCandidat: string | null
    experienceCandidat: string | null
    nivEtudesCandidat: string | null
    competencesCandidat: string | null
    cVCandidat: string | null
    userId: number | null
  }

  export type CandidatCountAggregateOutputType = {
    idCandidat: number
    adresCandidat: number
    experienceCandidat: number
    nivEtudesCandidat: number
    competencesCandidat: number
    cVCandidat: number
    userId: number
    _all: number
  }


  export type CandidatAvgAggregateInputType = {
    idCandidat?: true
    userId?: true
  }

  export type CandidatSumAggregateInputType = {
    idCandidat?: true
    userId?: true
  }

  export type CandidatMinAggregateInputType = {
    idCandidat?: true
    adresCandidat?: true
    experienceCandidat?: true
    nivEtudesCandidat?: true
    competencesCandidat?: true
    cVCandidat?: true
    userId?: true
  }

  export type CandidatMaxAggregateInputType = {
    idCandidat?: true
    adresCandidat?: true
    experienceCandidat?: true
    nivEtudesCandidat?: true
    competencesCandidat?: true
    cVCandidat?: true
    userId?: true
  }

  export type CandidatCountAggregateInputType = {
    idCandidat?: true
    adresCandidat?: true
    experienceCandidat?: true
    nivEtudesCandidat?: true
    competencesCandidat?: true
    cVCandidat?: true
    userId?: true
    _all?: true
  }

  export type CandidatAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Candidat to aggregate.
     */
    where?: CandidatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Candidats to fetch.
     */
    orderBy?: CandidatOrderByWithRelationInput | CandidatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CandidatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Candidats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Candidats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Candidats
    **/
    _count?: true | CandidatCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CandidatAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CandidatSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CandidatMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CandidatMaxAggregateInputType
  }

  export type GetCandidatAggregateType<T extends CandidatAggregateArgs> = {
        [P in keyof T & keyof AggregateCandidat]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCandidat[P]>
      : GetScalarType<T[P], AggregateCandidat[P]>
  }




  export type CandidatGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CandidatWhereInput
    orderBy?: CandidatOrderByWithAggregationInput | CandidatOrderByWithAggregationInput[]
    by: CandidatScalarFieldEnum[] | CandidatScalarFieldEnum
    having?: CandidatScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CandidatCountAggregateInputType | true
    _avg?: CandidatAvgAggregateInputType
    _sum?: CandidatSumAggregateInputType
    _min?: CandidatMinAggregateInputType
    _max?: CandidatMaxAggregateInputType
  }

  export type CandidatGroupByOutputType = {
    idCandidat: number
    adresCandidat: string | null
    experienceCandidat: string | null
    nivEtudesCandidat: string | null
    competencesCandidat: string | null
    cVCandidat: string | null
    userId: number
    _count: CandidatCountAggregateOutputType | null
    _avg: CandidatAvgAggregateOutputType | null
    _sum: CandidatSumAggregateOutputType | null
    _min: CandidatMinAggregateOutputType | null
    _max: CandidatMaxAggregateOutputType | null
  }

  type GetCandidatGroupByPayload<T extends CandidatGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CandidatGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CandidatGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CandidatGroupByOutputType[P]>
            : GetScalarType<T[P], CandidatGroupByOutputType[P]>
        }
      >
    >


  export type CandidatSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idCandidat?: boolean
    adresCandidat?: boolean
    experienceCandidat?: boolean
    nivEtudesCandidat?: boolean
    competencesCandidat?: boolean
    cVCandidat?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    entretiens?: boolean | Candidat$entretiensArgs<ExtArgs>
    notes?: boolean | Candidat$notesArgs<ExtArgs>
    _count?: boolean | CandidatCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["candidat"]>

  export type CandidatSelectScalar = {
    idCandidat?: boolean
    adresCandidat?: boolean
    experienceCandidat?: boolean
    nivEtudesCandidat?: boolean
    competencesCandidat?: boolean
    cVCandidat?: boolean
    userId?: boolean
  }

  export type CandidatInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    entretiens?: boolean | Candidat$entretiensArgs<ExtArgs>
    notes?: boolean | Candidat$notesArgs<ExtArgs>
    _count?: boolean | CandidatCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $CandidatPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Candidat"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      entretiens: Prisma.$EntretienPayload<ExtArgs>[]
      notes: Prisma.$NotePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      idCandidat: number
      adresCandidat: string | null
      experienceCandidat: string | null
      nivEtudesCandidat: string | null
      competencesCandidat: string | null
      cVCandidat: string | null
      userId: number
    }, ExtArgs["result"]["candidat"]>
    composites: {}
  }


  type CandidatGetPayload<S extends boolean | null | undefined | CandidatDefaultArgs> = $Result.GetResult<Prisma.$CandidatPayload, S>

  type CandidatCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CandidatFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: CandidatCountAggregateInputType | true
    }

  export interface CandidatDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Candidat'], meta: { name: 'Candidat' } }
    /**
     * Find zero or one Candidat that matches the filter.
     * @param {CandidatFindUniqueArgs} args - Arguments to find a Candidat
     * @example
     * // Get one Candidat
     * const candidat = await prisma.candidat.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CandidatFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CandidatFindUniqueArgs<ExtArgs>>
    ): Prisma__CandidatClient<$Result.GetResult<Prisma.$CandidatPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Candidat that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CandidatFindUniqueOrThrowArgs} args - Arguments to find a Candidat
     * @example
     * // Get one Candidat
     * const candidat = await prisma.candidat.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CandidatFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CandidatFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CandidatClient<$Result.GetResult<Prisma.$CandidatPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Candidat that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidatFindFirstArgs} args - Arguments to find a Candidat
     * @example
     * // Get one Candidat
     * const candidat = await prisma.candidat.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CandidatFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CandidatFindFirstArgs<ExtArgs>>
    ): Prisma__CandidatClient<$Result.GetResult<Prisma.$CandidatPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Candidat that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidatFindFirstOrThrowArgs} args - Arguments to find a Candidat
     * @example
     * // Get one Candidat
     * const candidat = await prisma.candidat.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CandidatFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CandidatFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CandidatClient<$Result.GetResult<Prisma.$CandidatPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Candidats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidatFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Candidats
     * const candidats = await prisma.candidat.findMany()
     * 
     * // Get first 10 Candidats
     * const candidats = await prisma.candidat.findMany({ take: 10 })
     * 
     * // Only select the `idCandidat`
     * const candidatWithIdCandidatOnly = await prisma.candidat.findMany({ select: { idCandidat: true } })
     * 
    **/
    findMany<T extends CandidatFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CandidatFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CandidatPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Candidat.
     * @param {CandidatCreateArgs} args - Arguments to create a Candidat.
     * @example
     * // Create one Candidat
     * const Candidat = await prisma.candidat.create({
     *   data: {
     *     // ... data to create a Candidat
     *   }
     * })
     * 
    **/
    create<T extends CandidatCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CandidatCreateArgs<ExtArgs>>
    ): Prisma__CandidatClient<$Result.GetResult<Prisma.$CandidatPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Candidats.
     *     @param {CandidatCreateManyArgs} args - Arguments to create many Candidats.
     *     @example
     *     // Create many Candidats
     *     const candidat = await prisma.candidat.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CandidatCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CandidatCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Candidat.
     * @param {CandidatDeleteArgs} args - Arguments to delete one Candidat.
     * @example
     * // Delete one Candidat
     * const Candidat = await prisma.candidat.delete({
     *   where: {
     *     // ... filter to delete one Candidat
     *   }
     * })
     * 
    **/
    delete<T extends CandidatDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CandidatDeleteArgs<ExtArgs>>
    ): Prisma__CandidatClient<$Result.GetResult<Prisma.$CandidatPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Candidat.
     * @param {CandidatUpdateArgs} args - Arguments to update one Candidat.
     * @example
     * // Update one Candidat
     * const candidat = await prisma.candidat.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CandidatUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CandidatUpdateArgs<ExtArgs>>
    ): Prisma__CandidatClient<$Result.GetResult<Prisma.$CandidatPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Candidats.
     * @param {CandidatDeleteManyArgs} args - Arguments to filter Candidats to delete.
     * @example
     * // Delete a few Candidats
     * const { count } = await prisma.candidat.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CandidatDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CandidatDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Candidats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidatUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Candidats
     * const candidat = await prisma.candidat.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CandidatUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CandidatUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Candidat.
     * @param {CandidatUpsertArgs} args - Arguments to update or create a Candidat.
     * @example
     * // Update or create a Candidat
     * const candidat = await prisma.candidat.upsert({
     *   create: {
     *     // ... data to create a Candidat
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Candidat we want to update
     *   }
     * })
    **/
    upsert<T extends CandidatUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CandidatUpsertArgs<ExtArgs>>
    ): Prisma__CandidatClient<$Result.GetResult<Prisma.$CandidatPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Candidats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidatCountArgs} args - Arguments to filter Candidats to count.
     * @example
     * // Count the number of Candidats
     * const count = await prisma.candidat.count({
     *   where: {
     *     // ... the filter for the Candidats we want to count
     *   }
     * })
    **/
    count<T extends CandidatCountArgs>(
      args?: Subset<T, CandidatCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CandidatCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Candidat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidatAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CandidatAggregateArgs>(args: Subset<T, CandidatAggregateArgs>): Prisma.PrismaPromise<GetCandidatAggregateType<T>>

    /**
     * Group by Candidat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidatGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CandidatGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CandidatGroupByArgs['orderBy'] }
        : { orderBy?: CandidatGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CandidatGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCandidatGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Candidat model
   */
  readonly fields: CandidatFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Candidat.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CandidatClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    entretiens<T extends Candidat$entretiensArgs<ExtArgs> = {}>(args?: Subset<T, Candidat$entretiensArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EntretienPayload<ExtArgs>, T, 'findMany'> | Null>;

    notes<T extends Candidat$notesArgs<ExtArgs> = {}>(args?: Subset<T, Candidat$notesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Candidat model
   */ 
  interface CandidatFieldRefs {
    readonly idCandidat: FieldRef<"Candidat", 'Int'>
    readonly adresCandidat: FieldRef<"Candidat", 'String'>
    readonly experienceCandidat: FieldRef<"Candidat", 'String'>
    readonly nivEtudesCandidat: FieldRef<"Candidat", 'String'>
    readonly competencesCandidat: FieldRef<"Candidat", 'String'>
    readonly cVCandidat: FieldRef<"Candidat", 'String'>
    readonly userId: FieldRef<"Candidat", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Candidat findUnique
   */
  export type CandidatFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidat
     */
    select?: CandidatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CandidatInclude<ExtArgs> | null
    /**
     * Filter, which Candidat to fetch.
     */
    where: CandidatWhereUniqueInput
  }


  /**
   * Candidat findUniqueOrThrow
   */
  export type CandidatFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidat
     */
    select?: CandidatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CandidatInclude<ExtArgs> | null
    /**
     * Filter, which Candidat to fetch.
     */
    where: CandidatWhereUniqueInput
  }


  /**
   * Candidat findFirst
   */
  export type CandidatFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidat
     */
    select?: CandidatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CandidatInclude<ExtArgs> | null
    /**
     * Filter, which Candidat to fetch.
     */
    where?: CandidatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Candidats to fetch.
     */
    orderBy?: CandidatOrderByWithRelationInput | CandidatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Candidats.
     */
    cursor?: CandidatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Candidats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Candidats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Candidats.
     */
    distinct?: CandidatScalarFieldEnum | CandidatScalarFieldEnum[]
  }


  /**
   * Candidat findFirstOrThrow
   */
  export type CandidatFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidat
     */
    select?: CandidatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CandidatInclude<ExtArgs> | null
    /**
     * Filter, which Candidat to fetch.
     */
    where?: CandidatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Candidats to fetch.
     */
    orderBy?: CandidatOrderByWithRelationInput | CandidatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Candidats.
     */
    cursor?: CandidatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Candidats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Candidats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Candidats.
     */
    distinct?: CandidatScalarFieldEnum | CandidatScalarFieldEnum[]
  }


  /**
   * Candidat findMany
   */
  export type CandidatFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidat
     */
    select?: CandidatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CandidatInclude<ExtArgs> | null
    /**
     * Filter, which Candidats to fetch.
     */
    where?: CandidatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Candidats to fetch.
     */
    orderBy?: CandidatOrderByWithRelationInput | CandidatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Candidats.
     */
    cursor?: CandidatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Candidats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Candidats.
     */
    skip?: number
    distinct?: CandidatScalarFieldEnum | CandidatScalarFieldEnum[]
  }


  /**
   * Candidat create
   */
  export type CandidatCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidat
     */
    select?: CandidatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CandidatInclude<ExtArgs> | null
    /**
     * The data needed to create a Candidat.
     */
    data: XOR<CandidatCreateInput, CandidatUncheckedCreateInput>
  }


  /**
   * Candidat createMany
   */
  export type CandidatCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Candidats.
     */
    data: CandidatCreateManyInput | CandidatCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Candidat update
   */
  export type CandidatUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidat
     */
    select?: CandidatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CandidatInclude<ExtArgs> | null
    /**
     * The data needed to update a Candidat.
     */
    data: XOR<CandidatUpdateInput, CandidatUncheckedUpdateInput>
    /**
     * Choose, which Candidat to update.
     */
    where: CandidatWhereUniqueInput
  }


  /**
   * Candidat updateMany
   */
  export type CandidatUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Candidats.
     */
    data: XOR<CandidatUpdateManyMutationInput, CandidatUncheckedUpdateManyInput>
    /**
     * Filter which Candidats to update
     */
    where?: CandidatWhereInput
  }


  /**
   * Candidat upsert
   */
  export type CandidatUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidat
     */
    select?: CandidatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CandidatInclude<ExtArgs> | null
    /**
     * The filter to search for the Candidat to update in case it exists.
     */
    where: CandidatWhereUniqueInput
    /**
     * In case the Candidat found by the `where` argument doesn't exist, create a new Candidat with this data.
     */
    create: XOR<CandidatCreateInput, CandidatUncheckedCreateInput>
    /**
     * In case the Candidat was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CandidatUpdateInput, CandidatUncheckedUpdateInput>
  }


  /**
   * Candidat delete
   */
  export type CandidatDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidat
     */
    select?: CandidatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CandidatInclude<ExtArgs> | null
    /**
     * Filter which Candidat to delete.
     */
    where: CandidatWhereUniqueInput
  }


  /**
   * Candidat deleteMany
   */
  export type CandidatDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Candidats to delete
     */
    where?: CandidatWhereInput
  }


  /**
   * Candidat.entretiens
   */
  export type Candidat$entretiensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entretien
     */
    select?: EntretienSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EntretienInclude<ExtArgs> | null
    where?: EntretienWhereInput
    orderBy?: EntretienOrderByWithRelationInput | EntretienOrderByWithRelationInput[]
    cursor?: EntretienWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EntretienScalarFieldEnum | EntretienScalarFieldEnum[]
  }


  /**
   * Candidat.notes
   */
  export type Candidat$notesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NoteInclude<ExtArgs> | null
    where?: NoteWhereInput
    orderBy?: NoteOrderByWithRelationInput | NoteOrderByWithRelationInput[]
    cursor?: NoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NoteScalarFieldEnum | NoteScalarFieldEnum[]
  }


  /**
   * Candidat without action
   */
  export type CandidatDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidat
     */
    select?: CandidatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CandidatInclude<ExtArgs> | null
  }



  /**
   * Model Contrat
   */

  export type AggregateContrat = {
    _count: ContratCountAggregateOutputType | null
    _avg: ContratAvgAggregateOutputType | null
    _sum: ContratSumAggregateOutputType | null
    _min: ContratMinAggregateOutputType | null
    _max: ContratMaxAggregateOutputType | null
  }

  export type ContratAvgAggregateOutputType = {
    idContrat: number | null
    entrepriseId: number | null
    freelancerId: number | null
    coutContrat: number | null
  }

  export type ContratSumAggregateOutputType = {
    idContrat: number | null
    entrepriseId: number | null
    freelancerId: number | null
    coutContrat: number | null
  }

  export type ContratMinAggregateOutputType = {
    idContrat: number | null
    entrepriseId: number | null
    freelancerId: number | null
    titreProjContrat: string | null
    datDebConrat: Date | null
    datFinConrat: Date | null
    coutContrat: number | null
    descripContrat: string | null
    statutContrat: string | null
  }

  export type ContratMaxAggregateOutputType = {
    idContrat: number | null
    entrepriseId: number | null
    freelancerId: number | null
    titreProjContrat: string | null
    datDebConrat: Date | null
    datFinConrat: Date | null
    coutContrat: number | null
    descripContrat: string | null
    statutContrat: string | null
  }

  export type ContratCountAggregateOutputType = {
    idContrat: number
    entrepriseId: number
    freelancerId: number
    titreProjContrat: number
    datDebConrat: number
    datFinConrat: number
    coutContrat: number
    descripContrat: number
    statutContrat: number
    _all: number
  }


  export type ContratAvgAggregateInputType = {
    idContrat?: true
    entrepriseId?: true
    freelancerId?: true
    coutContrat?: true
  }

  export type ContratSumAggregateInputType = {
    idContrat?: true
    entrepriseId?: true
    freelancerId?: true
    coutContrat?: true
  }

  export type ContratMinAggregateInputType = {
    idContrat?: true
    entrepriseId?: true
    freelancerId?: true
    titreProjContrat?: true
    datDebConrat?: true
    datFinConrat?: true
    coutContrat?: true
    descripContrat?: true
    statutContrat?: true
  }

  export type ContratMaxAggregateInputType = {
    idContrat?: true
    entrepriseId?: true
    freelancerId?: true
    titreProjContrat?: true
    datDebConrat?: true
    datFinConrat?: true
    coutContrat?: true
    descripContrat?: true
    statutContrat?: true
  }

  export type ContratCountAggregateInputType = {
    idContrat?: true
    entrepriseId?: true
    freelancerId?: true
    titreProjContrat?: true
    datDebConrat?: true
    datFinConrat?: true
    coutContrat?: true
    descripContrat?: true
    statutContrat?: true
    _all?: true
  }

  export type ContratAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contrat to aggregate.
     */
    where?: ContratWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contrats to fetch.
     */
    orderBy?: ContratOrderByWithRelationInput | ContratOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContratWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contrats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contrats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Contrats
    **/
    _count?: true | ContratCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ContratAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ContratSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContratMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContratMaxAggregateInputType
  }

  export type GetContratAggregateType<T extends ContratAggregateArgs> = {
        [P in keyof T & keyof AggregateContrat]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContrat[P]>
      : GetScalarType<T[P], AggregateContrat[P]>
  }




  export type ContratGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContratWhereInput
    orderBy?: ContratOrderByWithAggregationInput | ContratOrderByWithAggregationInput[]
    by: ContratScalarFieldEnum[] | ContratScalarFieldEnum
    having?: ContratScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContratCountAggregateInputType | true
    _avg?: ContratAvgAggregateInputType
    _sum?: ContratSumAggregateInputType
    _min?: ContratMinAggregateInputType
    _max?: ContratMaxAggregateInputType
  }

  export type ContratGroupByOutputType = {
    idContrat: number
    entrepriseId: number
    freelancerId: number
    titreProjContrat: string
    datDebConrat: Date
    datFinConrat: Date
    coutContrat: number
    descripContrat: string
    statutContrat: string
    _count: ContratCountAggregateOutputType | null
    _avg: ContratAvgAggregateOutputType | null
    _sum: ContratSumAggregateOutputType | null
    _min: ContratMinAggregateOutputType | null
    _max: ContratMaxAggregateOutputType | null
  }

  type GetContratGroupByPayload<T extends ContratGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContratGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContratGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContratGroupByOutputType[P]>
            : GetScalarType<T[P], ContratGroupByOutputType[P]>
        }
      >
    >


  export type ContratSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idContrat?: boolean
    entrepriseId?: boolean
    freelancerId?: boolean
    titreProjContrat?: boolean
    datDebConrat?: boolean
    datFinConrat?: boolean
    coutContrat?: boolean
    descripContrat?: boolean
    statutContrat?: boolean
    entreprise?: boolean | EntrepriseDefaultArgs<ExtArgs>
    freelancer?: boolean | FreelancerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contrat"]>

  export type ContratSelectScalar = {
    idContrat?: boolean
    entrepriseId?: boolean
    freelancerId?: boolean
    titreProjContrat?: boolean
    datDebConrat?: boolean
    datFinConrat?: boolean
    coutContrat?: boolean
    descripContrat?: boolean
    statutContrat?: boolean
  }

  export type ContratInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    entreprise?: boolean | EntrepriseDefaultArgs<ExtArgs>
    freelancer?: boolean | FreelancerDefaultArgs<ExtArgs>
  }


  export type $ContratPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Contrat"
    objects: {
      entreprise: Prisma.$EntreprisePayload<ExtArgs>
      freelancer: Prisma.$FreelancerPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      idContrat: number
      entrepriseId: number
      freelancerId: number
      titreProjContrat: string
      datDebConrat: Date
      datFinConrat: Date
      coutContrat: number
      descripContrat: string
      statutContrat: string
    }, ExtArgs["result"]["contrat"]>
    composites: {}
  }


  type ContratGetPayload<S extends boolean | null | undefined | ContratDefaultArgs> = $Result.GetResult<Prisma.$ContratPayload, S>

  type ContratCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ContratFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: ContratCountAggregateInputType | true
    }

  export interface ContratDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Contrat'], meta: { name: 'Contrat' } }
    /**
     * Find zero or one Contrat that matches the filter.
     * @param {ContratFindUniqueArgs} args - Arguments to find a Contrat
     * @example
     * // Get one Contrat
     * const contrat = await prisma.contrat.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ContratFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ContratFindUniqueArgs<ExtArgs>>
    ): Prisma__ContratClient<$Result.GetResult<Prisma.$ContratPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Contrat that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ContratFindUniqueOrThrowArgs} args - Arguments to find a Contrat
     * @example
     * // Get one Contrat
     * const contrat = await prisma.contrat.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ContratFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ContratFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ContratClient<$Result.GetResult<Prisma.$ContratPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Contrat that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContratFindFirstArgs} args - Arguments to find a Contrat
     * @example
     * // Get one Contrat
     * const contrat = await prisma.contrat.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ContratFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ContratFindFirstArgs<ExtArgs>>
    ): Prisma__ContratClient<$Result.GetResult<Prisma.$ContratPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Contrat that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContratFindFirstOrThrowArgs} args - Arguments to find a Contrat
     * @example
     * // Get one Contrat
     * const contrat = await prisma.contrat.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ContratFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ContratFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ContratClient<$Result.GetResult<Prisma.$ContratPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Contrats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContratFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Contrats
     * const contrats = await prisma.contrat.findMany()
     * 
     * // Get first 10 Contrats
     * const contrats = await prisma.contrat.findMany({ take: 10 })
     * 
     * // Only select the `idContrat`
     * const contratWithIdContratOnly = await prisma.contrat.findMany({ select: { idContrat: true } })
     * 
    **/
    findMany<T extends ContratFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ContratFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContratPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Contrat.
     * @param {ContratCreateArgs} args - Arguments to create a Contrat.
     * @example
     * // Create one Contrat
     * const Contrat = await prisma.contrat.create({
     *   data: {
     *     // ... data to create a Contrat
     *   }
     * })
     * 
    **/
    create<T extends ContratCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ContratCreateArgs<ExtArgs>>
    ): Prisma__ContratClient<$Result.GetResult<Prisma.$ContratPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Contrats.
     *     @param {ContratCreateManyArgs} args - Arguments to create many Contrats.
     *     @example
     *     // Create many Contrats
     *     const contrat = await prisma.contrat.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ContratCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ContratCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Contrat.
     * @param {ContratDeleteArgs} args - Arguments to delete one Contrat.
     * @example
     * // Delete one Contrat
     * const Contrat = await prisma.contrat.delete({
     *   where: {
     *     // ... filter to delete one Contrat
     *   }
     * })
     * 
    **/
    delete<T extends ContratDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ContratDeleteArgs<ExtArgs>>
    ): Prisma__ContratClient<$Result.GetResult<Prisma.$ContratPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Contrat.
     * @param {ContratUpdateArgs} args - Arguments to update one Contrat.
     * @example
     * // Update one Contrat
     * const contrat = await prisma.contrat.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ContratUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ContratUpdateArgs<ExtArgs>>
    ): Prisma__ContratClient<$Result.GetResult<Prisma.$ContratPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Contrats.
     * @param {ContratDeleteManyArgs} args - Arguments to filter Contrats to delete.
     * @example
     * // Delete a few Contrats
     * const { count } = await prisma.contrat.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ContratDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ContratDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contrats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContratUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Contrats
     * const contrat = await prisma.contrat.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ContratUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ContratUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Contrat.
     * @param {ContratUpsertArgs} args - Arguments to update or create a Contrat.
     * @example
     * // Update or create a Contrat
     * const contrat = await prisma.contrat.upsert({
     *   create: {
     *     // ... data to create a Contrat
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Contrat we want to update
     *   }
     * })
    **/
    upsert<T extends ContratUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ContratUpsertArgs<ExtArgs>>
    ): Prisma__ContratClient<$Result.GetResult<Prisma.$ContratPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Contrats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContratCountArgs} args - Arguments to filter Contrats to count.
     * @example
     * // Count the number of Contrats
     * const count = await prisma.contrat.count({
     *   where: {
     *     // ... the filter for the Contrats we want to count
     *   }
     * })
    **/
    count<T extends ContratCountArgs>(
      args?: Subset<T, ContratCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContratCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Contrat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContratAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContratAggregateArgs>(args: Subset<T, ContratAggregateArgs>): Prisma.PrismaPromise<GetContratAggregateType<T>>

    /**
     * Group by Contrat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContratGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContratGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContratGroupByArgs['orderBy'] }
        : { orderBy?: ContratGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContratGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContratGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Contrat model
   */
  readonly fields: ContratFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Contrat.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContratClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    entreprise<T extends EntrepriseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EntrepriseDefaultArgs<ExtArgs>>): Prisma__EntrepriseClient<$Result.GetResult<Prisma.$EntreprisePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    freelancer<T extends FreelancerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FreelancerDefaultArgs<ExtArgs>>): Prisma__FreelancerClient<$Result.GetResult<Prisma.$FreelancerPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Contrat model
   */ 
  interface ContratFieldRefs {
    readonly idContrat: FieldRef<"Contrat", 'Int'>
    readonly entrepriseId: FieldRef<"Contrat", 'Int'>
    readonly freelancerId: FieldRef<"Contrat", 'Int'>
    readonly titreProjContrat: FieldRef<"Contrat", 'String'>
    readonly datDebConrat: FieldRef<"Contrat", 'DateTime'>
    readonly datFinConrat: FieldRef<"Contrat", 'DateTime'>
    readonly coutContrat: FieldRef<"Contrat", 'Int'>
    readonly descripContrat: FieldRef<"Contrat", 'String'>
    readonly statutContrat: FieldRef<"Contrat", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Contrat findUnique
   */
  export type ContratFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contrat
     */
    select?: ContratSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContratInclude<ExtArgs> | null
    /**
     * Filter, which Contrat to fetch.
     */
    where: ContratWhereUniqueInput
  }


  /**
   * Contrat findUniqueOrThrow
   */
  export type ContratFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contrat
     */
    select?: ContratSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContratInclude<ExtArgs> | null
    /**
     * Filter, which Contrat to fetch.
     */
    where: ContratWhereUniqueInput
  }


  /**
   * Contrat findFirst
   */
  export type ContratFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contrat
     */
    select?: ContratSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContratInclude<ExtArgs> | null
    /**
     * Filter, which Contrat to fetch.
     */
    where?: ContratWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contrats to fetch.
     */
    orderBy?: ContratOrderByWithRelationInput | ContratOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contrats.
     */
    cursor?: ContratWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contrats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contrats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contrats.
     */
    distinct?: ContratScalarFieldEnum | ContratScalarFieldEnum[]
  }


  /**
   * Contrat findFirstOrThrow
   */
  export type ContratFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contrat
     */
    select?: ContratSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContratInclude<ExtArgs> | null
    /**
     * Filter, which Contrat to fetch.
     */
    where?: ContratWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contrats to fetch.
     */
    orderBy?: ContratOrderByWithRelationInput | ContratOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contrats.
     */
    cursor?: ContratWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contrats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contrats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contrats.
     */
    distinct?: ContratScalarFieldEnum | ContratScalarFieldEnum[]
  }


  /**
   * Contrat findMany
   */
  export type ContratFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contrat
     */
    select?: ContratSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContratInclude<ExtArgs> | null
    /**
     * Filter, which Contrats to fetch.
     */
    where?: ContratWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contrats to fetch.
     */
    orderBy?: ContratOrderByWithRelationInput | ContratOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Contrats.
     */
    cursor?: ContratWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contrats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contrats.
     */
    skip?: number
    distinct?: ContratScalarFieldEnum | ContratScalarFieldEnum[]
  }


  /**
   * Contrat create
   */
  export type ContratCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contrat
     */
    select?: ContratSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContratInclude<ExtArgs> | null
    /**
     * The data needed to create a Contrat.
     */
    data: XOR<ContratCreateInput, ContratUncheckedCreateInput>
  }


  /**
   * Contrat createMany
   */
  export type ContratCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Contrats.
     */
    data: ContratCreateManyInput | ContratCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Contrat update
   */
  export type ContratUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contrat
     */
    select?: ContratSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContratInclude<ExtArgs> | null
    /**
     * The data needed to update a Contrat.
     */
    data: XOR<ContratUpdateInput, ContratUncheckedUpdateInput>
    /**
     * Choose, which Contrat to update.
     */
    where: ContratWhereUniqueInput
  }


  /**
   * Contrat updateMany
   */
  export type ContratUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Contrats.
     */
    data: XOR<ContratUpdateManyMutationInput, ContratUncheckedUpdateManyInput>
    /**
     * Filter which Contrats to update
     */
    where?: ContratWhereInput
  }


  /**
   * Contrat upsert
   */
  export type ContratUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contrat
     */
    select?: ContratSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContratInclude<ExtArgs> | null
    /**
     * The filter to search for the Contrat to update in case it exists.
     */
    where: ContratWhereUniqueInput
    /**
     * In case the Contrat found by the `where` argument doesn't exist, create a new Contrat with this data.
     */
    create: XOR<ContratCreateInput, ContratUncheckedCreateInput>
    /**
     * In case the Contrat was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContratUpdateInput, ContratUncheckedUpdateInput>
  }


  /**
   * Contrat delete
   */
  export type ContratDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contrat
     */
    select?: ContratSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContratInclude<ExtArgs> | null
    /**
     * Filter which Contrat to delete.
     */
    where: ContratWhereUniqueInput
  }


  /**
   * Contrat deleteMany
   */
  export type ContratDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contrats to delete
     */
    where?: ContratWhereInput
  }


  /**
   * Contrat without action
   */
  export type ContratDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contrat
     */
    select?: ContratSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContratInclude<ExtArgs> | null
  }



  /**
   * Model Entreprise
   */

  export type AggregateEntreprise = {
    _count: EntrepriseCountAggregateOutputType | null
    _avg: EntrepriseAvgAggregateOutputType | null
    _sum: EntrepriseSumAggregateOutputType | null
    _min: EntrepriseMinAggregateOutputType | null
    _max: EntrepriseMaxAggregateOutputType | null
  }

  export type EntrepriseAvgAggregateOutputType = {
    idEntreprise: number | null
    userId: number | null
  }

  export type EntrepriseSumAggregateOutputType = {
    idEntreprise: number | null
    userId: number | null
  }

  export type EntrepriseMinAggregateOutputType = {
    idEntreprise: number | null
    nomEntreprise: string | null
    adresEntreprise: string | null
    contactEntreprise: string | null
    sectActivEntreprise: string | null
    tailleEntreprise: string | null
    logoEntreprise: string | null
    descripEntreprise: string | null
    siteWebEntreprise: string | null
    userId: number | null
  }

  export type EntrepriseMaxAggregateOutputType = {
    idEntreprise: number | null
    nomEntreprise: string | null
    adresEntreprise: string | null
    contactEntreprise: string | null
    sectActivEntreprise: string | null
    tailleEntreprise: string | null
    logoEntreprise: string | null
    descripEntreprise: string | null
    siteWebEntreprise: string | null
    userId: number | null
  }

  export type EntrepriseCountAggregateOutputType = {
    idEntreprise: number
    nomEntreprise: number
    adresEntreprise: number
    contactEntreprise: number
    sectActivEntreprise: number
    tailleEntreprise: number
    logoEntreprise: number
    descripEntreprise: number
    siteWebEntreprise: number
    userId: number
    _all: number
  }


  export type EntrepriseAvgAggregateInputType = {
    idEntreprise?: true
    userId?: true
  }

  export type EntrepriseSumAggregateInputType = {
    idEntreprise?: true
    userId?: true
  }

  export type EntrepriseMinAggregateInputType = {
    idEntreprise?: true
    nomEntreprise?: true
    adresEntreprise?: true
    contactEntreprise?: true
    sectActivEntreprise?: true
    tailleEntreprise?: true
    logoEntreprise?: true
    descripEntreprise?: true
    siteWebEntreprise?: true
    userId?: true
  }

  export type EntrepriseMaxAggregateInputType = {
    idEntreprise?: true
    nomEntreprise?: true
    adresEntreprise?: true
    contactEntreprise?: true
    sectActivEntreprise?: true
    tailleEntreprise?: true
    logoEntreprise?: true
    descripEntreprise?: true
    siteWebEntreprise?: true
    userId?: true
  }

  export type EntrepriseCountAggregateInputType = {
    idEntreprise?: true
    nomEntreprise?: true
    adresEntreprise?: true
    contactEntreprise?: true
    sectActivEntreprise?: true
    tailleEntreprise?: true
    logoEntreprise?: true
    descripEntreprise?: true
    siteWebEntreprise?: true
    userId?: true
    _all?: true
  }

  export type EntrepriseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Entreprise to aggregate.
     */
    where?: EntrepriseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Entreprises to fetch.
     */
    orderBy?: EntrepriseOrderByWithRelationInput | EntrepriseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EntrepriseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Entreprises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Entreprises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Entreprises
    **/
    _count?: true | EntrepriseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EntrepriseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EntrepriseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EntrepriseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EntrepriseMaxAggregateInputType
  }

  export type GetEntrepriseAggregateType<T extends EntrepriseAggregateArgs> = {
        [P in keyof T & keyof AggregateEntreprise]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEntreprise[P]>
      : GetScalarType<T[P], AggregateEntreprise[P]>
  }




  export type EntrepriseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EntrepriseWhereInput
    orderBy?: EntrepriseOrderByWithAggregationInput | EntrepriseOrderByWithAggregationInput[]
    by: EntrepriseScalarFieldEnum[] | EntrepriseScalarFieldEnum
    having?: EntrepriseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EntrepriseCountAggregateInputType | true
    _avg?: EntrepriseAvgAggregateInputType
    _sum?: EntrepriseSumAggregateInputType
    _min?: EntrepriseMinAggregateInputType
    _max?: EntrepriseMaxAggregateInputType
  }

  export type EntrepriseGroupByOutputType = {
    idEntreprise: number
    nomEntreprise: string | null
    adresEntreprise: string | null
    contactEntreprise: string | null
    sectActivEntreprise: string | null
    tailleEntreprise: string | null
    logoEntreprise: string | null
    descripEntreprise: string | null
    siteWebEntreprise: string | null
    userId: number
    _count: EntrepriseCountAggregateOutputType | null
    _avg: EntrepriseAvgAggregateOutputType | null
    _sum: EntrepriseSumAggregateOutputType | null
    _min: EntrepriseMinAggregateOutputType | null
    _max: EntrepriseMaxAggregateOutputType | null
  }

  type GetEntrepriseGroupByPayload<T extends EntrepriseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EntrepriseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EntrepriseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EntrepriseGroupByOutputType[P]>
            : GetScalarType<T[P], EntrepriseGroupByOutputType[P]>
        }
      >
    >


  export type EntrepriseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idEntreprise?: boolean
    nomEntreprise?: boolean
    adresEntreprise?: boolean
    contactEntreprise?: boolean
    sectActivEntreprise?: boolean
    tailleEntreprise?: boolean
    logoEntreprise?: boolean
    descripEntreprise?: boolean
    siteWebEntreprise?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    offreEmplois?: boolean | Entreprise$offreEmploisArgs<ExtArgs>
    entretiens?: boolean | Entreprise$entretiensArgs<ExtArgs>
    contrats?: boolean | Entreprise$contratsArgs<ExtArgs>
    projets?: boolean | Entreprise$projetsArgs<ExtArgs>
    notes?: boolean | Entreprise$notesArgs<ExtArgs>
    _count?: boolean | EntrepriseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["entreprise"]>

  export type EntrepriseSelectScalar = {
    idEntreprise?: boolean
    nomEntreprise?: boolean
    adresEntreprise?: boolean
    contactEntreprise?: boolean
    sectActivEntreprise?: boolean
    tailleEntreprise?: boolean
    logoEntreprise?: boolean
    descripEntreprise?: boolean
    siteWebEntreprise?: boolean
    userId?: boolean
  }

  export type EntrepriseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    offreEmplois?: boolean | Entreprise$offreEmploisArgs<ExtArgs>
    entretiens?: boolean | Entreprise$entretiensArgs<ExtArgs>
    contrats?: boolean | Entreprise$contratsArgs<ExtArgs>
    projets?: boolean | Entreprise$projetsArgs<ExtArgs>
    notes?: boolean | Entreprise$notesArgs<ExtArgs>
    _count?: boolean | EntrepriseCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $EntreprisePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Entreprise"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      offreEmplois: Prisma.$OffreEmploiPayload<ExtArgs>[]
      entretiens: Prisma.$EntretienPayload<ExtArgs>[]
      contrats: Prisma.$ContratPayload<ExtArgs>[]
      projets: Prisma.$ProjetPayload<ExtArgs>[]
      notes: Prisma.$NotePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      idEntreprise: number
      nomEntreprise: string | null
      adresEntreprise: string | null
      contactEntreprise: string | null
      sectActivEntreprise: string | null
      tailleEntreprise: string | null
      logoEntreprise: string | null
      descripEntreprise: string | null
      siteWebEntreprise: string | null
      userId: number
    }, ExtArgs["result"]["entreprise"]>
    composites: {}
  }


  type EntrepriseGetPayload<S extends boolean | null | undefined | EntrepriseDefaultArgs> = $Result.GetResult<Prisma.$EntreprisePayload, S>

  type EntrepriseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EntrepriseFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: EntrepriseCountAggregateInputType | true
    }

  export interface EntrepriseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Entreprise'], meta: { name: 'Entreprise' } }
    /**
     * Find zero or one Entreprise that matches the filter.
     * @param {EntrepriseFindUniqueArgs} args - Arguments to find a Entreprise
     * @example
     * // Get one Entreprise
     * const entreprise = await prisma.entreprise.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EntrepriseFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, EntrepriseFindUniqueArgs<ExtArgs>>
    ): Prisma__EntrepriseClient<$Result.GetResult<Prisma.$EntreprisePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Entreprise that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {EntrepriseFindUniqueOrThrowArgs} args - Arguments to find a Entreprise
     * @example
     * // Get one Entreprise
     * const entreprise = await prisma.entreprise.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EntrepriseFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EntrepriseFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__EntrepriseClient<$Result.GetResult<Prisma.$EntreprisePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Entreprise that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntrepriseFindFirstArgs} args - Arguments to find a Entreprise
     * @example
     * // Get one Entreprise
     * const entreprise = await prisma.entreprise.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EntrepriseFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, EntrepriseFindFirstArgs<ExtArgs>>
    ): Prisma__EntrepriseClient<$Result.GetResult<Prisma.$EntreprisePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Entreprise that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntrepriseFindFirstOrThrowArgs} args - Arguments to find a Entreprise
     * @example
     * // Get one Entreprise
     * const entreprise = await prisma.entreprise.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EntrepriseFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EntrepriseFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__EntrepriseClient<$Result.GetResult<Prisma.$EntreprisePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Entreprises that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntrepriseFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Entreprises
     * const entreprises = await prisma.entreprise.findMany()
     * 
     * // Get first 10 Entreprises
     * const entreprises = await prisma.entreprise.findMany({ take: 10 })
     * 
     * // Only select the `idEntreprise`
     * const entrepriseWithIdEntrepriseOnly = await prisma.entreprise.findMany({ select: { idEntreprise: true } })
     * 
    **/
    findMany<T extends EntrepriseFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EntrepriseFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EntreprisePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Entreprise.
     * @param {EntrepriseCreateArgs} args - Arguments to create a Entreprise.
     * @example
     * // Create one Entreprise
     * const Entreprise = await prisma.entreprise.create({
     *   data: {
     *     // ... data to create a Entreprise
     *   }
     * })
     * 
    **/
    create<T extends EntrepriseCreateArgs<ExtArgs>>(
      args: SelectSubset<T, EntrepriseCreateArgs<ExtArgs>>
    ): Prisma__EntrepriseClient<$Result.GetResult<Prisma.$EntreprisePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Entreprises.
     *     @param {EntrepriseCreateManyArgs} args - Arguments to create many Entreprises.
     *     @example
     *     // Create many Entreprises
     *     const entreprise = await prisma.entreprise.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends EntrepriseCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EntrepriseCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Entreprise.
     * @param {EntrepriseDeleteArgs} args - Arguments to delete one Entreprise.
     * @example
     * // Delete one Entreprise
     * const Entreprise = await prisma.entreprise.delete({
     *   where: {
     *     // ... filter to delete one Entreprise
     *   }
     * })
     * 
    **/
    delete<T extends EntrepriseDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, EntrepriseDeleteArgs<ExtArgs>>
    ): Prisma__EntrepriseClient<$Result.GetResult<Prisma.$EntreprisePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Entreprise.
     * @param {EntrepriseUpdateArgs} args - Arguments to update one Entreprise.
     * @example
     * // Update one Entreprise
     * const entreprise = await prisma.entreprise.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EntrepriseUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, EntrepriseUpdateArgs<ExtArgs>>
    ): Prisma__EntrepriseClient<$Result.GetResult<Prisma.$EntreprisePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Entreprises.
     * @param {EntrepriseDeleteManyArgs} args - Arguments to filter Entreprises to delete.
     * @example
     * // Delete a few Entreprises
     * const { count } = await prisma.entreprise.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EntrepriseDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EntrepriseDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Entreprises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntrepriseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Entreprises
     * const entreprise = await prisma.entreprise.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EntrepriseUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, EntrepriseUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Entreprise.
     * @param {EntrepriseUpsertArgs} args - Arguments to update or create a Entreprise.
     * @example
     * // Update or create a Entreprise
     * const entreprise = await prisma.entreprise.upsert({
     *   create: {
     *     // ... data to create a Entreprise
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Entreprise we want to update
     *   }
     * })
    **/
    upsert<T extends EntrepriseUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, EntrepriseUpsertArgs<ExtArgs>>
    ): Prisma__EntrepriseClient<$Result.GetResult<Prisma.$EntreprisePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Entreprises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntrepriseCountArgs} args - Arguments to filter Entreprises to count.
     * @example
     * // Count the number of Entreprises
     * const count = await prisma.entreprise.count({
     *   where: {
     *     // ... the filter for the Entreprises we want to count
     *   }
     * })
    **/
    count<T extends EntrepriseCountArgs>(
      args?: Subset<T, EntrepriseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EntrepriseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Entreprise.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntrepriseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EntrepriseAggregateArgs>(args: Subset<T, EntrepriseAggregateArgs>): Prisma.PrismaPromise<GetEntrepriseAggregateType<T>>

    /**
     * Group by Entreprise.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntrepriseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EntrepriseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EntrepriseGroupByArgs['orderBy'] }
        : { orderBy?: EntrepriseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EntrepriseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEntrepriseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Entreprise model
   */
  readonly fields: EntrepriseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Entreprise.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EntrepriseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    offreEmplois<T extends Entreprise$offreEmploisArgs<ExtArgs> = {}>(args?: Subset<T, Entreprise$offreEmploisArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OffreEmploiPayload<ExtArgs>, T, 'findMany'> | Null>;

    entretiens<T extends Entreprise$entretiensArgs<ExtArgs> = {}>(args?: Subset<T, Entreprise$entretiensArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EntretienPayload<ExtArgs>, T, 'findMany'> | Null>;

    contrats<T extends Entreprise$contratsArgs<ExtArgs> = {}>(args?: Subset<T, Entreprise$contratsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContratPayload<ExtArgs>, T, 'findMany'> | Null>;

    projets<T extends Entreprise$projetsArgs<ExtArgs> = {}>(args?: Subset<T, Entreprise$projetsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjetPayload<ExtArgs>, T, 'findMany'> | Null>;

    notes<T extends Entreprise$notesArgs<ExtArgs> = {}>(args?: Subset<T, Entreprise$notesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Entreprise model
   */ 
  interface EntrepriseFieldRefs {
    readonly idEntreprise: FieldRef<"Entreprise", 'Int'>
    readonly nomEntreprise: FieldRef<"Entreprise", 'String'>
    readonly adresEntreprise: FieldRef<"Entreprise", 'String'>
    readonly contactEntreprise: FieldRef<"Entreprise", 'String'>
    readonly sectActivEntreprise: FieldRef<"Entreprise", 'String'>
    readonly tailleEntreprise: FieldRef<"Entreprise", 'String'>
    readonly logoEntreprise: FieldRef<"Entreprise", 'String'>
    readonly descripEntreprise: FieldRef<"Entreprise", 'String'>
    readonly siteWebEntreprise: FieldRef<"Entreprise", 'String'>
    readonly userId: FieldRef<"Entreprise", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Entreprise findUnique
   */
  export type EntrepriseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entreprise
     */
    select?: EntrepriseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EntrepriseInclude<ExtArgs> | null
    /**
     * Filter, which Entreprise to fetch.
     */
    where: EntrepriseWhereUniqueInput
  }


  /**
   * Entreprise findUniqueOrThrow
   */
  export type EntrepriseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entreprise
     */
    select?: EntrepriseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EntrepriseInclude<ExtArgs> | null
    /**
     * Filter, which Entreprise to fetch.
     */
    where: EntrepriseWhereUniqueInput
  }


  /**
   * Entreprise findFirst
   */
  export type EntrepriseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entreprise
     */
    select?: EntrepriseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EntrepriseInclude<ExtArgs> | null
    /**
     * Filter, which Entreprise to fetch.
     */
    where?: EntrepriseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Entreprises to fetch.
     */
    orderBy?: EntrepriseOrderByWithRelationInput | EntrepriseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Entreprises.
     */
    cursor?: EntrepriseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Entreprises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Entreprises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Entreprises.
     */
    distinct?: EntrepriseScalarFieldEnum | EntrepriseScalarFieldEnum[]
  }


  /**
   * Entreprise findFirstOrThrow
   */
  export type EntrepriseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entreprise
     */
    select?: EntrepriseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EntrepriseInclude<ExtArgs> | null
    /**
     * Filter, which Entreprise to fetch.
     */
    where?: EntrepriseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Entreprises to fetch.
     */
    orderBy?: EntrepriseOrderByWithRelationInput | EntrepriseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Entreprises.
     */
    cursor?: EntrepriseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Entreprises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Entreprises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Entreprises.
     */
    distinct?: EntrepriseScalarFieldEnum | EntrepriseScalarFieldEnum[]
  }


  /**
   * Entreprise findMany
   */
  export type EntrepriseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entreprise
     */
    select?: EntrepriseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EntrepriseInclude<ExtArgs> | null
    /**
     * Filter, which Entreprises to fetch.
     */
    where?: EntrepriseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Entreprises to fetch.
     */
    orderBy?: EntrepriseOrderByWithRelationInput | EntrepriseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Entreprises.
     */
    cursor?: EntrepriseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Entreprises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Entreprises.
     */
    skip?: number
    distinct?: EntrepriseScalarFieldEnum | EntrepriseScalarFieldEnum[]
  }


  /**
   * Entreprise create
   */
  export type EntrepriseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entreprise
     */
    select?: EntrepriseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EntrepriseInclude<ExtArgs> | null
    /**
     * The data needed to create a Entreprise.
     */
    data: XOR<EntrepriseCreateInput, EntrepriseUncheckedCreateInput>
  }


  /**
   * Entreprise createMany
   */
  export type EntrepriseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Entreprises.
     */
    data: EntrepriseCreateManyInput | EntrepriseCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Entreprise update
   */
  export type EntrepriseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entreprise
     */
    select?: EntrepriseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EntrepriseInclude<ExtArgs> | null
    /**
     * The data needed to update a Entreprise.
     */
    data: XOR<EntrepriseUpdateInput, EntrepriseUncheckedUpdateInput>
    /**
     * Choose, which Entreprise to update.
     */
    where: EntrepriseWhereUniqueInput
  }


  /**
   * Entreprise updateMany
   */
  export type EntrepriseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Entreprises.
     */
    data: XOR<EntrepriseUpdateManyMutationInput, EntrepriseUncheckedUpdateManyInput>
    /**
     * Filter which Entreprises to update
     */
    where?: EntrepriseWhereInput
  }


  /**
   * Entreprise upsert
   */
  export type EntrepriseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entreprise
     */
    select?: EntrepriseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EntrepriseInclude<ExtArgs> | null
    /**
     * The filter to search for the Entreprise to update in case it exists.
     */
    where: EntrepriseWhereUniqueInput
    /**
     * In case the Entreprise found by the `where` argument doesn't exist, create a new Entreprise with this data.
     */
    create: XOR<EntrepriseCreateInput, EntrepriseUncheckedCreateInput>
    /**
     * In case the Entreprise was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EntrepriseUpdateInput, EntrepriseUncheckedUpdateInput>
  }


  /**
   * Entreprise delete
   */
  export type EntrepriseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entreprise
     */
    select?: EntrepriseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EntrepriseInclude<ExtArgs> | null
    /**
     * Filter which Entreprise to delete.
     */
    where: EntrepriseWhereUniqueInput
  }


  /**
   * Entreprise deleteMany
   */
  export type EntrepriseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Entreprises to delete
     */
    where?: EntrepriseWhereInput
  }


  /**
   * Entreprise.offreEmplois
   */
  export type Entreprise$offreEmploisArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OffreEmploi
     */
    select?: OffreEmploiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OffreEmploiInclude<ExtArgs> | null
    where?: OffreEmploiWhereInput
    orderBy?: OffreEmploiOrderByWithRelationInput | OffreEmploiOrderByWithRelationInput[]
    cursor?: OffreEmploiWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OffreEmploiScalarFieldEnum | OffreEmploiScalarFieldEnum[]
  }


  /**
   * Entreprise.entretiens
   */
  export type Entreprise$entretiensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entretien
     */
    select?: EntretienSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EntretienInclude<ExtArgs> | null
    where?: EntretienWhereInput
    orderBy?: EntretienOrderByWithRelationInput | EntretienOrderByWithRelationInput[]
    cursor?: EntretienWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EntretienScalarFieldEnum | EntretienScalarFieldEnum[]
  }


  /**
   * Entreprise.contrats
   */
  export type Entreprise$contratsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contrat
     */
    select?: ContratSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContratInclude<ExtArgs> | null
    where?: ContratWhereInput
    orderBy?: ContratOrderByWithRelationInput | ContratOrderByWithRelationInput[]
    cursor?: ContratWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContratScalarFieldEnum | ContratScalarFieldEnum[]
  }


  /**
   * Entreprise.projets
   */
  export type Entreprise$projetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projet
     */
    select?: ProjetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjetInclude<ExtArgs> | null
    where?: ProjetWhereInput
    orderBy?: ProjetOrderByWithRelationInput | ProjetOrderByWithRelationInput[]
    cursor?: ProjetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjetScalarFieldEnum | ProjetScalarFieldEnum[]
  }


  /**
   * Entreprise.notes
   */
  export type Entreprise$notesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NoteInclude<ExtArgs> | null
    where?: NoteWhereInput
    orderBy?: NoteOrderByWithRelationInput | NoteOrderByWithRelationInput[]
    cursor?: NoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NoteScalarFieldEnum | NoteScalarFieldEnum[]
  }


  /**
   * Entreprise without action
   */
  export type EntrepriseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entreprise
     */
    select?: EntrepriseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EntrepriseInclude<ExtArgs> | null
  }



  /**
   * Model Entretien
   */

  export type AggregateEntretien = {
    _count: EntretienCountAggregateOutputType | null
    _avg: EntretienAvgAggregateOutputType | null
    _sum: EntretienSumAggregateOutputType | null
    _min: EntretienMinAggregateOutputType | null
    _max: EntretienMaxAggregateOutputType | null
  }

  export type EntretienAvgAggregateOutputType = {
    idEntretien: number | null
    entrepriseId: number | null
    candidatId: number | null
  }

  export type EntretienSumAggregateOutputType = {
    idEntretien: number | null
    entrepriseId: number | null
    candidatId: number | null
  }

  export type EntretienMinAggregateOutputType = {
    idEntretien: number | null
    entrepriseId: number | null
    candidatId: number | null
    dateEntretien: Date | null
    adresEntretien: string | null
    recruEntretien: string | null
    typeEntretien: string | null
    descripEntreprise: string | null
  }

  export type EntretienMaxAggregateOutputType = {
    idEntretien: number | null
    entrepriseId: number | null
    candidatId: number | null
    dateEntretien: Date | null
    adresEntretien: string | null
    recruEntretien: string | null
    typeEntretien: string | null
    descripEntreprise: string | null
  }

  export type EntretienCountAggregateOutputType = {
    idEntretien: number
    entrepriseId: number
    candidatId: number
    dateEntretien: number
    adresEntretien: number
    recruEntretien: number
    typeEntretien: number
    descripEntreprise: number
    _all: number
  }


  export type EntretienAvgAggregateInputType = {
    idEntretien?: true
    entrepriseId?: true
    candidatId?: true
  }

  export type EntretienSumAggregateInputType = {
    idEntretien?: true
    entrepriseId?: true
    candidatId?: true
  }

  export type EntretienMinAggregateInputType = {
    idEntretien?: true
    entrepriseId?: true
    candidatId?: true
    dateEntretien?: true
    adresEntretien?: true
    recruEntretien?: true
    typeEntretien?: true
    descripEntreprise?: true
  }

  export type EntretienMaxAggregateInputType = {
    idEntretien?: true
    entrepriseId?: true
    candidatId?: true
    dateEntretien?: true
    adresEntretien?: true
    recruEntretien?: true
    typeEntretien?: true
    descripEntreprise?: true
  }

  export type EntretienCountAggregateInputType = {
    idEntretien?: true
    entrepriseId?: true
    candidatId?: true
    dateEntretien?: true
    adresEntretien?: true
    recruEntretien?: true
    typeEntretien?: true
    descripEntreprise?: true
    _all?: true
  }

  export type EntretienAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Entretien to aggregate.
     */
    where?: EntretienWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Entretiens to fetch.
     */
    orderBy?: EntretienOrderByWithRelationInput | EntretienOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EntretienWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Entretiens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Entretiens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Entretiens
    **/
    _count?: true | EntretienCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EntretienAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EntretienSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EntretienMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EntretienMaxAggregateInputType
  }

  export type GetEntretienAggregateType<T extends EntretienAggregateArgs> = {
        [P in keyof T & keyof AggregateEntretien]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEntretien[P]>
      : GetScalarType<T[P], AggregateEntretien[P]>
  }




  export type EntretienGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EntretienWhereInput
    orderBy?: EntretienOrderByWithAggregationInput | EntretienOrderByWithAggregationInput[]
    by: EntretienScalarFieldEnum[] | EntretienScalarFieldEnum
    having?: EntretienScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EntretienCountAggregateInputType | true
    _avg?: EntretienAvgAggregateInputType
    _sum?: EntretienSumAggregateInputType
    _min?: EntretienMinAggregateInputType
    _max?: EntretienMaxAggregateInputType
  }

  export type EntretienGroupByOutputType = {
    idEntretien: number
    entrepriseId: number
    candidatId: number
    dateEntretien: Date
    adresEntretien: string
    recruEntretien: string
    typeEntretien: string
    descripEntreprise: string
    _count: EntretienCountAggregateOutputType | null
    _avg: EntretienAvgAggregateOutputType | null
    _sum: EntretienSumAggregateOutputType | null
    _min: EntretienMinAggregateOutputType | null
    _max: EntretienMaxAggregateOutputType | null
  }

  type GetEntretienGroupByPayload<T extends EntretienGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EntretienGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EntretienGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EntretienGroupByOutputType[P]>
            : GetScalarType<T[P], EntretienGroupByOutputType[P]>
        }
      >
    >


  export type EntretienSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idEntretien?: boolean
    entrepriseId?: boolean
    candidatId?: boolean
    dateEntretien?: boolean
    adresEntretien?: boolean
    recruEntretien?: boolean
    typeEntretien?: boolean
    descripEntreprise?: boolean
    entreprise?: boolean | EntrepriseDefaultArgs<ExtArgs>
    candidat?: boolean | CandidatDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["entretien"]>

  export type EntretienSelectScalar = {
    idEntretien?: boolean
    entrepriseId?: boolean
    candidatId?: boolean
    dateEntretien?: boolean
    adresEntretien?: boolean
    recruEntretien?: boolean
    typeEntretien?: boolean
    descripEntreprise?: boolean
  }

  export type EntretienInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    entreprise?: boolean | EntrepriseDefaultArgs<ExtArgs>
    candidat?: boolean | CandidatDefaultArgs<ExtArgs>
  }


  export type $EntretienPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Entretien"
    objects: {
      entreprise: Prisma.$EntreprisePayload<ExtArgs>
      candidat: Prisma.$CandidatPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      idEntretien: number
      entrepriseId: number
      candidatId: number
      dateEntretien: Date
      adresEntretien: string
      recruEntretien: string
      typeEntretien: string
      descripEntreprise: string
    }, ExtArgs["result"]["entretien"]>
    composites: {}
  }


  type EntretienGetPayload<S extends boolean | null | undefined | EntretienDefaultArgs> = $Result.GetResult<Prisma.$EntretienPayload, S>

  type EntretienCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EntretienFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: EntretienCountAggregateInputType | true
    }

  export interface EntretienDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Entretien'], meta: { name: 'Entretien' } }
    /**
     * Find zero or one Entretien that matches the filter.
     * @param {EntretienFindUniqueArgs} args - Arguments to find a Entretien
     * @example
     * // Get one Entretien
     * const entretien = await prisma.entretien.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EntretienFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, EntretienFindUniqueArgs<ExtArgs>>
    ): Prisma__EntretienClient<$Result.GetResult<Prisma.$EntretienPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Entretien that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {EntretienFindUniqueOrThrowArgs} args - Arguments to find a Entretien
     * @example
     * // Get one Entretien
     * const entretien = await prisma.entretien.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EntretienFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EntretienFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__EntretienClient<$Result.GetResult<Prisma.$EntretienPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Entretien that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntretienFindFirstArgs} args - Arguments to find a Entretien
     * @example
     * // Get one Entretien
     * const entretien = await prisma.entretien.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EntretienFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, EntretienFindFirstArgs<ExtArgs>>
    ): Prisma__EntretienClient<$Result.GetResult<Prisma.$EntretienPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Entretien that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntretienFindFirstOrThrowArgs} args - Arguments to find a Entretien
     * @example
     * // Get one Entretien
     * const entretien = await prisma.entretien.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EntretienFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EntretienFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__EntretienClient<$Result.GetResult<Prisma.$EntretienPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Entretiens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntretienFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Entretiens
     * const entretiens = await prisma.entretien.findMany()
     * 
     * // Get first 10 Entretiens
     * const entretiens = await prisma.entretien.findMany({ take: 10 })
     * 
     * // Only select the `idEntretien`
     * const entretienWithIdEntretienOnly = await prisma.entretien.findMany({ select: { idEntretien: true } })
     * 
    **/
    findMany<T extends EntretienFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EntretienFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EntretienPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Entretien.
     * @param {EntretienCreateArgs} args - Arguments to create a Entretien.
     * @example
     * // Create one Entretien
     * const Entretien = await prisma.entretien.create({
     *   data: {
     *     // ... data to create a Entretien
     *   }
     * })
     * 
    **/
    create<T extends EntretienCreateArgs<ExtArgs>>(
      args: SelectSubset<T, EntretienCreateArgs<ExtArgs>>
    ): Prisma__EntretienClient<$Result.GetResult<Prisma.$EntretienPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Entretiens.
     *     @param {EntretienCreateManyArgs} args - Arguments to create many Entretiens.
     *     @example
     *     // Create many Entretiens
     *     const entretien = await prisma.entretien.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends EntretienCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EntretienCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Entretien.
     * @param {EntretienDeleteArgs} args - Arguments to delete one Entretien.
     * @example
     * // Delete one Entretien
     * const Entretien = await prisma.entretien.delete({
     *   where: {
     *     // ... filter to delete one Entretien
     *   }
     * })
     * 
    **/
    delete<T extends EntretienDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, EntretienDeleteArgs<ExtArgs>>
    ): Prisma__EntretienClient<$Result.GetResult<Prisma.$EntretienPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Entretien.
     * @param {EntretienUpdateArgs} args - Arguments to update one Entretien.
     * @example
     * // Update one Entretien
     * const entretien = await prisma.entretien.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EntretienUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, EntretienUpdateArgs<ExtArgs>>
    ): Prisma__EntretienClient<$Result.GetResult<Prisma.$EntretienPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Entretiens.
     * @param {EntretienDeleteManyArgs} args - Arguments to filter Entretiens to delete.
     * @example
     * // Delete a few Entretiens
     * const { count } = await prisma.entretien.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EntretienDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EntretienDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Entretiens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntretienUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Entretiens
     * const entretien = await prisma.entretien.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EntretienUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, EntretienUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Entretien.
     * @param {EntretienUpsertArgs} args - Arguments to update or create a Entretien.
     * @example
     * // Update or create a Entretien
     * const entretien = await prisma.entretien.upsert({
     *   create: {
     *     // ... data to create a Entretien
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Entretien we want to update
     *   }
     * })
    **/
    upsert<T extends EntretienUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, EntretienUpsertArgs<ExtArgs>>
    ): Prisma__EntretienClient<$Result.GetResult<Prisma.$EntretienPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Entretiens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntretienCountArgs} args - Arguments to filter Entretiens to count.
     * @example
     * // Count the number of Entretiens
     * const count = await prisma.entretien.count({
     *   where: {
     *     // ... the filter for the Entretiens we want to count
     *   }
     * })
    **/
    count<T extends EntretienCountArgs>(
      args?: Subset<T, EntretienCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EntretienCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Entretien.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntretienAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EntretienAggregateArgs>(args: Subset<T, EntretienAggregateArgs>): Prisma.PrismaPromise<GetEntretienAggregateType<T>>

    /**
     * Group by Entretien.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntretienGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EntretienGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EntretienGroupByArgs['orderBy'] }
        : { orderBy?: EntretienGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EntretienGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEntretienGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Entretien model
   */
  readonly fields: EntretienFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Entretien.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EntretienClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    entreprise<T extends EntrepriseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EntrepriseDefaultArgs<ExtArgs>>): Prisma__EntrepriseClient<$Result.GetResult<Prisma.$EntreprisePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    candidat<T extends CandidatDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CandidatDefaultArgs<ExtArgs>>): Prisma__CandidatClient<$Result.GetResult<Prisma.$CandidatPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Entretien model
   */ 
  interface EntretienFieldRefs {
    readonly idEntretien: FieldRef<"Entretien", 'Int'>
    readonly entrepriseId: FieldRef<"Entretien", 'Int'>
    readonly candidatId: FieldRef<"Entretien", 'Int'>
    readonly dateEntretien: FieldRef<"Entretien", 'DateTime'>
    readonly adresEntretien: FieldRef<"Entretien", 'String'>
    readonly recruEntretien: FieldRef<"Entretien", 'String'>
    readonly typeEntretien: FieldRef<"Entretien", 'String'>
    readonly descripEntreprise: FieldRef<"Entretien", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Entretien findUnique
   */
  export type EntretienFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entretien
     */
    select?: EntretienSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EntretienInclude<ExtArgs> | null
    /**
     * Filter, which Entretien to fetch.
     */
    where: EntretienWhereUniqueInput
  }


  /**
   * Entretien findUniqueOrThrow
   */
  export type EntretienFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entretien
     */
    select?: EntretienSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EntretienInclude<ExtArgs> | null
    /**
     * Filter, which Entretien to fetch.
     */
    where: EntretienWhereUniqueInput
  }


  /**
   * Entretien findFirst
   */
  export type EntretienFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entretien
     */
    select?: EntretienSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EntretienInclude<ExtArgs> | null
    /**
     * Filter, which Entretien to fetch.
     */
    where?: EntretienWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Entretiens to fetch.
     */
    orderBy?: EntretienOrderByWithRelationInput | EntretienOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Entretiens.
     */
    cursor?: EntretienWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Entretiens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Entretiens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Entretiens.
     */
    distinct?: EntretienScalarFieldEnum | EntretienScalarFieldEnum[]
  }


  /**
   * Entretien findFirstOrThrow
   */
  export type EntretienFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entretien
     */
    select?: EntretienSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EntretienInclude<ExtArgs> | null
    /**
     * Filter, which Entretien to fetch.
     */
    where?: EntretienWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Entretiens to fetch.
     */
    orderBy?: EntretienOrderByWithRelationInput | EntretienOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Entretiens.
     */
    cursor?: EntretienWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Entretiens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Entretiens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Entretiens.
     */
    distinct?: EntretienScalarFieldEnum | EntretienScalarFieldEnum[]
  }


  /**
   * Entretien findMany
   */
  export type EntretienFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entretien
     */
    select?: EntretienSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EntretienInclude<ExtArgs> | null
    /**
     * Filter, which Entretiens to fetch.
     */
    where?: EntretienWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Entretiens to fetch.
     */
    orderBy?: EntretienOrderByWithRelationInput | EntretienOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Entretiens.
     */
    cursor?: EntretienWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Entretiens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Entretiens.
     */
    skip?: number
    distinct?: EntretienScalarFieldEnum | EntretienScalarFieldEnum[]
  }


  /**
   * Entretien create
   */
  export type EntretienCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entretien
     */
    select?: EntretienSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EntretienInclude<ExtArgs> | null
    /**
     * The data needed to create a Entretien.
     */
    data: XOR<EntretienCreateInput, EntretienUncheckedCreateInput>
  }


  /**
   * Entretien createMany
   */
  export type EntretienCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Entretiens.
     */
    data: EntretienCreateManyInput | EntretienCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Entretien update
   */
  export type EntretienUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entretien
     */
    select?: EntretienSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EntretienInclude<ExtArgs> | null
    /**
     * The data needed to update a Entretien.
     */
    data: XOR<EntretienUpdateInput, EntretienUncheckedUpdateInput>
    /**
     * Choose, which Entretien to update.
     */
    where: EntretienWhereUniqueInput
  }


  /**
   * Entretien updateMany
   */
  export type EntretienUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Entretiens.
     */
    data: XOR<EntretienUpdateManyMutationInput, EntretienUncheckedUpdateManyInput>
    /**
     * Filter which Entretiens to update
     */
    where?: EntretienWhereInput
  }


  /**
   * Entretien upsert
   */
  export type EntretienUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entretien
     */
    select?: EntretienSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EntretienInclude<ExtArgs> | null
    /**
     * The filter to search for the Entretien to update in case it exists.
     */
    where: EntretienWhereUniqueInput
    /**
     * In case the Entretien found by the `where` argument doesn't exist, create a new Entretien with this data.
     */
    create: XOR<EntretienCreateInput, EntretienUncheckedCreateInput>
    /**
     * In case the Entretien was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EntretienUpdateInput, EntretienUncheckedUpdateInput>
  }


  /**
   * Entretien delete
   */
  export type EntretienDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entretien
     */
    select?: EntretienSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EntretienInclude<ExtArgs> | null
    /**
     * Filter which Entretien to delete.
     */
    where: EntretienWhereUniqueInput
  }


  /**
   * Entretien deleteMany
   */
  export type EntretienDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Entretiens to delete
     */
    where?: EntretienWhereInput
  }


  /**
   * Entretien without action
   */
  export type EntretienDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entretien
     */
    select?: EntretienSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EntretienInclude<ExtArgs> | null
  }



  /**
   * Model Freelancer
   */

  export type AggregateFreelancer = {
    _count: FreelancerCountAggregateOutputType | null
    _avg: FreelancerAvgAggregateOutputType | null
    _sum: FreelancerSumAggregateOutputType | null
    _min: FreelancerMinAggregateOutputType | null
    _max: FreelancerMaxAggregateOutputType | null
  }

  export type FreelancerAvgAggregateOutputType = {
    idFreelancer: number | null
  }

  export type FreelancerSumAggregateOutputType = {
    idFreelancer: number | null
  }

  export type FreelancerMinAggregateOutputType = {
    idFreelancer: number | null
    nomFreelancer: string | null
    prenomFreelancer: string | null
    adresFreelancer: string | null
    TelFreelancer: string | null
    emailFreelancer: string | null
    competencesFreelancer: string | null
    experienceFreelancer: string | null
    portfolioFreelancer: string | null
  }

  export type FreelancerMaxAggregateOutputType = {
    idFreelancer: number | null
    nomFreelancer: string | null
    prenomFreelancer: string | null
    adresFreelancer: string | null
    TelFreelancer: string | null
    emailFreelancer: string | null
    competencesFreelancer: string | null
    experienceFreelancer: string | null
    portfolioFreelancer: string | null
  }

  export type FreelancerCountAggregateOutputType = {
    idFreelancer: number
    nomFreelancer: number
    prenomFreelancer: number
    adresFreelancer: number
    TelFreelancer: number
    emailFreelancer: number
    competencesFreelancer: number
    experienceFreelancer: number
    portfolioFreelancer: number
    _all: number
  }


  export type FreelancerAvgAggregateInputType = {
    idFreelancer?: true
  }

  export type FreelancerSumAggregateInputType = {
    idFreelancer?: true
  }

  export type FreelancerMinAggregateInputType = {
    idFreelancer?: true
    nomFreelancer?: true
    prenomFreelancer?: true
    adresFreelancer?: true
    TelFreelancer?: true
    emailFreelancer?: true
    competencesFreelancer?: true
    experienceFreelancer?: true
    portfolioFreelancer?: true
  }

  export type FreelancerMaxAggregateInputType = {
    idFreelancer?: true
    nomFreelancer?: true
    prenomFreelancer?: true
    adresFreelancer?: true
    TelFreelancer?: true
    emailFreelancer?: true
    competencesFreelancer?: true
    experienceFreelancer?: true
    portfolioFreelancer?: true
  }

  export type FreelancerCountAggregateInputType = {
    idFreelancer?: true
    nomFreelancer?: true
    prenomFreelancer?: true
    adresFreelancer?: true
    TelFreelancer?: true
    emailFreelancer?: true
    competencesFreelancer?: true
    experienceFreelancer?: true
    portfolioFreelancer?: true
    _all?: true
  }

  export type FreelancerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Freelancer to aggregate.
     */
    where?: FreelancerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Freelancers to fetch.
     */
    orderBy?: FreelancerOrderByWithRelationInput | FreelancerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FreelancerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Freelancers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Freelancers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Freelancers
    **/
    _count?: true | FreelancerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FreelancerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FreelancerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FreelancerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FreelancerMaxAggregateInputType
  }

  export type GetFreelancerAggregateType<T extends FreelancerAggregateArgs> = {
        [P in keyof T & keyof AggregateFreelancer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFreelancer[P]>
      : GetScalarType<T[P], AggregateFreelancer[P]>
  }




  export type FreelancerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FreelancerWhereInput
    orderBy?: FreelancerOrderByWithAggregationInput | FreelancerOrderByWithAggregationInput[]
    by: FreelancerScalarFieldEnum[] | FreelancerScalarFieldEnum
    having?: FreelancerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FreelancerCountAggregateInputType | true
    _avg?: FreelancerAvgAggregateInputType
    _sum?: FreelancerSumAggregateInputType
    _min?: FreelancerMinAggregateInputType
    _max?: FreelancerMaxAggregateInputType
  }

  export type FreelancerGroupByOutputType = {
    idFreelancer: number
    nomFreelancer: string
    prenomFreelancer: string
    adresFreelancer: string
    TelFreelancer: string
    emailFreelancer: string
    competencesFreelancer: string
    experienceFreelancer: string
    portfolioFreelancer: string
    _count: FreelancerCountAggregateOutputType | null
    _avg: FreelancerAvgAggregateOutputType | null
    _sum: FreelancerSumAggregateOutputType | null
    _min: FreelancerMinAggregateOutputType | null
    _max: FreelancerMaxAggregateOutputType | null
  }

  type GetFreelancerGroupByPayload<T extends FreelancerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FreelancerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FreelancerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FreelancerGroupByOutputType[P]>
            : GetScalarType<T[P], FreelancerGroupByOutputType[P]>
        }
      >
    >


  export type FreelancerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idFreelancer?: boolean
    nomFreelancer?: boolean
    prenomFreelancer?: boolean
    adresFreelancer?: boolean
    TelFreelancer?: boolean
    emailFreelancer?: boolean
    competencesFreelancer?: boolean
    experienceFreelancer?: boolean
    portfolioFreelancer?: boolean
    propositions?: boolean | Freelancer$propositionsArgs<ExtArgs>
    contrats?: boolean | Freelancer$contratsArgs<ExtArgs>
    _count?: boolean | FreelancerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["freelancer"]>

  export type FreelancerSelectScalar = {
    idFreelancer?: boolean
    nomFreelancer?: boolean
    prenomFreelancer?: boolean
    adresFreelancer?: boolean
    TelFreelancer?: boolean
    emailFreelancer?: boolean
    competencesFreelancer?: boolean
    experienceFreelancer?: boolean
    portfolioFreelancer?: boolean
  }

  export type FreelancerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    propositions?: boolean | Freelancer$propositionsArgs<ExtArgs>
    contrats?: boolean | Freelancer$contratsArgs<ExtArgs>
    _count?: boolean | FreelancerCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $FreelancerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Freelancer"
    objects: {
      propositions: Prisma.$PropositionPayload<ExtArgs>[]
      contrats: Prisma.$ContratPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      idFreelancer: number
      nomFreelancer: string
      prenomFreelancer: string
      adresFreelancer: string
      TelFreelancer: string
      emailFreelancer: string
      competencesFreelancer: string
      experienceFreelancer: string
      portfolioFreelancer: string
    }, ExtArgs["result"]["freelancer"]>
    composites: {}
  }


  type FreelancerGetPayload<S extends boolean | null | undefined | FreelancerDefaultArgs> = $Result.GetResult<Prisma.$FreelancerPayload, S>

  type FreelancerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FreelancerFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: FreelancerCountAggregateInputType | true
    }

  export interface FreelancerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Freelancer'], meta: { name: 'Freelancer' } }
    /**
     * Find zero or one Freelancer that matches the filter.
     * @param {FreelancerFindUniqueArgs} args - Arguments to find a Freelancer
     * @example
     * // Get one Freelancer
     * const freelancer = await prisma.freelancer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FreelancerFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, FreelancerFindUniqueArgs<ExtArgs>>
    ): Prisma__FreelancerClient<$Result.GetResult<Prisma.$FreelancerPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Freelancer that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FreelancerFindUniqueOrThrowArgs} args - Arguments to find a Freelancer
     * @example
     * // Get one Freelancer
     * const freelancer = await prisma.freelancer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FreelancerFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FreelancerFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__FreelancerClient<$Result.GetResult<Prisma.$FreelancerPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Freelancer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FreelancerFindFirstArgs} args - Arguments to find a Freelancer
     * @example
     * // Get one Freelancer
     * const freelancer = await prisma.freelancer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FreelancerFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, FreelancerFindFirstArgs<ExtArgs>>
    ): Prisma__FreelancerClient<$Result.GetResult<Prisma.$FreelancerPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Freelancer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FreelancerFindFirstOrThrowArgs} args - Arguments to find a Freelancer
     * @example
     * // Get one Freelancer
     * const freelancer = await prisma.freelancer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FreelancerFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FreelancerFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__FreelancerClient<$Result.GetResult<Prisma.$FreelancerPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Freelancers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FreelancerFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Freelancers
     * const freelancers = await prisma.freelancer.findMany()
     * 
     * // Get first 10 Freelancers
     * const freelancers = await prisma.freelancer.findMany({ take: 10 })
     * 
     * // Only select the `idFreelancer`
     * const freelancerWithIdFreelancerOnly = await prisma.freelancer.findMany({ select: { idFreelancer: true } })
     * 
    **/
    findMany<T extends FreelancerFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FreelancerFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FreelancerPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Freelancer.
     * @param {FreelancerCreateArgs} args - Arguments to create a Freelancer.
     * @example
     * // Create one Freelancer
     * const Freelancer = await prisma.freelancer.create({
     *   data: {
     *     // ... data to create a Freelancer
     *   }
     * })
     * 
    **/
    create<T extends FreelancerCreateArgs<ExtArgs>>(
      args: SelectSubset<T, FreelancerCreateArgs<ExtArgs>>
    ): Prisma__FreelancerClient<$Result.GetResult<Prisma.$FreelancerPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Freelancers.
     *     @param {FreelancerCreateManyArgs} args - Arguments to create many Freelancers.
     *     @example
     *     // Create many Freelancers
     *     const freelancer = await prisma.freelancer.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FreelancerCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FreelancerCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Freelancer.
     * @param {FreelancerDeleteArgs} args - Arguments to delete one Freelancer.
     * @example
     * // Delete one Freelancer
     * const Freelancer = await prisma.freelancer.delete({
     *   where: {
     *     // ... filter to delete one Freelancer
     *   }
     * })
     * 
    **/
    delete<T extends FreelancerDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, FreelancerDeleteArgs<ExtArgs>>
    ): Prisma__FreelancerClient<$Result.GetResult<Prisma.$FreelancerPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Freelancer.
     * @param {FreelancerUpdateArgs} args - Arguments to update one Freelancer.
     * @example
     * // Update one Freelancer
     * const freelancer = await prisma.freelancer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FreelancerUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, FreelancerUpdateArgs<ExtArgs>>
    ): Prisma__FreelancerClient<$Result.GetResult<Prisma.$FreelancerPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Freelancers.
     * @param {FreelancerDeleteManyArgs} args - Arguments to filter Freelancers to delete.
     * @example
     * // Delete a few Freelancers
     * const { count } = await prisma.freelancer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FreelancerDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FreelancerDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Freelancers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FreelancerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Freelancers
     * const freelancer = await prisma.freelancer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FreelancerUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, FreelancerUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Freelancer.
     * @param {FreelancerUpsertArgs} args - Arguments to update or create a Freelancer.
     * @example
     * // Update or create a Freelancer
     * const freelancer = await prisma.freelancer.upsert({
     *   create: {
     *     // ... data to create a Freelancer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Freelancer we want to update
     *   }
     * })
    **/
    upsert<T extends FreelancerUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, FreelancerUpsertArgs<ExtArgs>>
    ): Prisma__FreelancerClient<$Result.GetResult<Prisma.$FreelancerPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Freelancers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FreelancerCountArgs} args - Arguments to filter Freelancers to count.
     * @example
     * // Count the number of Freelancers
     * const count = await prisma.freelancer.count({
     *   where: {
     *     // ... the filter for the Freelancers we want to count
     *   }
     * })
    **/
    count<T extends FreelancerCountArgs>(
      args?: Subset<T, FreelancerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FreelancerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Freelancer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FreelancerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FreelancerAggregateArgs>(args: Subset<T, FreelancerAggregateArgs>): Prisma.PrismaPromise<GetFreelancerAggregateType<T>>

    /**
     * Group by Freelancer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FreelancerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FreelancerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FreelancerGroupByArgs['orderBy'] }
        : { orderBy?: FreelancerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FreelancerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFreelancerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Freelancer model
   */
  readonly fields: FreelancerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Freelancer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FreelancerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    propositions<T extends Freelancer$propositionsArgs<ExtArgs> = {}>(args?: Subset<T, Freelancer$propositionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PropositionPayload<ExtArgs>, T, 'findMany'> | Null>;

    contrats<T extends Freelancer$contratsArgs<ExtArgs> = {}>(args?: Subset<T, Freelancer$contratsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContratPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Freelancer model
   */ 
  interface FreelancerFieldRefs {
    readonly idFreelancer: FieldRef<"Freelancer", 'Int'>
    readonly nomFreelancer: FieldRef<"Freelancer", 'String'>
    readonly prenomFreelancer: FieldRef<"Freelancer", 'String'>
    readonly adresFreelancer: FieldRef<"Freelancer", 'String'>
    readonly TelFreelancer: FieldRef<"Freelancer", 'String'>
    readonly emailFreelancer: FieldRef<"Freelancer", 'String'>
    readonly competencesFreelancer: FieldRef<"Freelancer", 'String'>
    readonly experienceFreelancer: FieldRef<"Freelancer", 'String'>
    readonly portfolioFreelancer: FieldRef<"Freelancer", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Freelancer findUnique
   */
  export type FreelancerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Freelancer
     */
    select?: FreelancerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FreelancerInclude<ExtArgs> | null
    /**
     * Filter, which Freelancer to fetch.
     */
    where: FreelancerWhereUniqueInput
  }


  /**
   * Freelancer findUniqueOrThrow
   */
  export type FreelancerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Freelancer
     */
    select?: FreelancerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FreelancerInclude<ExtArgs> | null
    /**
     * Filter, which Freelancer to fetch.
     */
    where: FreelancerWhereUniqueInput
  }


  /**
   * Freelancer findFirst
   */
  export type FreelancerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Freelancer
     */
    select?: FreelancerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FreelancerInclude<ExtArgs> | null
    /**
     * Filter, which Freelancer to fetch.
     */
    where?: FreelancerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Freelancers to fetch.
     */
    orderBy?: FreelancerOrderByWithRelationInput | FreelancerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Freelancers.
     */
    cursor?: FreelancerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Freelancers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Freelancers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Freelancers.
     */
    distinct?: FreelancerScalarFieldEnum | FreelancerScalarFieldEnum[]
  }


  /**
   * Freelancer findFirstOrThrow
   */
  export type FreelancerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Freelancer
     */
    select?: FreelancerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FreelancerInclude<ExtArgs> | null
    /**
     * Filter, which Freelancer to fetch.
     */
    where?: FreelancerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Freelancers to fetch.
     */
    orderBy?: FreelancerOrderByWithRelationInput | FreelancerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Freelancers.
     */
    cursor?: FreelancerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Freelancers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Freelancers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Freelancers.
     */
    distinct?: FreelancerScalarFieldEnum | FreelancerScalarFieldEnum[]
  }


  /**
   * Freelancer findMany
   */
  export type FreelancerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Freelancer
     */
    select?: FreelancerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FreelancerInclude<ExtArgs> | null
    /**
     * Filter, which Freelancers to fetch.
     */
    where?: FreelancerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Freelancers to fetch.
     */
    orderBy?: FreelancerOrderByWithRelationInput | FreelancerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Freelancers.
     */
    cursor?: FreelancerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Freelancers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Freelancers.
     */
    skip?: number
    distinct?: FreelancerScalarFieldEnum | FreelancerScalarFieldEnum[]
  }


  /**
   * Freelancer create
   */
  export type FreelancerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Freelancer
     */
    select?: FreelancerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FreelancerInclude<ExtArgs> | null
    /**
     * The data needed to create a Freelancer.
     */
    data: XOR<FreelancerCreateInput, FreelancerUncheckedCreateInput>
  }


  /**
   * Freelancer createMany
   */
  export type FreelancerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Freelancers.
     */
    data: FreelancerCreateManyInput | FreelancerCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Freelancer update
   */
  export type FreelancerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Freelancer
     */
    select?: FreelancerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FreelancerInclude<ExtArgs> | null
    /**
     * The data needed to update a Freelancer.
     */
    data: XOR<FreelancerUpdateInput, FreelancerUncheckedUpdateInput>
    /**
     * Choose, which Freelancer to update.
     */
    where: FreelancerWhereUniqueInput
  }


  /**
   * Freelancer updateMany
   */
  export type FreelancerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Freelancers.
     */
    data: XOR<FreelancerUpdateManyMutationInput, FreelancerUncheckedUpdateManyInput>
    /**
     * Filter which Freelancers to update
     */
    where?: FreelancerWhereInput
  }


  /**
   * Freelancer upsert
   */
  export type FreelancerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Freelancer
     */
    select?: FreelancerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FreelancerInclude<ExtArgs> | null
    /**
     * The filter to search for the Freelancer to update in case it exists.
     */
    where: FreelancerWhereUniqueInput
    /**
     * In case the Freelancer found by the `where` argument doesn't exist, create a new Freelancer with this data.
     */
    create: XOR<FreelancerCreateInput, FreelancerUncheckedCreateInput>
    /**
     * In case the Freelancer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FreelancerUpdateInput, FreelancerUncheckedUpdateInput>
  }


  /**
   * Freelancer delete
   */
  export type FreelancerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Freelancer
     */
    select?: FreelancerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FreelancerInclude<ExtArgs> | null
    /**
     * Filter which Freelancer to delete.
     */
    where: FreelancerWhereUniqueInput
  }


  /**
   * Freelancer deleteMany
   */
  export type FreelancerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Freelancers to delete
     */
    where?: FreelancerWhereInput
  }


  /**
   * Freelancer.propositions
   */
  export type Freelancer$propositionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposition
     */
    select?: PropositionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PropositionInclude<ExtArgs> | null
    where?: PropositionWhereInput
    orderBy?: PropositionOrderByWithRelationInput | PropositionOrderByWithRelationInput[]
    cursor?: PropositionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PropositionScalarFieldEnum | PropositionScalarFieldEnum[]
  }


  /**
   * Freelancer.contrats
   */
  export type Freelancer$contratsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contrat
     */
    select?: ContratSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContratInclude<ExtArgs> | null
    where?: ContratWhereInput
    orderBy?: ContratOrderByWithRelationInput | ContratOrderByWithRelationInput[]
    cursor?: ContratWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContratScalarFieldEnum | ContratScalarFieldEnum[]
  }


  /**
   * Freelancer without action
   */
  export type FreelancerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Freelancer
     */
    select?: FreelancerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FreelancerInclude<ExtArgs> | null
  }



  /**
   * Model Note
   */

  export type AggregateNote = {
    _count: NoteCountAggregateOutputType | null
    _avg: NoteAvgAggregateOutputType | null
    _sum: NoteSumAggregateOutputType | null
    _min: NoteMinAggregateOutputType | null
    _max: NoteMaxAggregateOutputType | null
  }

  export type NoteAvgAggregateOutputType = {
    idNote: number | null
    entrepriseId: number | null
    candidatId: number | null
    Note: Decimal | null
  }

  export type NoteSumAggregateOutputType = {
    idNote: number | null
    entrepriseId: number | null
    candidatId: number | null
    Note: Decimal | null
  }

  export type NoteMinAggregateOutputType = {
    idNote: number | null
    entrepriseId: number | null
    candidatId: number | null
    Note: Decimal | null
    commentNote: string | null
    dateNote: Date | null
  }

  export type NoteMaxAggregateOutputType = {
    idNote: number | null
    entrepriseId: number | null
    candidatId: number | null
    Note: Decimal | null
    commentNote: string | null
    dateNote: Date | null
  }

  export type NoteCountAggregateOutputType = {
    idNote: number
    entrepriseId: number
    candidatId: number
    Note: number
    commentNote: number
    dateNote: number
    _all: number
  }


  export type NoteAvgAggregateInputType = {
    idNote?: true
    entrepriseId?: true
    candidatId?: true
    Note?: true
  }

  export type NoteSumAggregateInputType = {
    idNote?: true
    entrepriseId?: true
    candidatId?: true
    Note?: true
  }

  export type NoteMinAggregateInputType = {
    idNote?: true
    entrepriseId?: true
    candidatId?: true
    Note?: true
    commentNote?: true
    dateNote?: true
  }

  export type NoteMaxAggregateInputType = {
    idNote?: true
    entrepriseId?: true
    candidatId?: true
    Note?: true
    commentNote?: true
    dateNote?: true
  }

  export type NoteCountAggregateInputType = {
    idNote?: true
    entrepriseId?: true
    candidatId?: true
    Note?: true
    commentNote?: true
    dateNote?: true
    _all?: true
  }

  export type NoteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Note to aggregate.
     */
    where?: NoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notes to fetch.
     */
    orderBy?: NoteOrderByWithRelationInput | NoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notes
    **/
    _count?: true | NoteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NoteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NoteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NoteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NoteMaxAggregateInputType
  }

  export type GetNoteAggregateType<T extends NoteAggregateArgs> = {
        [P in keyof T & keyof AggregateNote]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNote[P]>
      : GetScalarType<T[P], AggregateNote[P]>
  }




  export type NoteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NoteWhereInput
    orderBy?: NoteOrderByWithAggregationInput | NoteOrderByWithAggregationInput[]
    by: NoteScalarFieldEnum[] | NoteScalarFieldEnum
    having?: NoteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NoteCountAggregateInputType | true
    _avg?: NoteAvgAggregateInputType
    _sum?: NoteSumAggregateInputType
    _min?: NoteMinAggregateInputType
    _max?: NoteMaxAggregateInputType
  }

  export type NoteGroupByOutputType = {
    idNote: number
    entrepriseId: number
    candidatId: number
    Note: Decimal
    commentNote: string
    dateNote: Date
    _count: NoteCountAggregateOutputType | null
    _avg: NoteAvgAggregateOutputType | null
    _sum: NoteSumAggregateOutputType | null
    _min: NoteMinAggregateOutputType | null
    _max: NoteMaxAggregateOutputType | null
  }

  type GetNoteGroupByPayload<T extends NoteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NoteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NoteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NoteGroupByOutputType[P]>
            : GetScalarType<T[P], NoteGroupByOutputType[P]>
        }
      >
    >


  export type NoteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idNote?: boolean
    entrepriseId?: boolean
    candidatId?: boolean
    Note?: boolean
    commentNote?: boolean
    dateNote?: boolean
    entreprise?: boolean | EntrepriseDefaultArgs<ExtArgs>
    candidat?: boolean | CandidatDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["note"]>

  export type NoteSelectScalar = {
    idNote?: boolean
    entrepriseId?: boolean
    candidatId?: boolean
    Note?: boolean
    commentNote?: boolean
    dateNote?: boolean
  }

  export type NoteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    entreprise?: boolean | EntrepriseDefaultArgs<ExtArgs>
    candidat?: boolean | CandidatDefaultArgs<ExtArgs>
  }


  export type $NotePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Note"
    objects: {
      entreprise: Prisma.$EntreprisePayload<ExtArgs>
      candidat: Prisma.$CandidatPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      idNote: number
      entrepriseId: number
      candidatId: number
      Note: Prisma.Decimal
      commentNote: string
      dateNote: Date
    }, ExtArgs["result"]["note"]>
    composites: {}
  }


  type NoteGetPayload<S extends boolean | null | undefined | NoteDefaultArgs> = $Result.GetResult<Prisma.$NotePayload, S>

  type NoteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NoteFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: NoteCountAggregateInputType | true
    }

  export interface NoteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Note'], meta: { name: 'Note' } }
    /**
     * Find zero or one Note that matches the filter.
     * @param {NoteFindUniqueArgs} args - Arguments to find a Note
     * @example
     * // Get one Note
     * const note = await prisma.note.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends NoteFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, NoteFindUniqueArgs<ExtArgs>>
    ): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Note that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {NoteFindUniqueOrThrowArgs} args - Arguments to find a Note
     * @example
     * // Get one Note
     * const note = await prisma.note.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends NoteFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NoteFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Note that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteFindFirstArgs} args - Arguments to find a Note
     * @example
     * // Get one Note
     * const note = await prisma.note.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends NoteFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, NoteFindFirstArgs<ExtArgs>>
    ): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Note that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteFindFirstOrThrowArgs} args - Arguments to find a Note
     * @example
     * // Get one Note
     * const note = await prisma.note.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends NoteFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NoteFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Notes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notes
     * const notes = await prisma.note.findMany()
     * 
     * // Get first 10 Notes
     * const notes = await prisma.note.findMany({ take: 10 })
     * 
     * // Only select the `idNote`
     * const noteWithIdNoteOnly = await prisma.note.findMany({ select: { idNote: true } })
     * 
    **/
    findMany<T extends NoteFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NoteFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Note.
     * @param {NoteCreateArgs} args - Arguments to create a Note.
     * @example
     * // Create one Note
     * const Note = await prisma.note.create({
     *   data: {
     *     // ... data to create a Note
     *   }
     * })
     * 
    **/
    create<T extends NoteCreateArgs<ExtArgs>>(
      args: SelectSubset<T, NoteCreateArgs<ExtArgs>>
    ): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Notes.
     *     @param {NoteCreateManyArgs} args - Arguments to create many Notes.
     *     @example
     *     // Create many Notes
     *     const note = await prisma.note.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends NoteCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NoteCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Note.
     * @param {NoteDeleteArgs} args - Arguments to delete one Note.
     * @example
     * // Delete one Note
     * const Note = await prisma.note.delete({
     *   where: {
     *     // ... filter to delete one Note
     *   }
     * })
     * 
    **/
    delete<T extends NoteDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, NoteDeleteArgs<ExtArgs>>
    ): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Note.
     * @param {NoteUpdateArgs} args - Arguments to update one Note.
     * @example
     * // Update one Note
     * const note = await prisma.note.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends NoteUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, NoteUpdateArgs<ExtArgs>>
    ): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Notes.
     * @param {NoteDeleteManyArgs} args - Arguments to filter Notes to delete.
     * @example
     * // Delete a few Notes
     * const { count } = await prisma.note.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends NoteDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NoteDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notes
     * const note = await prisma.note.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends NoteUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, NoteUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Note.
     * @param {NoteUpsertArgs} args - Arguments to update or create a Note.
     * @example
     * // Update or create a Note
     * const note = await prisma.note.upsert({
     *   create: {
     *     // ... data to create a Note
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Note we want to update
     *   }
     * })
    **/
    upsert<T extends NoteUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, NoteUpsertArgs<ExtArgs>>
    ): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Notes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteCountArgs} args - Arguments to filter Notes to count.
     * @example
     * // Count the number of Notes
     * const count = await prisma.note.count({
     *   where: {
     *     // ... the filter for the Notes we want to count
     *   }
     * })
    **/
    count<T extends NoteCountArgs>(
      args?: Subset<T, NoteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NoteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Note.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NoteAggregateArgs>(args: Subset<T, NoteAggregateArgs>): Prisma.PrismaPromise<GetNoteAggregateType<T>>

    /**
     * Group by Note.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NoteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NoteGroupByArgs['orderBy'] }
        : { orderBy?: NoteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NoteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNoteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Note model
   */
  readonly fields: NoteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Note.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NoteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    entreprise<T extends EntrepriseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EntrepriseDefaultArgs<ExtArgs>>): Prisma__EntrepriseClient<$Result.GetResult<Prisma.$EntreprisePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    candidat<T extends CandidatDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CandidatDefaultArgs<ExtArgs>>): Prisma__CandidatClient<$Result.GetResult<Prisma.$CandidatPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Note model
   */ 
  interface NoteFieldRefs {
    readonly idNote: FieldRef<"Note", 'Int'>
    readonly entrepriseId: FieldRef<"Note", 'Int'>
    readonly candidatId: FieldRef<"Note", 'Int'>
    readonly Note: FieldRef<"Note", 'Decimal'>
    readonly commentNote: FieldRef<"Note", 'String'>
    readonly dateNote: FieldRef<"Note", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Note findUnique
   */
  export type NoteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * Filter, which Note to fetch.
     */
    where: NoteWhereUniqueInput
  }


  /**
   * Note findUniqueOrThrow
   */
  export type NoteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * Filter, which Note to fetch.
     */
    where: NoteWhereUniqueInput
  }


  /**
   * Note findFirst
   */
  export type NoteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * Filter, which Note to fetch.
     */
    where?: NoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notes to fetch.
     */
    orderBy?: NoteOrderByWithRelationInput | NoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notes.
     */
    cursor?: NoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notes.
     */
    distinct?: NoteScalarFieldEnum | NoteScalarFieldEnum[]
  }


  /**
   * Note findFirstOrThrow
   */
  export type NoteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * Filter, which Note to fetch.
     */
    where?: NoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notes to fetch.
     */
    orderBy?: NoteOrderByWithRelationInput | NoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notes.
     */
    cursor?: NoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notes.
     */
    distinct?: NoteScalarFieldEnum | NoteScalarFieldEnum[]
  }


  /**
   * Note findMany
   */
  export type NoteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * Filter, which Notes to fetch.
     */
    where?: NoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notes to fetch.
     */
    orderBy?: NoteOrderByWithRelationInput | NoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notes.
     */
    cursor?: NoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notes.
     */
    skip?: number
    distinct?: NoteScalarFieldEnum | NoteScalarFieldEnum[]
  }


  /**
   * Note create
   */
  export type NoteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * The data needed to create a Note.
     */
    data: XOR<NoteCreateInput, NoteUncheckedCreateInput>
  }


  /**
   * Note createMany
   */
  export type NoteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notes.
     */
    data: NoteCreateManyInput | NoteCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Note update
   */
  export type NoteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * The data needed to update a Note.
     */
    data: XOR<NoteUpdateInput, NoteUncheckedUpdateInput>
    /**
     * Choose, which Note to update.
     */
    where: NoteWhereUniqueInput
  }


  /**
   * Note updateMany
   */
  export type NoteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notes.
     */
    data: XOR<NoteUpdateManyMutationInput, NoteUncheckedUpdateManyInput>
    /**
     * Filter which Notes to update
     */
    where?: NoteWhereInput
  }


  /**
   * Note upsert
   */
  export type NoteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * The filter to search for the Note to update in case it exists.
     */
    where: NoteWhereUniqueInput
    /**
     * In case the Note found by the `where` argument doesn't exist, create a new Note with this data.
     */
    create: XOR<NoteCreateInput, NoteUncheckedCreateInput>
    /**
     * In case the Note was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NoteUpdateInput, NoteUncheckedUpdateInput>
  }


  /**
   * Note delete
   */
  export type NoteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * Filter which Note to delete.
     */
    where: NoteWhereUniqueInput
  }


  /**
   * Note deleteMany
   */
  export type NoteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notes to delete
     */
    where?: NoteWhereInput
  }


  /**
   * Note without action
   */
  export type NoteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NoteInclude<ExtArgs> | null
  }



  /**
   * Model OffreEmploi
   */

  export type AggregateOffreEmploi = {
    _count: OffreEmploiCountAggregateOutputType | null
    _avg: OffreEmploiAvgAggregateOutputType | null
    _sum: OffreEmploiSumAggregateOutputType | null
    _min: OffreEmploiMinAggregateOutputType | null
    _max: OffreEmploiMaxAggregateOutputType | null
  }

  export type OffreEmploiAvgAggregateOutputType = {
    idOffreEmploi: number | null
    entrepriseId: number | null
    salaireOffreEmploi: number | null
  }

  export type OffreEmploiSumAggregateOutputType = {
    idOffreEmploi: number | null
    entrepriseId: number | null
    salaireOffreEmploi: number | null
  }

  export type OffreEmploiMinAggregateOutputType = {
    idOffreEmploi: number | null
    entrepriseId: number | null
    titreOffreEmploi: string | null
    descripOffreEmploi: string | null
    localiOffreEmploi: string | null
    datePubliOffreEmploi: Date | null
    datelimitOffreEmploi: Date | null
    salaireOffreEmploi: number | null
    typeContOffreEmploi: string | null
    experienceOffreEmploi: string | null
    nivEtuOffreEmploi: string | null
    competencesOffreEmploi: string | null
  }

  export type OffreEmploiMaxAggregateOutputType = {
    idOffreEmploi: number | null
    entrepriseId: number | null
    titreOffreEmploi: string | null
    descripOffreEmploi: string | null
    localiOffreEmploi: string | null
    datePubliOffreEmploi: Date | null
    datelimitOffreEmploi: Date | null
    salaireOffreEmploi: number | null
    typeContOffreEmploi: string | null
    experienceOffreEmploi: string | null
    nivEtuOffreEmploi: string | null
    competencesOffreEmploi: string | null
  }

  export type OffreEmploiCountAggregateOutputType = {
    idOffreEmploi: number
    entrepriseId: number
    titreOffreEmploi: number
    descripOffreEmploi: number
    localiOffreEmploi: number
    datePubliOffreEmploi: number
    datelimitOffreEmploi: number
    salaireOffreEmploi: number
    typeContOffreEmploi: number
    experienceOffreEmploi: number
    nivEtuOffreEmploi: number
    competencesOffreEmploi: number
    _all: number
  }


  export type OffreEmploiAvgAggregateInputType = {
    idOffreEmploi?: true
    entrepriseId?: true
    salaireOffreEmploi?: true
  }

  export type OffreEmploiSumAggregateInputType = {
    idOffreEmploi?: true
    entrepriseId?: true
    salaireOffreEmploi?: true
  }

  export type OffreEmploiMinAggregateInputType = {
    idOffreEmploi?: true
    entrepriseId?: true
    titreOffreEmploi?: true
    descripOffreEmploi?: true
    localiOffreEmploi?: true
    datePubliOffreEmploi?: true
    datelimitOffreEmploi?: true
    salaireOffreEmploi?: true
    typeContOffreEmploi?: true
    experienceOffreEmploi?: true
    nivEtuOffreEmploi?: true
    competencesOffreEmploi?: true
  }

  export type OffreEmploiMaxAggregateInputType = {
    idOffreEmploi?: true
    entrepriseId?: true
    titreOffreEmploi?: true
    descripOffreEmploi?: true
    localiOffreEmploi?: true
    datePubliOffreEmploi?: true
    datelimitOffreEmploi?: true
    salaireOffreEmploi?: true
    typeContOffreEmploi?: true
    experienceOffreEmploi?: true
    nivEtuOffreEmploi?: true
    competencesOffreEmploi?: true
  }

  export type OffreEmploiCountAggregateInputType = {
    idOffreEmploi?: true
    entrepriseId?: true
    titreOffreEmploi?: true
    descripOffreEmploi?: true
    localiOffreEmploi?: true
    datePubliOffreEmploi?: true
    datelimitOffreEmploi?: true
    salaireOffreEmploi?: true
    typeContOffreEmploi?: true
    experienceOffreEmploi?: true
    nivEtuOffreEmploi?: true
    competencesOffreEmploi?: true
    _all?: true
  }

  export type OffreEmploiAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OffreEmploi to aggregate.
     */
    where?: OffreEmploiWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OffreEmplois to fetch.
     */
    orderBy?: OffreEmploiOrderByWithRelationInput | OffreEmploiOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OffreEmploiWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OffreEmplois from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OffreEmplois.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OffreEmplois
    **/
    _count?: true | OffreEmploiCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OffreEmploiAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OffreEmploiSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OffreEmploiMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OffreEmploiMaxAggregateInputType
  }

  export type GetOffreEmploiAggregateType<T extends OffreEmploiAggregateArgs> = {
        [P in keyof T & keyof AggregateOffreEmploi]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOffreEmploi[P]>
      : GetScalarType<T[P], AggregateOffreEmploi[P]>
  }




  export type OffreEmploiGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OffreEmploiWhereInput
    orderBy?: OffreEmploiOrderByWithAggregationInput | OffreEmploiOrderByWithAggregationInput[]
    by: OffreEmploiScalarFieldEnum[] | OffreEmploiScalarFieldEnum
    having?: OffreEmploiScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OffreEmploiCountAggregateInputType | true
    _avg?: OffreEmploiAvgAggregateInputType
    _sum?: OffreEmploiSumAggregateInputType
    _min?: OffreEmploiMinAggregateInputType
    _max?: OffreEmploiMaxAggregateInputType
  }

  export type OffreEmploiGroupByOutputType = {
    idOffreEmploi: number
    entrepriseId: number
    titreOffreEmploi: string
    descripOffreEmploi: string
    localiOffreEmploi: string
    datePubliOffreEmploi: Date
    datelimitOffreEmploi: Date
    salaireOffreEmploi: number
    typeContOffreEmploi: string
    experienceOffreEmploi: string
    nivEtuOffreEmploi: string
    competencesOffreEmploi: string
    _count: OffreEmploiCountAggregateOutputType | null
    _avg: OffreEmploiAvgAggregateOutputType | null
    _sum: OffreEmploiSumAggregateOutputType | null
    _min: OffreEmploiMinAggregateOutputType | null
    _max: OffreEmploiMaxAggregateOutputType | null
  }

  type GetOffreEmploiGroupByPayload<T extends OffreEmploiGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OffreEmploiGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OffreEmploiGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OffreEmploiGroupByOutputType[P]>
            : GetScalarType<T[P], OffreEmploiGroupByOutputType[P]>
        }
      >
    >


  export type OffreEmploiSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idOffreEmploi?: boolean
    entrepriseId?: boolean
    titreOffreEmploi?: boolean
    descripOffreEmploi?: boolean
    localiOffreEmploi?: boolean
    datePubliOffreEmploi?: boolean
    datelimitOffreEmploi?: boolean
    salaireOffreEmploi?: boolean
    typeContOffreEmploi?: boolean
    experienceOffreEmploi?: boolean
    nivEtuOffreEmploi?: boolean
    competencesOffreEmploi?: boolean
    entreprise?: boolean | EntrepriseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["offreEmploi"]>

  export type OffreEmploiSelectScalar = {
    idOffreEmploi?: boolean
    entrepriseId?: boolean
    titreOffreEmploi?: boolean
    descripOffreEmploi?: boolean
    localiOffreEmploi?: boolean
    datePubliOffreEmploi?: boolean
    datelimitOffreEmploi?: boolean
    salaireOffreEmploi?: boolean
    typeContOffreEmploi?: boolean
    experienceOffreEmploi?: boolean
    nivEtuOffreEmploi?: boolean
    competencesOffreEmploi?: boolean
  }

  export type OffreEmploiInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    entreprise?: boolean | EntrepriseDefaultArgs<ExtArgs>
  }


  export type $OffreEmploiPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OffreEmploi"
    objects: {
      entreprise: Prisma.$EntreprisePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      idOffreEmploi: number
      entrepriseId: number
      titreOffreEmploi: string
      descripOffreEmploi: string
      localiOffreEmploi: string
      datePubliOffreEmploi: Date
      datelimitOffreEmploi: Date
      salaireOffreEmploi: number
      typeContOffreEmploi: string
      experienceOffreEmploi: string
      nivEtuOffreEmploi: string
      competencesOffreEmploi: string
    }, ExtArgs["result"]["offreEmploi"]>
    composites: {}
  }


  type OffreEmploiGetPayload<S extends boolean | null | undefined | OffreEmploiDefaultArgs> = $Result.GetResult<Prisma.$OffreEmploiPayload, S>

  type OffreEmploiCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<OffreEmploiFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: OffreEmploiCountAggregateInputType | true
    }

  export interface OffreEmploiDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OffreEmploi'], meta: { name: 'OffreEmploi' } }
    /**
     * Find zero or one OffreEmploi that matches the filter.
     * @param {OffreEmploiFindUniqueArgs} args - Arguments to find a OffreEmploi
     * @example
     * // Get one OffreEmploi
     * const offreEmploi = await prisma.offreEmploi.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends OffreEmploiFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, OffreEmploiFindUniqueArgs<ExtArgs>>
    ): Prisma__OffreEmploiClient<$Result.GetResult<Prisma.$OffreEmploiPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one OffreEmploi that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {OffreEmploiFindUniqueOrThrowArgs} args - Arguments to find a OffreEmploi
     * @example
     * // Get one OffreEmploi
     * const offreEmploi = await prisma.offreEmploi.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends OffreEmploiFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, OffreEmploiFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__OffreEmploiClient<$Result.GetResult<Prisma.$OffreEmploiPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first OffreEmploi that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OffreEmploiFindFirstArgs} args - Arguments to find a OffreEmploi
     * @example
     * // Get one OffreEmploi
     * const offreEmploi = await prisma.offreEmploi.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends OffreEmploiFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, OffreEmploiFindFirstArgs<ExtArgs>>
    ): Prisma__OffreEmploiClient<$Result.GetResult<Prisma.$OffreEmploiPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first OffreEmploi that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OffreEmploiFindFirstOrThrowArgs} args - Arguments to find a OffreEmploi
     * @example
     * // Get one OffreEmploi
     * const offreEmploi = await prisma.offreEmploi.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends OffreEmploiFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, OffreEmploiFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__OffreEmploiClient<$Result.GetResult<Prisma.$OffreEmploiPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more OffreEmplois that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OffreEmploiFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OffreEmplois
     * const offreEmplois = await prisma.offreEmploi.findMany()
     * 
     * // Get first 10 OffreEmplois
     * const offreEmplois = await prisma.offreEmploi.findMany({ take: 10 })
     * 
     * // Only select the `idOffreEmploi`
     * const offreEmploiWithIdOffreEmploiOnly = await prisma.offreEmploi.findMany({ select: { idOffreEmploi: true } })
     * 
    **/
    findMany<T extends OffreEmploiFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OffreEmploiFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OffreEmploiPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a OffreEmploi.
     * @param {OffreEmploiCreateArgs} args - Arguments to create a OffreEmploi.
     * @example
     * // Create one OffreEmploi
     * const OffreEmploi = await prisma.offreEmploi.create({
     *   data: {
     *     // ... data to create a OffreEmploi
     *   }
     * })
     * 
    **/
    create<T extends OffreEmploiCreateArgs<ExtArgs>>(
      args: SelectSubset<T, OffreEmploiCreateArgs<ExtArgs>>
    ): Prisma__OffreEmploiClient<$Result.GetResult<Prisma.$OffreEmploiPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many OffreEmplois.
     *     @param {OffreEmploiCreateManyArgs} args - Arguments to create many OffreEmplois.
     *     @example
     *     // Create many OffreEmplois
     *     const offreEmploi = await prisma.offreEmploi.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends OffreEmploiCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OffreEmploiCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a OffreEmploi.
     * @param {OffreEmploiDeleteArgs} args - Arguments to delete one OffreEmploi.
     * @example
     * // Delete one OffreEmploi
     * const OffreEmploi = await prisma.offreEmploi.delete({
     *   where: {
     *     // ... filter to delete one OffreEmploi
     *   }
     * })
     * 
    **/
    delete<T extends OffreEmploiDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, OffreEmploiDeleteArgs<ExtArgs>>
    ): Prisma__OffreEmploiClient<$Result.GetResult<Prisma.$OffreEmploiPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one OffreEmploi.
     * @param {OffreEmploiUpdateArgs} args - Arguments to update one OffreEmploi.
     * @example
     * // Update one OffreEmploi
     * const offreEmploi = await prisma.offreEmploi.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends OffreEmploiUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, OffreEmploiUpdateArgs<ExtArgs>>
    ): Prisma__OffreEmploiClient<$Result.GetResult<Prisma.$OffreEmploiPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more OffreEmplois.
     * @param {OffreEmploiDeleteManyArgs} args - Arguments to filter OffreEmplois to delete.
     * @example
     * // Delete a few OffreEmplois
     * const { count } = await prisma.offreEmploi.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends OffreEmploiDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OffreEmploiDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OffreEmplois.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OffreEmploiUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OffreEmplois
     * const offreEmploi = await prisma.offreEmploi.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends OffreEmploiUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, OffreEmploiUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one OffreEmploi.
     * @param {OffreEmploiUpsertArgs} args - Arguments to update or create a OffreEmploi.
     * @example
     * // Update or create a OffreEmploi
     * const offreEmploi = await prisma.offreEmploi.upsert({
     *   create: {
     *     // ... data to create a OffreEmploi
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OffreEmploi we want to update
     *   }
     * })
    **/
    upsert<T extends OffreEmploiUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, OffreEmploiUpsertArgs<ExtArgs>>
    ): Prisma__OffreEmploiClient<$Result.GetResult<Prisma.$OffreEmploiPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of OffreEmplois.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OffreEmploiCountArgs} args - Arguments to filter OffreEmplois to count.
     * @example
     * // Count the number of OffreEmplois
     * const count = await prisma.offreEmploi.count({
     *   where: {
     *     // ... the filter for the OffreEmplois we want to count
     *   }
     * })
    **/
    count<T extends OffreEmploiCountArgs>(
      args?: Subset<T, OffreEmploiCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OffreEmploiCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OffreEmploi.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OffreEmploiAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OffreEmploiAggregateArgs>(args: Subset<T, OffreEmploiAggregateArgs>): Prisma.PrismaPromise<GetOffreEmploiAggregateType<T>>

    /**
     * Group by OffreEmploi.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OffreEmploiGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OffreEmploiGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OffreEmploiGroupByArgs['orderBy'] }
        : { orderBy?: OffreEmploiGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OffreEmploiGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOffreEmploiGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OffreEmploi model
   */
  readonly fields: OffreEmploiFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OffreEmploi.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OffreEmploiClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    entreprise<T extends EntrepriseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EntrepriseDefaultArgs<ExtArgs>>): Prisma__EntrepriseClient<$Result.GetResult<Prisma.$EntreprisePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the OffreEmploi model
   */ 
  interface OffreEmploiFieldRefs {
    readonly idOffreEmploi: FieldRef<"OffreEmploi", 'Int'>
    readonly entrepriseId: FieldRef<"OffreEmploi", 'Int'>
    readonly titreOffreEmploi: FieldRef<"OffreEmploi", 'String'>
    readonly descripOffreEmploi: FieldRef<"OffreEmploi", 'String'>
    readonly localiOffreEmploi: FieldRef<"OffreEmploi", 'String'>
    readonly datePubliOffreEmploi: FieldRef<"OffreEmploi", 'DateTime'>
    readonly datelimitOffreEmploi: FieldRef<"OffreEmploi", 'DateTime'>
    readonly salaireOffreEmploi: FieldRef<"OffreEmploi", 'Int'>
    readonly typeContOffreEmploi: FieldRef<"OffreEmploi", 'String'>
    readonly experienceOffreEmploi: FieldRef<"OffreEmploi", 'String'>
    readonly nivEtuOffreEmploi: FieldRef<"OffreEmploi", 'String'>
    readonly competencesOffreEmploi: FieldRef<"OffreEmploi", 'String'>
  }
    

  // Custom InputTypes

  /**
   * OffreEmploi findUnique
   */
  export type OffreEmploiFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OffreEmploi
     */
    select?: OffreEmploiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OffreEmploiInclude<ExtArgs> | null
    /**
     * Filter, which OffreEmploi to fetch.
     */
    where: OffreEmploiWhereUniqueInput
  }


  /**
   * OffreEmploi findUniqueOrThrow
   */
  export type OffreEmploiFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OffreEmploi
     */
    select?: OffreEmploiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OffreEmploiInclude<ExtArgs> | null
    /**
     * Filter, which OffreEmploi to fetch.
     */
    where: OffreEmploiWhereUniqueInput
  }


  /**
   * OffreEmploi findFirst
   */
  export type OffreEmploiFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OffreEmploi
     */
    select?: OffreEmploiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OffreEmploiInclude<ExtArgs> | null
    /**
     * Filter, which OffreEmploi to fetch.
     */
    where?: OffreEmploiWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OffreEmplois to fetch.
     */
    orderBy?: OffreEmploiOrderByWithRelationInput | OffreEmploiOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OffreEmplois.
     */
    cursor?: OffreEmploiWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OffreEmplois from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OffreEmplois.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OffreEmplois.
     */
    distinct?: OffreEmploiScalarFieldEnum | OffreEmploiScalarFieldEnum[]
  }


  /**
   * OffreEmploi findFirstOrThrow
   */
  export type OffreEmploiFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OffreEmploi
     */
    select?: OffreEmploiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OffreEmploiInclude<ExtArgs> | null
    /**
     * Filter, which OffreEmploi to fetch.
     */
    where?: OffreEmploiWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OffreEmplois to fetch.
     */
    orderBy?: OffreEmploiOrderByWithRelationInput | OffreEmploiOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OffreEmplois.
     */
    cursor?: OffreEmploiWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OffreEmplois from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OffreEmplois.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OffreEmplois.
     */
    distinct?: OffreEmploiScalarFieldEnum | OffreEmploiScalarFieldEnum[]
  }


  /**
   * OffreEmploi findMany
   */
  export type OffreEmploiFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OffreEmploi
     */
    select?: OffreEmploiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OffreEmploiInclude<ExtArgs> | null
    /**
     * Filter, which OffreEmplois to fetch.
     */
    where?: OffreEmploiWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OffreEmplois to fetch.
     */
    orderBy?: OffreEmploiOrderByWithRelationInput | OffreEmploiOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OffreEmplois.
     */
    cursor?: OffreEmploiWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OffreEmplois from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OffreEmplois.
     */
    skip?: number
    distinct?: OffreEmploiScalarFieldEnum | OffreEmploiScalarFieldEnum[]
  }


  /**
   * OffreEmploi create
   */
  export type OffreEmploiCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OffreEmploi
     */
    select?: OffreEmploiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OffreEmploiInclude<ExtArgs> | null
    /**
     * The data needed to create a OffreEmploi.
     */
    data: XOR<OffreEmploiCreateInput, OffreEmploiUncheckedCreateInput>
  }


  /**
   * OffreEmploi createMany
   */
  export type OffreEmploiCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OffreEmplois.
     */
    data: OffreEmploiCreateManyInput | OffreEmploiCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * OffreEmploi update
   */
  export type OffreEmploiUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OffreEmploi
     */
    select?: OffreEmploiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OffreEmploiInclude<ExtArgs> | null
    /**
     * The data needed to update a OffreEmploi.
     */
    data: XOR<OffreEmploiUpdateInput, OffreEmploiUncheckedUpdateInput>
    /**
     * Choose, which OffreEmploi to update.
     */
    where: OffreEmploiWhereUniqueInput
  }


  /**
   * OffreEmploi updateMany
   */
  export type OffreEmploiUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OffreEmplois.
     */
    data: XOR<OffreEmploiUpdateManyMutationInput, OffreEmploiUncheckedUpdateManyInput>
    /**
     * Filter which OffreEmplois to update
     */
    where?: OffreEmploiWhereInput
  }


  /**
   * OffreEmploi upsert
   */
  export type OffreEmploiUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OffreEmploi
     */
    select?: OffreEmploiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OffreEmploiInclude<ExtArgs> | null
    /**
     * The filter to search for the OffreEmploi to update in case it exists.
     */
    where: OffreEmploiWhereUniqueInput
    /**
     * In case the OffreEmploi found by the `where` argument doesn't exist, create a new OffreEmploi with this data.
     */
    create: XOR<OffreEmploiCreateInput, OffreEmploiUncheckedCreateInput>
    /**
     * In case the OffreEmploi was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OffreEmploiUpdateInput, OffreEmploiUncheckedUpdateInput>
  }


  /**
   * OffreEmploi delete
   */
  export type OffreEmploiDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OffreEmploi
     */
    select?: OffreEmploiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OffreEmploiInclude<ExtArgs> | null
    /**
     * Filter which OffreEmploi to delete.
     */
    where: OffreEmploiWhereUniqueInput
  }


  /**
   * OffreEmploi deleteMany
   */
  export type OffreEmploiDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OffreEmplois to delete
     */
    where?: OffreEmploiWhereInput
  }


  /**
   * OffreEmploi without action
   */
  export type OffreEmploiDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OffreEmploi
     */
    select?: OffreEmploiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OffreEmploiInclude<ExtArgs> | null
  }



  /**
   * Model Projet
   */

  export type AggregateProjet = {
    _count: ProjetCountAggregateOutputType | null
    _avg: ProjetAvgAggregateOutputType | null
    _sum: ProjetSumAggregateOutputType | null
    _min: ProjetMinAggregateOutputType | null
    _max: ProjetMaxAggregateOutputType | null
  }

  export type ProjetAvgAggregateOutputType = {
    idProjet: number | null
    entrepriseId: number | null
    BudgetProjet: number | null
    DelaiProjet: number | null
  }

  export type ProjetSumAggregateOutputType = {
    idProjet: number | null
    entrepriseId: number | null
    BudgetProjet: number | null
    DelaiProjet: number | null
  }

  export type ProjetMinAggregateOutputType = {
    idProjet: number | null
    entrepriseId: number | null
    titreProjet: string | null
    descripProjet: string | null
    BudgetProjet: number | null
    DelaiProjet: number | null
  }

  export type ProjetMaxAggregateOutputType = {
    idProjet: number | null
    entrepriseId: number | null
    titreProjet: string | null
    descripProjet: string | null
    BudgetProjet: number | null
    DelaiProjet: number | null
  }

  export type ProjetCountAggregateOutputType = {
    idProjet: number
    entrepriseId: number
    titreProjet: number
    descripProjet: number
    BudgetProjet: number
    DelaiProjet: number
    _all: number
  }


  export type ProjetAvgAggregateInputType = {
    idProjet?: true
    entrepriseId?: true
    BudgetProjet?: true
    DelaiProjet?: true
  }

  export type ProjetSumAggregateInputType = {
    idProjet?: true
    entrepriseId?: true
    BudgetProjet?: true
    DelaiProjet?: true
  }

  export type ProjetMinAggregateInputType = {
    idProjet?: true
    entrepriseId?: true
    titreProjet?: true
    descripProjet?: true
    BudgetProjet?: true
    DelaiProjet?: true
  }

  export type ProjetMaxAggregateInputType = {
    idProjet?: true
    entrepriseId?: true
    titreProjet?: true
    descripProjet?: true
    BudgetProjet?: true
    DelaiProjet?: true
  }

  export type ProjetCountAggregateInputType = {
    idProjet?: true
    entrepriseId?: true
    titreProjet?: true
    descripProjet?: true
    BudgetProjet?: true
    DelaiProjet?: true
    _all?: true
  }

  export type ProjetAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Projet to aggregate.
     */
    where?: ProjetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projets to fetch.
     */
    orderBy?: ProjetOrderByWithRelationInput | ProjetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProjetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Projets
    **/
    _count?: true | ProjetCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProjetAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProjetSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjetMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjetMaxAggregateInputType
  }

  export type GetProjetAggregateType<T extends ProjetAggregateArgs> = {
        [P in keyof T & keyof AggregateProjet]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProjet[P]>
      : GetScalarType<T[P], AggregateProjet[P]>
  }




  export type ProjetGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjetWhereInput
    orderBy?: ProjetOrderByWithAggregationInput | ProjetOrderByWithAggregationInput[]
    by: ProjetScalarFieldEnum[] | ProjetScalarFieldEnum
    having?: ProjetScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjetCountAggregateInputType | true
    _avg?: ProjetAvgAggregateInputType
    _sum?: ProjetSumAggregateInputType
    _min?: ProjetMinAggregateInputType
    _max?: ProjetMaxAggregateInputType
  }

  export type ProjetGroupByOutputType = {
    idProjet: number
    entrepriseId: number
    titreProjet: string
    descripProjet: string
    BudgetProjet: number
    DelaiProjet: number
    _count: ProjetCountAggregateOutputType | null
    _avg: ProjetAvgAggregateOutputType | null
    _sum: ProjetSumAggregateOutputType | null
    _min: ProjetMinAggregateOutputType | null
    _max: ProjetMaxAggregateOutputType | null
  }

  type GetProjetGroupByPayload<T extends ProjetGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProjetGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjetGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjetGroupByOutputType[P]>
            : GetScalarType<T[P], ProjetGroupByOutputType[P]>
        }
      >
    >


  export type ProjetSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idProjet?: boolean
    entrepriseId?: boolean
    titreProjet?: boolean
    descripProjet?: boolean
    BudgetProjet?: boolean
    DelaiProjet?: boolean
    entreprise?: boolean | EntrepriseDefaultArgs<ExtArgs>
    propositions?: boolean | Projet$propositionsArgs<ExtArgs>
    _count?: boolean | ProjetCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["projet"]>

  export type ProjetSelectScalar = {
    idProjet?: boolean
    entrepriseId?: boolean
    titreProjet?: boolean
    descripProjet?: boolean
    BudgetProjet?: boolean
    DelaiProjet?: boolean
  }

  export type ProjetInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    entreprise?: boolean | EntrepriseDefaultArgs<ExtArgs>
    propositions?: boolean | Projet$propositionsArgs<ExtArgs>
    _count?: boolean | ProjetCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ProjetPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Projet"
    objects: {
      entreprise: Prisma.$EntreprisePayload<ExtArgs>
      propositions: Prisma.$PropositionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      idProjet: number
      entrepriseId: number
      titreProjet: string
      descripProjet: string
      BudgetProjet: number
      DelaiProjet: number
    }, ExtArgs["result"]["projet"]>
    composites: {}
  }


  type ProjetGetPayload<S extends boolean | null | undefined | ProjetDefaultArgs> = $Result.GetResult<Prisma.$ProjetPayload, S>

  type ProjetCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProjetFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: ProjetCountAggregateInputType | true
    }

  export interface ProjetDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Projet'], meta: { name: 'Projet' } }
    /**
     * Find zero or one Projet that matches the filter.
     * @param {ProjetFindUniqueArgs} args - Arguments to find a Projet
     * @example
     * // Get one Projet
     * const projet = await prisma.projet.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProjetFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ProjetFindUniqueArgs<ExtArgs>>
    ): Prisma__ProjetClient<$Result.GetResult<Prisma.$ProjetPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Projet that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProjetFindUniqueOrThrowArgs} args - Arguments to find a Projet
     * @example
     * // Get one Projet
     * const projet = await prisma.projet.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProjetFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProjetFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ProjetClient<$Result.GetResult<Prisma.$ProjetPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Projet that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjetFindFirstArgs} args - Arguments to find a Projet
     * @example
     * // Get one Projet
     * const projet = await prisma.projet.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProjetFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ProjetFindFirstArgs<ExtArgs>>
    ): Prisma__ProjetClient<$Result.GetResult<Prisma.$ProjetPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Projet that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjetFindFirstOrThrowArgs} args - Arguments to find a Projet
     * @example
     * // Get one Projet
     * const projet = await prisma.projet.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProjetFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProjetFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ProjetClient<$Result.GetResult<Prisma.$ProjetPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Projets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjetFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Projets
     * const projets = await prisma.projet.findMany()
     * 
     * // Get first 10 Projets
     * const projets = await prisma.projet.findMany({ take: 10 })
     * 
     * // Only select the `idProjet`
     * const projetWithIdProjetOnly = await prisma.projet.findMany({ select: { idProjet: true } })
     * 
    **/
    findMany<T extends ProjetFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProjetFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjetPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Projet.
     * @param {ProjetCreateArgs} args - Arguments to create a Projet.
     * @example
     * // Create one Projet
     * const Projet = await prisma.projet.create({
     *   data: {
     *     // ... data to create a Projet
     *   }
     * })
     * 
    **/
    create<T extends ProjetCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ProjetCreateArgs<ExtArgs>>
    ): Prisma__ProjetClient<$Result.GetResult<Prisma.$ProjetPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Projets.
     *     @param {ProjetCreateManyArgs} args - Arguments to create many Projets.
     *     @example
     *     // Create many Projets
     *     const projet = await prisma.projet.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProjetCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProjetCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Projet.
     * @param {ProjetDeleteArgs} args - Arguments to delete one Projet.
     * @example
     * // Delete one Projet
     * const Projet = await prisma.projet.delete({
     *   where: {
     *     // ... filter to delete one Projet
     *   }
     * })
     * 
    **/
    delete<T extends ProjetDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ProjetDeleteArgs<ExtArgs>>
    ): Prisma__ProjetClient<$Result.GetResult<Prisma.$ProjetPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Projet.
     * @param {ProjetUpdateArgs} args - Arguments to update one Projet.
     * @example
     * // Update one Projet
     * const projet = await prisma.projet.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProjetUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ProjetUpdateArgs<ExtArgs>>
    ): Prisma__ProjetClient<$Result.GetResult<Prisma.$ProjetPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Projets.
     * @param {ProjetDeleteManyArgs} args - Arguments to filter Projets to delete.
     * @example
     * // Delete a few Projets
     * const { count } = await prisma.projet.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProjetDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProjetDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Projets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjetUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Projets
     * const projet = await prisma.projet.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProjetUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ProjetUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Projet.
     * @param {ProjetUpsertArgs} args - Arguments to update or create a Projet.
     * @example
     * // Update or create a Projet
     * const projet = await prisma.projet.upsert({
     *   create: {
     *     // ... data to create a Projet
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Projet we want to update
     *   }
     * })
    **/
    upsert<T extends ProjetUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ProjetUpsertArgs<ExtArgs>>
    ): Prisma__ProjetClient<$Result.GetResult<Prisma.$ProjetPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Projets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjetCountArgs} args - Arguments to filter Projets to count.
     * @example
     * // Count the number of Projets
     * const count = await prisma.projet.count({
     *   where: {
     *     // ... the filter for the Projets we want to count
     *   }
     * })
    **/
    count<T extends ProjetCountArgs>(
      args?: Subset<T, ProjetCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjetCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Projet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjetAggregateArgs>(args: Subset<T, ProjetAggregateArgs>): Prisma.PrismaPromise<GetProjetAggregateType<T>>

    /**
     * Group by Projet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjetGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProjetGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProjetGroupByArgs['orderBy'] }
        : { orderBy?: ProjetGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProjetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Projet model
   */
  readonly fields: ProjetFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Projet.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProjetClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    entreprise<T extends EntrepriseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EntrepriseDefaultArgs<ExtArgs>>): Prisma__EntrepriseClient<$Result.GetResult<Prisma.$EntreprisePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    propositions<T extends Projet$propositionsArgs<ExtArgs> = {}>(args?: Subset<T, Projet$propositionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PropositionPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Projet model
   */ 
  interface ProjetFieldRefs {
    readonly idProjet: FieldRef<"Projet", 'Int'>
    readonly entrepriseId: FieldRef<"Projet", 'Int'>
    readonly titreProjet: FieldRef<"Projet", 'String'>
    readonly descripProjet: FieldRef<"Projet", 'String'>
    readonly BudgetProjet: FieldRef<"Projet", 'Int'>
    readonly DelaiProjet: FieldRef<"Projet", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Projet findUnique
   */
  export type ProjetFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projet
     */
    select?: ProjetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjetInclude<ExtArgs> | null
    /**
     * Filter, which Projet to fetch.
     */
    where: ProjetWhereUniqueInput
  }


  /**
   * Projet findUniqueOrThrow
   */
  export type ProjetFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projet
     */
    select?: ProjetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjetInclude<ExtArgs> | null
    /**
     * Filter, which Projet to fetch.
     */
    where: ProjetWhereUniqueInput
  }


  /**
   * Projet findFirst
   */
  export type ProjetFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projet
     */
    select?: ProjetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjetInclude<ExtArgs> | null
    /**
     * Filter, which Projet to fetch.
     */
    where?: ProjetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projets to fetch.
     */
    orderBy?: ProjetOrderByWithRelationInput | ProjetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projets.
     */
    cursor?: ProjetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projets.
     */
    distinct?: ProjetScalarFieldEnum | ProjetScalarFieldEnum[]
  }


  /**
   * Projet findFirstOrThrow
   */
  export type ProjetFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projet
     */
    select?: ProjetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjetInclude<ExtArgs> | null
    /**
     * Filter, which Projet to fetch.
     */
    where?: ProjetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projets to fetch.
     */
    orderBy?: ProjetOrderByWithRelationInput | ProjetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projets.
     */
    cursor?: ProjetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projets.
     */
    distinct?: ProjetScalarFieldEnum | ProjetScalarFieldEnum[]
  }


  /**
   * Projet findMany
   */
  export type ProjetFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projet
     */
    select?: ProjetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjetInclude<ExtArgs> | null
    /**
     * Filter, which Projets to fetch.
     */
    where?: ProjetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projets to fetch.
     */
    orderBy?: ProjetOrderByWithRelationInput | ProjetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Projets.
     */
    cursor?: ProjetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projets.
     */
    skip?: number
    distinct?: ProjetScalarFieldEnum | ProjetScalarFieldEnum[]
  }


  /**
   * Projet create
   */
  export type ProjetCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projet
     */
    select?: ProjetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjetInclude<ExtArgs> | null
    /**
     * The data needed to create a Projet.
     */
    data: XOR<ProjetCreateInput, ProjetUncheckedCreateInput>
  }


  /**
   * Projet createMany
   */
  export type ProjetCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Projets.
     */
    data: ProjetCreateManyInput | ProjetCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Projet update
   */
  export type ProjetUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projet
     */
    select?: ProjetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjetInclude<ExtArgs> | null
    /**
     * The data needed to update a Projet.
     */
    data: XOR<ProjetUpdateInput, ProjetUncheckedUpdateInput>
    /**
     * Choose, which Projet to update.
     */
    where: ProjetWhereUniqueInput
  }


  /**
   * Projet updateMany
   */
  export type ProjetUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Projets.
     */
    data: XOR<ProjetUpdateManyMutationInput, ProjetUncheckedUpdateManyInput>
    /**
     * Filter which Projets to update
     */
    where?: ProjetWhereInput
  }


  /**
   * Projet upsert
   */
  export type ProjetUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projet
     */
    select?: ProjetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjetInclude<ExtArgs> | null
    /**
     * The filter to search for the Projet to update in case it exists.
     */
    where: ProjetWhereUniqueInput
    /**
     * In case the Projet found by the `where` argument doesn't exist, create a new Projet with this data.
     */
    create: XOR<ProjetCreateInput, ProjetUncheckedCreateInput>
    /**
     * In case the Projet was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProjetUpdateInput, ProjetUncheckedUpdateInput>
  }


  /**
   * Projet delete
   */
  export type ProjetDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projet
     */
    select?: ProjetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjetInclude<ExtArgs> | null
    /**
     * Filter which Projet to delete.
     */
    where: ProjetWhereUniqueInput
  }


  /**
   * Projet deleteMany
   */
  export type ProjetDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Projets to delete
     */
    where?: ProjetWhereInput
  }


  /**
   * Projet.propositions
   */
  export type Projet$propositionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposition
     */
    select?: PropositionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PropositionInclude<ExtArgs> | null
    where?: PropositionWhereInput
    orderBy?: PropositionOrderByWithRelationInput | PropositionOrderByWithRelationInput[]
    cursor?: PropositionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PropositionScalarFieldEnum | PropositionScalarFieldEnum[]
  }


  /**
   * Projet without action
   */
  export type ProjetDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projet
     */
    select?: ProjetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjetInclude<ExtArgs> | null
  }



  /**
   * Model Proposition
   */

  export type AggregateProposition = {
    _count: PropositionCountAggregateOutputType | null
    _avg: PropositionAvgAggregateOutputType | null
    _sum: PropositionSumAggregateOutputType | null
    _min: PropositionMinAggregateOutputType | null
    _max: PropositionMaxAggregateOutputType | null
  }

  export type PropositionAvgAggregateOutputType = {
    idProposition: number | null
    projetId: number | null
    freelancerId: number | null
    delaiProposition: number | null
    coutProposition: number | null
  }

  export type PropositionSumAggregateOutputType = {
    idProposition: number | null
    projetId: number | null
    freelancerId: number | null
    delaiProposition: number | null
    coutProposition: number | null
  }

  export type PropositionMinAggregateOutputType = {
    idProposition: number | null
    projetId: number | null
    freelancerId: number | null
    delaiProposition: number | null
    descripProposition: string | null
    coutProposition: number | null
    competenceProposition: string | null
  }

  export type PropositionMaxAggregateOutputType = {
    idProposition: number | null
    projetId: number | null
    freelancerId: number | null
    delaiProposition: number | null
    descripProposition: string | null
    coutProposition: number | null
    competenceProposition: string | null
  }

  export type PropositionCountAggregateOutputType = {
    idProposition: number
    projetId: number
    freelancerId: number
    delaiProposition: number
    descripProposition: number
    coutProposition: number
    competenceProposition: number
    _all: number
  }


  export type PropositionAvgAggregateInputType = {
    idProposition?: true
    projetId?: true
    freelancerId?: true
    delaiProposition?: true
    coutProposition?: true
  }

  export type PropositionSumAggregateInputType = {
    idProposition?: true
    projetId?: true
    freelancerId?: true
    delaiProposition?: true
    coutProposition?: true
  }

  export type PropositionMinAggregateInputType = {
    idProposition?: true
    projetId?: true
    freelancerId?: true
    delaiProposition?: true
    descripProposition?: true
    coutProposition?: true
    competenceProposition?: true
  }

  export type PropositionMaxAggregateInputType = {
    idProposition?: true
    projetId?: true
    freelancerId?: true
    delaiProposition?: true
    descripProposition?: true
    coutProposition?: true
    competenceProposition?: true
  }

  export type PropositionCountAggregateInputType = {
    idProposition?: true
    projetId?: true
    freelancerId?: true
    delaiProposition?: true
    descripProposition?: true
    coutProposition?: true
    competenceProposition?: true
    _all?: true
  }

  export type PropositionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Proposition to aggregate.
     */
    where?: PropositionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Propositions to fetch.
     */
    orderBy?: PropositionOrderByWithRelationInput | PropositionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PropositionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Propositions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Propositions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Propositions
    **/
    _count?: true | PropositionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PropositionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PropositionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PropositionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PropositionMaxAggregateInputType
  }

  export type GetPropositionAggregateType<T extends PropositionAggregateArgs> = {
        [P in keyof T & keyof AggregateProposition]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProposition[P]>
      : GetScalarType<T[P], AggregateProposition[P]>
  }




  export type PropositionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PropositionWhereInput
    orderBy?: PropositionOrderByWithAggregationInput | PropositionOrderByWithAggregationInput[]
    by: PropositionScalarFieldEnum[] | PropositionScalarFieldEnum
    having?: PropositionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PropositionCountAggregateInputType | true
    _avg?: PropositionAvgAggregateInputType
    _sum?: PropositionSumAggregateInputType
    _min?: PropositionMinAggregateInputType
    _max?: PropositionMaxAggregateInputType
  }

  export type PropositionGroupByOutputType = {
    idProposition: number
    projetId: number
    freelancerId: number
    delaiProposition: number
    descripProposition: string
    coutProposition: number
    competenceProposition: string
    _count: PropositionCountAggregateOutputType | null
    _avg: PropositionAvgAggregateOutputType | null
    _sum: PropositionSumAggregateOutputType | null
    _min: PropositionMinAggregateOutputType | null
    _max: PropositionMaxAggregateOutputType | null
  }

  type GetPropositionGroupByPayload<T extends PropositionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PropositionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PropositionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PropositionGroupByOutputType[P]>
            : GetScalarType<T[P], PropositionGroupByOutputType[P]>
        }
      >
    >


  export type PropositionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idProposition?: boolean
    projetId?: boolean
    freelancerId?: boolean
    delaiProposition?: boolean
    descripProposition?: boolean
    coutProposition?: boolean
    competenceProposition?: boolean
    projets?: boolean | ProjetDefaultArgs<ExtArgs>
    freelancer?: boolean | FreelancerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["proposition"]>

  export type PropositionSelectScalar = {
    idProposition?: boolean
    projetId?: boolean
    freelancerId?: boolean
    delaiProposition?: boolean
    descripProposition?: boolean
    coutProposition?: boolean
    competenceProposition?: boolean
  }

  export type PropositionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    projets?: boolean | ProjetDefaultArgs<ExtArgs>
    freelancer?: boolean | FreelancerDefaultArgs<ExtArgs>
  }


  export type $PropositionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Proposition"
    objects: {
      projets: Prisma.$ProjetPayload<ExtArgs>
      freelancer: Prisma.$FreelancerPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      idProposition: number
      projetId: number
      freelancerId: number
      delaiProposition: number
      descripProposition: string
      coutProposition: number
      competenceProposition: string
    }, ExtArgs["result"]["proposition"]>
    composites: {}
  }


  type PropositionGetPayload<S extends boolean | null | undefined | PropositionDefaultArgs> = $Result.GetResult<Prisma.$PropositionPayload, S>

  type PropositionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PropositionFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: PropositionCountAggregateInputType | true
    }

  export interface PropositionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Proposition'], meta: { name: 'Proposition' } }
    /**
     * Find zero or one Proposition that matches the filter.
     * @param {PropositionFindUniqueArgs} args - Arguments to find a Proposition
     * @example
     * // Get one Proposition
     * const proposition = await prisma.proposition.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PropositionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PropositionFindUniqueArgs<ExtArgs>>
    ): Prisma__PropositionClient<$Result.GetResult<Prisma.$PropositionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Proposition that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PropositionFindUniqueOrThrowArgs} args - Arguments to find a Proposition
     * @example
     * // Get one Proposition
     * const proposition = await prisma.proposition.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PropositionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PropositionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PropositionClient<$Result.GetResult<Prisma.$PropositionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Proposition that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropositionFindFirstArgs} args - Arguments to find a Proposition
     * @example
     * // Get one Proposition
     * const proposition = await prisma.proposition.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PropositionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PropositionFindFirstArgs<ExtArgs>>
    ): Prisma__PropositionClient<$Result.GetResult<Prisma.$PropositionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Proposition that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropositionFindFirstOrThrowArgs} args - Arguments to find a Proposition
     * @example
     * // Get one Proposition
     * const proposition = await prisma.proposition.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PropositionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PropositionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PropositionClient<$Result.GetResult<Prisma.$PropositionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Propositions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropositionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Propositions
     * const propositions = await prisma.proposition.findMany()
     * 
     * // Get first 10 Propositions
     * const propositions = await prisma.proposition.findMany({ take: 10 })
     * 
     * // Only select the `idProposition`
     * const propositionWithIdPropositionOnly = await prisma.proposition.findMany({ select: { idProposition: true } })
     * 
    **/
    findMany<T extends PropositionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PropositionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PropositionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Proposition.
     * @param {PropositionCreateArgs} args - Arguments to create a Proposition.
     * @example
     * // Create one Proposition
     * const Proposition = await prisma.proposition.create({
     *   data: {
     *     // ... data to create a Proposition
     *   }
     * })
     * 
    **/
    create<T extends PropositionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PropositionCreateArgs<ExtArgs>>
    ): Prisma__PropositionClient<$Result.GetResult<Prisma.$PropositionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Propositions.
     *     @param {PropositionCreateManyArgs} args - Arguments to create many Propositions.
     *     @example
     *     // Create many Propositions
     *     const proposition = await prisma.proposition.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PropositionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PropositionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Proposition.
     * @param {PropositionDeleteArgs} args - Arguments to delete one Proposition.
     * @example
     * // Delete one Proposition
     * const Proposition = await prisma.proposition.delete({
     *   where: {
     *     // ... filter to delete one Proposition
     *   }
     * })
     * 
    **/
    delete<T extends PropositionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PropositionDeleteArgs<ExtArgs>>
    ): Prisma__PropositionClient<$Result.GetResult<Prisma.$PropositionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Proposition.
     * @param {PropositionUpdateArgs} args - Arguments to update one Proposition.
     * @example
     * // Update one Proposition
     * const proposition = await prisma.proposition.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PropositionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PropositionUpdateArgs<ExtArgs>>
    ): Prisma__PropositionClient<$Result.GetResult<Prisma.$PropositionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Propositions.
     * @param {PropositionDeleteManyArgs} args - Arguments to filter Propositions to delete.
     * @example
     * // Delete a few Propositions
     * const { count } = await prisma.proposition.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PropositionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PropositionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Propositions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropositionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Propositions
     * const proposition = await prisma.proposition.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PropositionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PropositionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Proposition.
     * @param {PropositionUpsertArgs} args - Arguments to update or create a Proposition.
     * @example
     * // Update or create a Proposition
     * const proposition = await prisma.proposition.upsert({
     *   create: {
     *     // ... data to create a Proposition
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Proposition we want to update
     *   }
     * })
    **/
    upsert<T extends PropositionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PropositionUpsertArgs<ExtArgs>>
    ): Prisma__PropositionClient<$Result.GetResult<Prisma.$PropositionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Propositions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropositionCountArgs} args - Arguments to filter Propositions to count.
     * @example
     * // Count the number of Propositions
     * const count = await prisma.proposition.count({
     *   where: {
     *     // ... the filter for the Propositions we want to count
     *   }
     * })
    **/
    count<T extends PropositionCountArgs>(
      args?: Subset<T, PropositionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PropositionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Proposition.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropositionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PropositionAggregateArgs>(args: Subset<T, PropositionAggregateArgs>): Prisma.PrismaPromise<GetPropositionAggregateType<T>>

    /**
     * Group by Proposition.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropositionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PropositionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PropositionGroupByArgs['orderBy'] }
        : { orderBy?: PropositionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PropositionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPropositionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Proposition model
   */
  readonly fields: PropositionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Proposition.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PropositionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    projets<T extends ProjetDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjetDefaultArgs<ExtArgs>>): Prisma__ProjetClient<$Result.GetResult<Prisma.$ProjetPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    freelancer<T extends FreelancerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FreelancerDefaultArgs<ExtArgs>>): Prisma__FreelancerClient<$Result.GetResult<Prisma.$FreelancerPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Proposition model
   */ 
  interface PropositionFieldRefs {
    readonly idProposition: FieldRef<"Proposition", 'Int'>
    readonly projetId: FieldRef<"Proposition", 'Int'>
    readonly freelancerId: FieldRef<"Proposition", 'Int'>
    readonly delaiProposition: FieldRef<"Proposition", 'Int'>
    readonly descripProposition: FieldRef<"Proposition", 'String'>
    readonly coutProposition: FieldRef<"Proposition", 'Int'>
    readonly competenceProposition: FieldRef<"Proposition", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Proposition findUnique
   */
  export type PropositionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposition
     */
    select?: PropositionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PropositionInclude<ExtArgs> | null
    /**
     * Filter, which Proposition to fetch.
     */
    where: PropositionWhereUniqueInput
  }


  /**
   * Proposition findUniqueOrThrow
   */
  export type PropositionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposition
     */
    select?: PropositionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PropositionInclude<ExtArgs> | null
    /**
     * Filter, which Proposition to fetch.
     */
    where: PropositionWhereUniqueInput
  }


  /**
   * Proposition findFirst
   */
  export type PropositionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposition
     */
    select?: PropositionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PropositionInclude<ExtArgs> | null
    /**
     * Filter, which Proposition to fetch.
     */
    where?: PropositionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Propositions to fetch.
     */
    orderBy?: PropositionOrderByWithRelationInput | PropositionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Propositions.
     */
    cursor?: PropositionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Propositions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Propositions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Propositions.
     */
    distinct?: PropositionScalarFieldEnum | PropositionScalarFieldEnum[]
  }


  /**
   * Proposition findFirstOrThrow
   */
  export type PropositionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposition
     */
    select?: PropositionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PropositionInclude<ExtArgs> | null
    /**
     * Filter, which Proposition to fetch.
     */
    where?: PropositionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Propositions to fetch.
     */
    orderBy?: PropositionOrderByWithRelationInput | PropositionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Propositions.
     */
    cursor?: PropositionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Propositions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Propositions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Propositions.
     */
    distinct?: PropositionScalarFieldEnum | PropositionScalarFieldEnum[]
  }


  /**
   * Proposition findMany
   */
  export type PropositionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposition
     */
    select?: PropositionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PropositionInclude<ExtArgs> | null
    /**
     * Filter, which Propositions to fetch.
     */
    where?: PropositionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Propositions to fetch.
     */
    orderBy?: PropositionOrderByWithRelationInput | PropositionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Propositions.
     */
    cursor?: PropositionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Propositions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Propositions.
     */
    skip?: number
    distinct?: PropositionScalarFieldEnum | PropositionScalarFieldEnum[]
  }


  /**
   * Proposition create
   */
  export type PropositionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposition
     */
    select?: PropositionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PropositionInclude<ExtArgs> | null
    /**
     * The data needed to create a Proposition.
     */
    data: XOR<PropositionCreateInput, PropositionUncheckedCreateInput>
  }


  /**
   * Proposition createMany
   */
  export type PropositionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Propositions.
     */
    data: PropositionCreateManyInput | PropositionCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Proposition update
   */
  export type PropositionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposition
     */
    select?: PropositionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PropositionInclude<ExtArgs> | null
    /**
     * The data needed to update a Proposition.
     */
    data: XOR<PropositionUpdateInput, PropositionUncheckedUpdateInput>
    /**
     * Choose, which Proposition to update.
     */
    where: PropositionWhereUniqueInput
  }


  /**
   * Proposition updateMany
   */
  export type PropositionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Propositions.
     */
    data: XOR<PropositionUpdateManyMutationInput, PropositionUncheckedUpdateManyInput>
    /**
     * Filter which Propositions to update
     */
    where?: PropositionWhereInput
  }


  /**
   * Proposition upsert
   */
  export type PropositionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposition
     */
    select?: PropositionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PropositionInclude<ExtArgs> | null
    /**
     * The filter to search for the Proposition to update in case it exists.
     */
    where: PropositionWhereUniqueInput
    /**
     * In case the Proposition found by the `where` argument doesn't exist, create a new Proposition with this data.
     */
    create: XOR<PropositionCreateInput, PropositionUncheckedCreateInput>
    /**
     * In case the Proposition was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PropositionUpdateInput, PropositionUncheckedUpdateInput>
  }


  /**
   * Proposition delete
   */
  export type PropositionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposition
     */
    select?: PropositionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PropositionInclude<ExtArgs> | null
    /**
     * Filter which Proposition to delete.
     */
    where: PropositionWhereUniqueInput
  }


  /**
   * Proposition deleteMany
   */
  export type PropositionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Propositions to delete
     */
    where?: PropositionWhereInput
  }


  /**
   * Proposition without action
   */
  export type PropositionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposition
     */
    select?: PropositionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PropositionInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AccountScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    refresh_token: 'refresh_token',
    access_token: 'access_token',
    expires_at: 'expires_at',
    token_type: 'token_type',
    scope: 'scope',
    id_token: 'id_token',
    session_state: 'session_state'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const AccountVerificationScalarFieldEnum: {
    id: 'id',
    accountType: 'accountType',
    verifiedAt: 'verifiedAt',
    createdAt: 'createdAt',
    verified: 'verified',
    ip: 'ip',
    firstName: 'firstName',
    lastName: 'lastName',
    code: 'code',
    userName: 'userName',
    password: 'password',
    attempt: 'attempt',
    userId: 'userId'
  };

  export type AccountVerificationScalarFieldEnum = (typeof AccountVerificationScalarFieldEnum)[keyof typeof AccountVerificationScalarFieldEnum]


  export const PasswordResetScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    code: 'code',
    attempt: 'attempt',
    ip: 'ip',
    createdAt: 'createdAt',
    codeVerified: 'codeVerified',
    codeVerifiedAt: 'codeVerifiedAt',
    reset: 'reset',
    resetAt: 'resetAt'
  };

  export type PasswordResetScalarFieldEnum = (typeof PasswordResetScalarFieldEnum)[keyof typeof PasswordResetScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    sessionToken: 'sessionToken',
    userId: 'userId',
    expires: 'expires',
    active: 'active'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    email: 'email',
    userName: 'userName',
    phoneNumber: 'phoneNumber',
    passwordHash: 'passwordHash',
    active: 'active',
    createdAt: 'createdAt',
    verifiedAt: 'verifiedAt',
    signupMethod: 'signupMethod',
    image: 'image'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const CandidatScalarFieldEnum: {
    idCandidat: 'idCandidat',
    adresCandidat: 'adresCandidat',
    experienceCandidat: 'experienceCandidat',
    nivEtudesCandidat: 'nivEtudesCandidat',
    competencesCandidat: 'competencesCandidat',
    cVCandidat: 'cVCandidat',
    userId: 'userId'
  };

  export type CandidatScalarFieldEnum = (typeof CandidatScalarFieldEnum)[keyof typeof CandidatScalarFieldEnum]


  export const ContratScalarFieldEnum: {
    idContrat: 'idContrat',
    entrepriseId: 'entrepriseId',
    freelancerId: 'freelancerId',
    titreProjContrat: 'titreProjContrat',
    datDebConrat: 'datDebConrat',
    datFinConrat: 'datFinConrat',
    coutContrat: 'coutContrat',
    descripContrat: 'descripContrat',
    statutContrat: 'statutContrat'
  };

  export type ContratScalarFieldEnum = (typeof ContratScalarFieldEnum)[keyof typeof ContratScalarFieldEnum]


  export const EntrepriseScalarFieldEnum: {
    idEntreprise: 'idEntreprise',
    nomEntreprise: 'nomEntreprise',
    adresEntreprise: 'adresEntreprise',
    contactEntreprise: 'contactEntreprise',
    sectActivEntreprise: 'sectActivEntreprise',
    tailleEntreprise: 'tailleEntreprise',
    logoEntreprise: 'logoEntreprise',
    descripEntreprise: 'descripEntreprise',
    siteWebEntreprise: 'siteWebEntreprise',
    userId: 'userId'
  };

  export type EntrepriseScalarFieldEnum = (typeof EntrepriseScalarFieldEnum)[keyof typeof EntrepriseScalarFieldEnum]


  export const EntretienScalarFieldEnum: {
    idEntretien: 'idEntretien',
    entrepriseId: 'entrepriseId',
    candidatId: 'candidatId',
    dateEntretien: 'dateEntretien',
    adresEntretien: 'adresEntretien',
    recruEntretien: 'recruEntretien',
    typeEntretien: 'typeEntretien',
    descripEntreprise: 'descripEntreprise'
  };

  export type EntretienScalarFieldEnum = (typeof EntretienScalarFieldEnum)[keyof typeof EntretienScalarFieldEnum]


  export const FreelancerScalarFieldEnum: {
    idFreelancer: 'idFreelancer',
    nomFreelancer: 'nomFreelancer',
    prenomFreelancer: 'prenomFreelancer',
    adresFreelancer: 'adresFreelancer',
    TelFreelancer: 'TelFreelancer',
    emailFreelancer: 'emailFreelancer',
    competencesFreelancer: 'competencesFreelancer',
    experienceFreelancer: 'experienceFreelancer',
    portfolioFreelancer: 'portfolioFreelancer'
  };

  export type FreelancerScalarFieldEnum = (typeof FreelancerScalarFieldEnum)[keyof typeof FreelancerScalarFieldEnum]


  export const NoteScalarFieldEnum: {
    idNote: 'idNote',
    entrepriseId: 'entrepriseId',
    candidatId: 'candidatId',
    Note: 'Note',
    commentNote: 'commentNote',
    dateNote: 'dateNote'
  };

  export type NoteScalarFieldEnum = (typeof NoteScalarFieldEnum)[keyof typeof NoteScalarFieldEnum]


  export const OffreEmploiScalarFieldEnum: {
    idOffreEmploi: 'idOffreEmploi',
    entrepriseId: 'entrepriseId',
    titreOffreEmploi: 'titreOffreEmploi',
    descripOffreEmploi: 'descripOffreEmploi',
    localiOffreEmploi: 'localiOffreEmploi',
    datePubliOffreEmploi: 'datePubliOffreEmploi',
    datelimitOffreEmploi: 'datelimitOffreEmploi',
    salaireOffreEmploi: 'salaireOffreEmploi',
    typeContOffreEmploi: 'typeContOffreEmploi',
    experienceOffreEmploi: 'experienceOffreEmploi',
    nivEtuOffreEmploi: 'nivEtuOffreEmploi',
    competencesOffreEmploi: 'competencesOffreEmploi'
  };

  export type OffreEmploiScalarFieldEnum = (typeof OffreEmploiScalarFieldEnum)[keyof typeof OffreEmploiScalarFieldEnum]


  export const ProjetScalarFieldEnum: {
    idProjet: 'idProjet',
    entrepriseId: 'entrepriseId',
    titreProjet: 'titreProjet',
    descripProjet: 'descripProjet',
    BudgetProjet: 'BudgetProjet',
    DelaiProjet: 'DelaiProjet'
  };

  export type ProjetScalarFieldEnum = (typeof ProjetScalarFieldEnum)[keyof typeof ProjetScalarFieldEnum]


  export const PropositionScalarFieldEnum: {
    idProposition: 'idProposition',
    projetId: 'projetId',
    freelancerId: 'freelancerId',
    delaiProposition: 'delaiProposition',
    descripProposition: 'descripProposition',
    coutProposition: 'coutProposition',
    competenceProposition: 'competenceProposition'
  };

  export type PropositionScalarFieldEnum = (typeof PropositionScalarFieldEnum)[keyof typeof PropositionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type AccountWhereInput = {
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    id?: StringFilter<"Account"> | string
    userId?: IntFilter<"Account"> | number
    type?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type AccountOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    refresh_token?: SortOrderInput | SortOrder
    access_token?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    token_type?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    id_token?: SortOrderInput | SortOrder
    session_state?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AccountWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    userId?: IntFilter<"Account"> | number
    type?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type AccountOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    refresh_token?: SortOrderInput | SortOrder
    access_token?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    token_type?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    id_token?: SortOrderInput | SortOrder
    session_state?: SortOrderInput | SortOrder
    _count?: AccountCountOrderByAggregateInput
    _avg?: AccountAvgOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
    _sum?: AccountSumOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    OR?: AccountScalarWhereWithAggregatesInput[]
    NOT?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Account"> | string
    userId?: IntWithAggregatesFilter<"Account"> | number
    type?: StringWithAggregatesFilter<"Account"> | string
    refresh_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    access_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    expires_at?: IntNullableWithAggregatesFilter<"Account"> | number | null
    token_type?: StringNullableWithAggregatesFilter<"Account"> | string | null
    scope?: StringNullableWithAggregatesFilter<"Account"> | string | null
    id_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    session_state?: StringNullableWithAggregatesFilter<"Account"> | string | null
  }

  export type AccountVerificationWhereInput = {
    AND?: AccountVerificationWhereInput | AccountVerificationWhereInput[]
    OR?: AccountVerificationWhereInput[]
    NOT?: AccountVerificationWhereInput | AccountVerificationWhereInput[]
    id?: IntFilter<"AccountVerification"> | number
    accountType?: StringFilter<"AccountVerification"> | string
    verifiedAt?: DateTimeNullableFilter<"AccountVerification"> | Date | string | null
    createdAt?: DateTimeFilter<"AccountVerification"> | Date | string
    verified?: BoolFilter<"AccountVerification"> | boolean
    ip?: StringNullableFilter<"AccountVerification"> | string | null
    firstName?: StringNullableFilter<"AccountVerification"> | string | null
    lastName?: StringNullableFilter<"AccountVerification"> | string | null
    code?: StringFilter<"AccountVerification"> | string
    userName?: StringFilter<"AccountVerification"> | string
    password?: StringFilter<"AccountVerification"> | string
    attempt?: IntNullableFilter<"AccountVerification"> | number | null
    userId?: IntFilter<"AccountVerification"> | number
  }

  export type AccountVerificationOrderByWithRelationInput = {
    id?: SortOrder
    accountType?: SortOrder
    verifiedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    verified?: SortOrder
    ip?: SortOrderInput | SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    code?: SortOrder
    userName?: SortOrder
    password?: SortOrder
    attempt?: SortOrderInput | SortOrder
    userId?: SortOrder
  }

  export type AccountVerificationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AccountVerificationWhereInput | AccountVerificationWhereInput[]
    OR?: AccountVerificationWhereInput[]
    NOT?: AccountVerificationWhereInput | AccountVerificationWhereInput[]
    accountType?: StringFilter<"AccountVerification"> | string
    verifiedAt?: DateTimeNullableFilter<"AccountVerification"> | Date | string | null
    createdAt?: DateTimeFilter<"AccountVerification"> | Date | string
    verified?: BoolFilter<"AccountVerification"> | boolean
    ip?: StringNullableFilter<"AccountVerification"> | string | null
    firstName?: StringNullableFilter<"AccountVerification"> | string | null
    lastName?: StringNullableFilter<"AccountVerification"> | string | null
    code?: StringFilter<"AccountVerification"> | string
    userName?: StringFilter<"AccountVerification"> | string
    password?: StringFilter<"AccountVerification"> | string
    attempt?: IntNullableFilter<"AccountVerification"> | number | null
    userId?: IntFilter<"AccountVerification"> | number
  }, "id">

  export type AccountVerificationOrderByWithAggregationInput = {
    id?: SortOrder
    accountType?: SortOrder
    verifiedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    verified?: SortOrder
    ip?: SortOrderInput | SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    code?: SortOrder
    userName?: SortOrder
    password?: SortOrder
    attempt?: SortOrderInput | SortOrder
    userId?: SortOrder
    _count?: AccountVerificationCountOrderByAggregateInput
    _avg?: AccountVerificationAvgOrderByAggregateInput
    _max?: AccountVerificationMaxOrderByAggregateInput
    _min?: AccountVerificationMinOrderByAggregateInput
    _sum?: AccountVerificationSumOrderByAggregateInput
  }

  export type AccountVerificationScalarWhereWithAggregatesInput = {
    AND?: AccountVerificationScalarWhereWithAggregatesInput | AccountVerificationScalarWhereWithAggregatesInput[]
    OR?: AccountVerificationScalarWhereWithAggregatesInput[]
    NOT?: AccountVerificationScalarWhereWithAggregatesInput | AccountVerificationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AccountVerification"> | number
    accountType?: StringWithAggregatesFilter<"AccountVerification"> | string
    verifiedAt?: DateTimeNullableWithAggregatesFilter<"AccountVerification"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"AccountVerification"> | Date | string
    verified?: BoolWithAggregatesFilter<"AccountVerification"> | boolean
    ip?: StringNullableWithAggregatesFilter<"AccountVerification"> | string | null
    firstName?: StringNullableWithAggregatesFilter<"AccountVerification"> | string | null
    lastName?: StringNullableWithAggregatesFilter<"AccountVerification"> | string | null
    code?: StringWithAggregatesFilter<"AccountVerification"> | string
    userName?: StringWithAggregatesFilter<"AccountVerification"> | string
    password?: StringWithAggregatesFilter<"AccountVerification"> | string
    attempt?: IntNullableWithAggregatesFilter<"AccountVerification"> | number | null
    userId?: IntWithAggregatesFilter<"AccountVerification"> | number
  }

  export type PasswordResetWhereInput = {
    AND?: PasswordResetWhereInput | PasswordResetWhereInput[]
    OR?: PasswordResetWhereInput[]
    NOT?: PasswordResetWhereInput | PasswordResetWhereInput[]
    id?: IntFilter<"PasswordReset"> | number
    userId?: IntFilter<"PasswordReset"> | number
    code?: StringFilter<"PasswordReset"> | string
    attempt?: IntFilter<"PasswordReset"> | number
    ip?: StringFilter<"PasswordReset"> | string
    createdAt?: DateTimeNullableFilter<"PasswordReset"> | Date | string | null
    codeVerified?: BoolFilter<"PasswordReset"> | boolean
    codeVerifiedAt?: DateTimeNullableFilter<"PasswordReset"> | Date | string | null
    reset?: BoolFilter<"PasswordReset"> | boolean
    resetAt?: DateTimeNullableFilter<"PasswordReset"> | Date | string | null
  }

  export type PasswordResetOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    code?: SortOrder
    attempt?: SortOrder
    ip?: SortOrder
    createdAt?: SortOrderInput | SortOrder
    codeVerified?: SortOrder
    codeVerifiedAt?: SortOrderInput | SortOrder
    reset?: SortOrder
    resetAt?: SortOrderInput | SortOrder
  }

  export type PasswordResetWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PasswordResetWhereInput | PasswordResetWhereInput[]
    OR?: PasswordResetWhereInput[]
    NOT?: PasswordResetWhereInput | PasswordResetWhereInput[]
    userId?: IntFilter<"PasswordReset"> | number
    code?: StringFilter<"PasswordReset"> | string
    attempt?: IntFilter<"PasswordReset"> | number
    ip?: StringFilter<"PasswordReset"> | string
    createdAt?: DateTimeNullableFilter<"PasswordReset"> | Date | string | null
    codeVerified?: BoolFilter<"PasswordReset"> | boolean
    codeVerifiedAt?: DateTimeNullableFilter<"PasswordReset"> | Date | string | null
    reset?: BoolFilter<"PasswordReset"> | boolean
    resetAt?: DateTimeNullableFilter<"PasswordReset"> | Date | string | null
  }, "id">

  export type PasswordResetOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    code?: SortOrder
    attempt?: SortOrder
    ip?: SortOrder
    createdAt?: SortOrderInput | SortOrder
    codeVerified?: SortOrder
    codeVerifiedAt?: SortOrderInput | SortOrder
    reset?: SortOrder
    resetAt?: SortOrderInput | SortOrder
    _count?: PasswordResetCountOrderByAggregateInput
    _avg?: PasswordResetAvgOrderByAggregateInput
    _max?: PasswordResetMaxOrderByAggregateInput
    _min?: PasswordResetMinOrderByAggregateInput
    _sum?: PasswordResetSumOrderByAggregateInput
  }

  export type PasswordResetScalarWhereWithAggregatesInput = {
    AND?: PasswordResetScalarWhereWithAggregatesInput | PasswordResetScalarWhereWithAggregatesInput[]
    OR?: PasswordResetScalarWhereWithAggregatesInput[]
    NOT?: PasswordResetScalarWhereWithAggregatesInput | PasswordResetScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PasswordReset"> | number
    userId?: IntWithAggregatesFilter<"PasswordReset"> | number
    code?: StringWithAggregatesFilter<"PasswordReset"> | string
    attempt?: IntWithAggregatesFilter<"PasswordReset"> | number
    ip?: StringWithAggregatesFilter<"PasswordReset"> | string
    createdAt?: DateTimeNullableWithAggregatesFilter<"PasswordReset"> | Date | string | null
    codeVerified?: BoolWithAggregatesFilter<"PasswordReset"> | boolean
    codeVerifiedAt?: DateTimeNullableWithAggregatesFilter<"PasswordReset"> | Date | string | null
    reset?: BoolWithAggregatesFilter<"PasswordReset"> | boolean
    resetAt?: DateTimeNullableWithAggregatesFilter<"PasswordReset"> | Date | string | null
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    id?: IntFilter<"Session"> | number
    sessionToken?: StringFilter<"Session"> | string
    userId?: IntFilter<"Session"> | number
    expires?: DateTimeFilter<"Session"> | Date | string
    active?: BoolFilter<"Session"> | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    active?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    sessionToken?: string
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    userId?: IntFilter<"Session"> | number
    expires?: DateTimeFilter<"Session"> | Date | string
    active?: BoolFilter<"Session"> | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "sessionToken">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    active?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _avg?: SessionAvgOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
    _sum?: SessionSumOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Session"> | number
    sessionToken?: StringWithAggregatesFilter<"Session"> | string
    userId?: IntWithAggregatesFilter<"Session"> | number
    expires?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    active?: BoolWithAggregatesFilter<"Session"> | boolean
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    firstName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    email?: StringNullableFilter<"User"> | string | null
    userName?: StringNullableFilter<"User"> | string | null
    phoneNumber?: StringNullableFilter<"User"> | string | null
    passwordHash?: StringNullableFilter<"User"> | string | null
    active?: BoolNullableFilter<"User"> | boolean | null
    createdAt?: DateTimeNullableFilter<"User"> | Date | string | null
    verifiedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    signupMethod?: StringNullableFilter<"User"> | string | null
    image?: StringNullableFilter<"User"> | string | null
    entreprise?: EntrepriseListRelationFilter
    candidat?: CandidatListRelationFilter
    accounts?: AccountListRelationFilter
    sessions?: SessionListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    userName?: SortOrderInput | SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    passwordHash?: SortOrderInput | SortOrder
    active?: SortOrderInput | SortOrder
    createdAt?: SortOrderInput | SortOrder
    verifiedAt?: SortOrderInput | SortOrder
    signupMethod?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    entreprise?: EntrepriseOrderByRelationAggregateInput
    candidat?: CandidatOrderByRelationAggregateInput
    accounts?: AccountOrderByRelationAggregateInput
    sessions?: SessionOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    userName?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    firstName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    phoneNumber?: StringNullableFilter<"User"> | string | null
    passwordHash?: StringNullableFilter<"User"> | string | null
    active?: BoolNullableFilter<"User"> | boolean | null
    createdAt?: DateTimeNullableFilter<"User"> | Date | string | null
    verifiedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    signupMethod?: StringNullableFilter<"User"> | string | null
    image?: StringNullableFilter<"User"> | string | null
    entreprise?: EntrepriseListRelationFilter
    candidat?: CandidatListRelationFilter
    accounts?: AccountListRelationFilter
    sessions?: SessionListRelationFilter
  }, "id" | "email" | "userName">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    userName?: SortOrderInput | SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    passwordHash?: SortOrderInput | SortOrder
    active?: SortOrderInput | SortOrder
    createdAt?: SortOrderInput | SortOrder
    verifiedAt?: SortOrderInput | SortOrder
    signupMethod?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    firstName?: StringNullableWithAggregatesFilter<"User"> | string | null
    lastName?: StringNullableWithAggregatesFilter<"User"> | string | null
    email?: StringNullableWithAggregatesFilter<"User"> | string | null
    userName?: StringNullableWithAggregatesFilter<"User"> | string | null
    phoneNumber?: StringNullableWithAggregatesFilter<"User"> | string | null
    passwordHash?: StringNullableWithAggregatesFilter<"User"> | string | null
    active?: BoolNullableWithAggregatesFilter<"User"> | boolean | null
    createdAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    verifiedAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    signupMethod?: StringNullableWithAggregatesFilter<"User"> | string | null
    image?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type CandidatWhereInput = {
    AND?: CandidatWhereInput | CandidatWhereInput[]
    OR?: CandidatWhereInput[]
    NOT?: CandidatWhereInput | CandidatWhereInput[]
    idCandidat?: IntFilter<"Candidat"> | number
    adresCandidat?: StringNullableFilter<"Candidat"> | string | null
    experienceCandidat?: StringNullableFilter<"Candidat"> | string | null
    nivEtudesCandidat?: StringNullableFilter<"Candidat"> | string | null
    competencesCandidat?: StringNullableFilter<"Candidat"> | string | null
    cVCandidat?: StringNullableFilter<"Candidat"> | string | null
    userId?: IntFilter<"Candidat"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    entretiens?: EntretienListRelationFilter
    notes?: NoteListRelationFilter
  }

  export type CandidatOrderByWithRelationInput = {
    idCandidat?: SortOrder
    adresCandidat?: SortOrderInput | SortOrder
    experienceCandidat?: SortOrderInput | SortOrder
    nivEtudesCandidat?: SortOrderInput | SortOrder
    competencesCandidat?: SortOrderInput | SortOrder
    cVCandidat?: SortOrderInput | SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
    entretiens?: EntretienOrderByRelationAggregateInput
    notes?: NoteOrderByRelationAggregateInput
  }

  export type CandidatWhereUniqueInput = Prisma.AtLeast<{
    idCandidat?: number
    AND?: CandidatWhereInput | CandidatWhereInput[]
    OR?: CandidatWhereInput[]
    NOT?: CandidatWhereInput | CandidatWhereInput[]
    adresCandidat?: StringNullableFilter<"Candidat"> | string | null
    experienceCandidat?: StringNullableFilter<"Candidat"> | string | null
    nivEtudesCandidat?: StringNullableFilter<"Candidat"> | string | null
    competencesCandidat?: StringNullableFilter<"Candidat"> | string | null
    cVCandidat?: StringNullableFilter<"Candidat"> | string | null
    userId?: IntFilter<"Candidat"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    entretiens?: EntretienListRelationFilter
    notes?: NoteListRelationFilter
  }, "idCandidat">

  export type CandidatOrderByWithAggregationInput = {
    idCandidat?: SortOrder
    adresCandidat?: SortOrderInput | SortOrder
    experienceCandidat?: SortOrderInput | SortOrder
    nivEtudesCandidat?: SortOrderInput | SortOrder
    competencesCandidat?: SortOrderInput | SortOrder
    cVCandidat?: SortOrderInput | SortOrder
    userId?: SortOrder
    _count?: CandidatCountOrderByAggregateInput
    _avg?: CandidatAvgOrderByAggregateInput
    _max?: CandidatMaxOrderByAggregateInput
    _min?: CandidatMinOrderByAggregateInput
    _sum?: CandidatSumOrderByAggregateInput
  }

  export type CandidatScalarWhereWithAggregatesInput = {
    AND?: CandidatScalarWhereWithAggregatesInput | CandidatScalarWhereWithAggregatesInput[]
    OR?: CandidatScalarWhereWithAggregatesInput[]
    NOT?: CandidatScalarWhereWithAggregatesInput | CandidatScalarWhereWithAggregatesInput[]
    idCandidat?: IntWithAggregatesFilter<"Candidat"> | number
    adresCandidat?: StringNullableWithAggregatesFilter<"Candidat"> | string | null
    experienceCandidat?: StringNullableWithAggregatesFilter<"Candidat"> | string | null
    nivEtudesCandidat?: StringNullableWithAggregatesFilter<"Candidat"> | string | null
    competencesCandidat?: StringNullableWithAggregatesFilter<"Candidat"> | string | null
    cVCandidat?: StringNullableWithAggregatesFilter<"Candidat"> | string | null
    userId?: IntWithAggregatesFilter<"Candidat"> | number
  }

  export type ContratWhereInput = {
    AND?: ContratWhereInput | ContratWhereInput[]
    OR?: ContratWhereInput[]
    NOT?: ContratWhereInput | ContratWhereInput[]
    idContrat?: IntFilter<"Contrat"> | number
    entrepriseId?: IntFilter<"Contrat"> | number
    freelancerId?: IntFilter<"Contrat"> | number
    titreProjContrat?: StringFilter<"Contrat"> | string
    datDebConrat?: DateTimeFilter<"Contrat"> | Date | string
    datFinConrat?: DateTimeFilter<"Contrat"> | Date | string
    coutContrat?: IntFilter<"Contrat"> | number
    descripContrat?: StringFilter<"Contrat"> | string
    statutContrat?: StringFilter<"Contrat"> | string
    entreprise?: XOR<EntrepriseRelationFilter, EntrepriseWhereInput>
    freelancer?: XOR<FreelancerRelationFilter, FreelancerWhereInput>
  }

  export type ContratOrderByWithRelationInput = {
    idContrat?: SortOrder
    entrepriseId?: SortOrder
    freelancerId?: SortOrder
    titreProjContrat?: SortOrder
    datDebConrat?: SortOrder
    datFinConrat?: SortOrder
    coutContrat?: SortOrder
    descripContrat?: SortOrder
    statutContrat?: SortOrder
    entreprise?: EntrepriseOrderByWithRelationInput
    freelancer?: FreelancerOrderByWithRelationInput
  }

  export type ContratWhereUniqueInput = Prisma.AtLeast<{
    idContrat?: number
    AND?: ContratWhereInput | ContratWhereInput[]
    OR?: ContratWhereInput[]
    NOT?: ContratWhereInput | ContratWhereInput[]
    entrepriseId?: IntFilter<"Contrat"> | number
    freelancerId?: IntFilter<"Contrat"> | number
    titreProjContrat?: StringFilter<"Contrat"> | string
    datDebConrat?: DateTimeFilter<"Contrat"> | Date | string
    datFinConrat?: DateTimeFilter<"Contrat"> | Date | string
    coutContrat?: IntFilter<"Contrat"> | number
    descripContrat?: StringFilter<"Contrat"> | string
    statutContrat?: StringFilter<"Contrat"> | string
    entreprise?: XOR<EntrepriseRelationFilter, EntrepriseWhereInput>
    freelancer?: XOR<FreelancerRelationFilter, FreelancerWhereInput>
  }, "idContrat">

  export type ContratOrderByWithAggregationInput = {
    idContrat?: SortOrder
    entrepriseId?: SortOrder
    freelancerId?: SortOrder
    titreProjContrat?: SortOrder
    datDebConrat?: SortOrder
    datFinConrat?: SortOrder
    coutContrat?: SortOrder
    descripContrat?: SortOrder
    statutContrat?: SortOrder
    _count?: ContratCountOrderByAggregateInput
    _avg?: ContratAvgOrderByAggregateInput
    _max?: ContratMaxOrderByAggregateInput
    _min?: ContratMinOrderByAggregateInput
    _sum?: ContratSumOrderByAggregateInput
  }

  export type ContratScalarWhereWithAggregatesInput = {
    AND?: ContratScalarWhereWithAggregatesInput | ContratScalarWhereWithAggregatesInput[]
    OR?: ContratScalarWhereWithAggregatesInput[]
    NOT?: ContratScalarWhereWithAggregatesInput | ContratScalarWhereWithAggregatesInput[]
    idContrat?: IntWithAggregatesFilter<"Contrat"> | number
    entrepriseId?: IntWithAggregatesFilter<"Contrat"> | number
    freelancerId?: IntWithAggregatesFilter<"Contrat"> | number
    titreProjContrat?: StringWithAggregatesFilter<"Contrat"> | string
    datDebConrat?: DateTimeWithAggregatesFilter<"Contrat"> | Date | string
    datFinConrat?: DateTimeWithAggregatesFilter<"Contrat"> | Date | string
    coutContrat?: IntWithAggregatesFilter<"Contrat"> | number
    descripContrat?: StringWithAggregatesFilter<"Contrat"> | string
    statutContrat?: StringWithAggregatesFilter<"Contrat"> | string
  }

  export type EntrepriseWhereInput = {
    AND?: EntrepriseWhereInput | EntrepriseWhereInput[]
    OR?: EntrepriseWhereInput[]
    NOT?: EntrepriseWhereInput | EntrepriseWhereInput[]
    idEntreprise?: IntFilter<"Entreprise"> | number
    nomEntreprise?: StringNullableFilter<"Entreprise"> | string | null
    adresEntreprise?: StringNullableFilter<"Entreprise"> | string | null
    contactEntreprise?: StringNullableFilter<"Entreprise"> | string | null
    sectActivEntreprise?: StringNullableFilter<"Entreprise"> | string | null
    tailleEntreprise?: StringNullableFilter<"Entreprise"> | string | null
    logoEntreprise?: StringNullableFilter<"Entreprise"> | string | null
    descripEntreprise?: StringNullableFilter<"Entreprise"> | string | null
    siteWebEntreprise?: StringNullableFilter<"Entreprise"> | string | null
    userId?: IntFilter<"Entreprise"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    offreEmplois?: OffreEmploiListRelationFilter
    entretiens?: EntretienListRelationFilter
    contrats?: ContratListRelationFilter
    projets?: ProjetListRelationFilter
    notes?: NoteListRelationFilter
  }

  export type EntrepriseOrderByWithRelationInput = {
    idEntreprise?: SortOrder
    nomEntreprise?: SortOrderInput | SortOrder
    adresEntreprise?: SortOrderInput | SortOrder
    contactEntreprise?: SortOrderInput | SortOrder
    sectActivEntreprise?: SortOrderInput | SortOrder
    tailleEntreprise?: SortOrderInput | SortOrder
    logoEntreprise?: SortOrderInput | SortOrder
    descripEntreprise?: SortOrderInput | SortOrder
    siteWebEntreprise?: SortOrderInput | SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
    offreEmplois?: OffreEmploiOrderByRelationAggregateInput
    entretiens?: EntretienOrderByRelationAggregateInput
    contrats?: ContratOrderByRelationAggregateInput
    projets?: ProjetOrderByRelationAggregateInput
    notes?: NoteOrderByRelationAggregateInput
  }

  export type EntrepriseWhereUniqueInput = Prisma.AtLeast<{
    idEntreprise?: number
    AND?: EntrepriseWhereInput | EntrepriseWhereInput[]
    OR?: EntrepriseWhereInput[]
    NOT?: EntrepriseWhereInput | EntrepriseWhereInput[]
    nomEntreprise?: StringNullableFilter<"Entreprise"> | string | null
    adresEntreprise?: StringNullableFilter<"Entreprise"> | string | null
    contactEntreprise?: StringNullableFilter<"Entreprise"> | string | null
    sectActivEntreprise?: StringNullableFilter<"Entreprise"> | string | null
    tailleEntreprise?: StringNullableFilter<"Entreprise"> | string | null
    logoEntreprise?: StringNullableFilter<"Entreprise"> | string | null
    descripEntreprise?: StringNullableFilter<"Entreprise"> | string | null
    siteWebEntreprise?: StringNullableFilter<"Entreprise"> | string | null
    userId?: IntFilter<"Entreprise"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    offreEmplois?: OffreEmploiListRelationFilter
    entretiens?: EntretienListRelationFilter
    contrats?: ContratListRelationFilter
    projets?: ProjetListRelationFilter
    notes?: NoteListRelationFilter
  }, "idEntreprise">

  export type EntrepriseOrderByWithAggregationInput = {
    idEntreprise?: SortOrder
    nomEntreprise?: SortOrderInput | SortOrder
    adresEntreprise?: SortOrderInput | SortOrder
    contactEntreprise?: SortOrderInput | SortOrder
    sectActivEntreprise?: SortOrderInput | SortOrder
    tailleEntreprise?: SortOrderInput | SortOrder
    logoEntreprise?: SortOrderInput | SortOrder
    descripEntreprise?: SortOrderInput | SortOrder
    siteWebEntreprise?: SortOrderInput | SortOrder
    userId?: SortOrder
    _count?: EntrepriseCountOrderByAggregateInput
    _avg?: EntrepriseAvgOrderByAggregateInput
    _max?: EntrepriseMaxOrderByAggregateInput
    _min?: EntrepriseMinOrderByAggregateInput
    _sum?: EntrepriseSumOrderByAggregateInput
  }

  export type EntrepriseScalarWhereWithAggregatesInput = {
    AND?: EntrepriseScalarWhereWithAggregatesInput | EntrepriseScalarWhereWithAggregatesInput[]
    OR?: EntrepriseScalarWhereWithAggregatesInput[]
    NOT?: EntrepriseScalarWhereWithAggregatesInput | EntrepriseScalarWhereWithAggregatesInput[]
    idEntreprise?: IntWithAggregatesFilter<"Entreprise"> | number
    nomEntreprise?: StringNullableWithAggregatesFilter<"Entreprise"> | string | null
    adresEntreprise?: StringNullableWithAggregatesFilter<"Entreprise"> | string | null
    contactEntreprise?: StringNullableWithAggregatesFilter<"Entreprise"> | string | null
    sectActivEntreprise?: StringNullableWithAggregatesFilter<"Entreprise"> | string | null
    tailleEntreprise?: StringNullableWithAggregatesFilter<"Entreprise"> | string | null
    logoEntreprise?: StringNullableWithAggregatesFilter<"Entreprise"> | string | null
    descripEntreprise?: StringNullableWithAggregatesFilter<"Entreprise"> | string | null
    siteWebEntreprise?: StringNullableWithAggregatesFilter<"Entreprise"> | string | null
    userId?: IntWithAggregatesFilter<"Entreprise"> | number
  }

  export type EntretienWhereInput = {
    AND?: EntretienWhereInput | EntretienWhereInput[]
    OR?: EntretienWhereInput[]
    NOT?: EntretienWhereInput | EntretienWhereInput[]
    idEntretien?: IntFilter<"Entretien"> | number
    entrepriseId?: IntFilter<"Entretien"> | number
    candidatId?: IntFilter<"Entretien"> | number
    dateEntretien?: DateTimeFilter<"Entretien"> | Date | string
    adresEntretien?: StringFilter<"Entretien"> | string
    recruEntretien?: StringFilter<"Entretien"> | string
    typeEntretien?: StringFilter<"Entretien"> | string
    descripEntreprise?: StringFilter<"Entretien"> | string
    entreprise?: XOR<EntrepriseRelationFilter, EntrepriseWhereInput>
    candidat?: XOR<CandidatRelationFilter, CandidatWhereInput>
  }

  export type EntretienOrderByWithRelationInput = {
    idEntretien?: SortOrder
    entrepriseId?: SortOrder
    candidatId?: SortOrder
    dateEntretien?: SortOrder
    adresEntretien?: SortOrder
    recruEntretien?: SortOrder
    typeEntretien?: SortOrder
    descripEntreprise?: SortOrder
    entreprise?: EntrepriseOrderByWithRelationInput
    candidat?: CandidatOrderByWithRelationInput
  }

  export type EntretienWhereUniqueInput = Prisma.AtLeast<{
    idEntretien?: number
    AND?: EntretienWhereInput | EntretienWhereInput[]
    OR?: EntretienWhereInput[]
    NOT?: EntretienWhereInput | EntretienWhereInput[]
    entrepriseId?: IntFilter<"Entretien"> | number
    candidatId?: IntFilter<"Entretien"> | number
    dateEntretien?: DateTimeFilter<"Entretien"> | Date | string
    adresEntretien?: StringFilter<"Entretien"> | string
    recruEntretien?: StringFilter<"Entretien"> | string
    typeEntretien?: StringFilter<"Entretien"> | string
    descripEntreprise?: StringFilter<"Entretien"> | string
    entreprise?: XOR<EntrepriseRelationFilter, EntrepriseWhereInput>
    candidat?: XOR<CandidatRelationFilter, CandidatWhereInput>
  }, "idEntretien">

  export type EntretienOrderByWithAggregationInput = {
    idEntretien?: SortOrder
    entrepriseId?: SortOrder
    candidatId?: SortOrder
    dateEntretien?: SortOrder
    adresEntretien?: SortOrder
    recruEntretien?: SortOrder
    typeEntretien?: SortOrder
    descripEntreprise?: SortOrder
    _count?: EntretienCountOrderByAggregateInput
    _avg?: EntretienAvgOrderByAggregateInput
    _max?: EntretienMaxOrderByAggregateInput
    _min?: EntretienMinOrderByAggregateInput
    _sum?: EntretienSumOrderByAggregateInput
  }

  export type EntretienScalarWhereWithAggregatesInput = {
    AND?: EntretienScalarWhereWithAggregatesInput | EntretienScalarWhereWithAggregatesInput[]
    OR?: EntretienScalarWhereWithAggregatesInput[]
    NOT?: EntretienScalarWhereWithAggregatesInput | EntretienScalarWhereWithAggregatesInput[]
    idEntretien?: IntWithAggregatesFilter<"Entretien"> | number
    entrepriseId?: IntWithAggregatesFilter<"Entretien"> | number
    candidatId?: IntWithAggregatesFilter<"Entretien"> | number
    dateEntretien?: DateTimeWithAggregatesFilter<"Entretien"> | Date | string
    adresEntretien?: StringWithAggregatesFilter<"Entretien"> | string
    recruEntretien?: StringWithAggregatesFilter<"Entretien"> | string
    typeEntretien?: StringWithAggregatesFilter<"Entretien"> | string
    descripEntreprise?: StringWithAggregatesFilter<"Entretien"> | string
  }

  export type FreelancerWhereInput = {
    AND?: FreelancerWhereInput | FreelancerWhereInput[]
    OR?: FreelancerWhereInput[]
    NOT?: FreelancerWhereInput | FreelancerWhereInput[]
    idFreelancer?: IntFilter<"Freelancer"> | number
    nomFreelancer?: StringFilter<"Freelancer"> | string
    prenomFreelancer?: StringFilter<"Freelancer"> | string
    adresFreelancer?: StringFilter<"Freelancer"> | string
    TelFreelancer?: StringFilter<"Freelancer"> | string
    emailFreelancer?: StringFilter<"Freelancer"> | string
    competencesFreelancer?: StringFilter<"Freelancer"> | string
    experienceFreelancer?: StringFilter<"Freelancer"> | string
    portfolioFreelancer?: StringFilter<"Freelancer"> | string
    propositions?: PropositionListRelationFilter
    contrats?: ContratListRelationFilter
  }

  export type FreelancerOrderByWithRelationInput = {
    idFreelancer?: SortOrder
    nomFreelancer?: SortOrder
    prenomFreelancer?: SortOrder
    adresFreelancer?: SortOrder
    TelFreelancer?: SortOrder
    emailFreelancer?: SortOrder
    competencesFreelancer?: SortOrder
    experienceFreelancer?: SortOrder
    portfolioFreelancer?: SortOrder
    propositions?: PropositionOrderByRelationAggregateInput
    contrats?: ContratOrderByRelationAggregateInput
  }

  export type FreelancerWhereUniqueInput = Prisma.AtLeast<{
    idFreelancer?: number
    AND?: FreelancerWhereInput | FreelancerWhereInput[]
    OR?: FreelancerWhereInput[]
    NOT?: FreelancerWhereInput | FreelancerWhereInput[]
    nomFreelancer?: StringFilter<"Freelancer"> | string
    prenomFreelancer?: StringFilter<"Freelancer"> | string
    adresFreelancer?: StringFilter<"Freelancer"> | string
    TelFreelancer?: StringFilter<"Freelancer"> | string
    emailFreelancer?: StringFilter<"Freelancer"> | string
    competencesFreelancer?: StringFilter<"Freelancer"> | string
    experienceFreelancer?: StringFilter<"Freelancer"> | string
    portfolioFreelancer?: StringFilter<"Freelancer"> | string
    propositions?: PropositionListRelationFilter
    contrats?: ContratListRelationFilter
  }, "idFreelancer">

  export type FreelancerOrderByWithAggregationInput = {
    idFreelancer?: SortOrder
    nomFreelancer?: SortOrder
    prenomFreelancer?: SortOrder
    adresFreelancer?: SortOrder
    TelFreelancer?: SortOrder
    emailFreelancer?: SortOrder
    competencesFreelancer?: SortOrder
    experienceFreelancer?: SortOrder
    portfolioFreelancer?: SortOrder
    _count?: FreelancerCountOrderByAggregateInput
    _avg?: FreelancerAvgOrderByAggregateInput
    _max?: FreelancerMaxOrderByAggregateInput
    _min?: FreelancerMinOrderByAggregateInput
    _sum?: FreelancerSumOrderByAggregateInput
  }

  export type FreelancerScalarWhereWithAggregatesInput = {
    AND?: FreelancerScalarWhereWithAggregatesInput | FreelancerScalarWhereWithAggregatesInput[]
    OR?: FreelancerScalarWhereWithAggregatesInput[]
    NOT?: FreelancerScalarWhereWithAggregatesInput | FreelancerScalarWhereWithAggregatesInput[]
    idFreelancer?: IntWithAggregatesFilter<"Freelancer"> | number
    nomFreelancer?: StringWithAggregatesFilter<"Freelancer"> | string
    prenomFreelancer?: StringWithAggregatesFilter<"Freelancer"> | string
    adresFreelancer?: StringWithAggregatesFilter<"Freelancer"> | string
    TelFreelancer?: StringWithAggregatesFilter<"Freelancer"> | string
    emailFreelancer?: StringWithAggregatesFilter<"Freelancer"> | string
    competencesFreelancer?: StringWithAggregatesFilter<"Freelancer"> | string
    experienceFreelancer?: StringWithAggregatesFilter<"Freelancer"> | string
    portfolioFreelancer?: StringWithAggregatesFilter<"Freelancer"> | string
  }

  export type NoteWhereInput = {
    AND?: NoteWhereInput | NoteWhereInput[]
    OR?: NoteWhereInput[]
    NOT?: NoteWhereInput | NoteWhereInput[]
    idNote?: IntFilter<"Note"> | number
    entrepriseId?: IntFilter<"Note"> | number
    candidatId?: IntFilter<"Note"> | number
    Note?: DecimalFilter<"Note"> | Decimal | DecimalJsLike | number | string
    commentNote?: StringFilter<"Note"> | string
    dateNote?: DateTimeFilter<"Note"> | Date | string
    entreprise?: XOR<EntrepriseRelationFilter, EntrepriseWhereInput>
    candidat?: XOR<CandidatRelationFilter, CandidatWhereInput>
  }

  export type NoteOrderByWithRelationInput = {
    idNote?: SortOrder
    entrepriseId?: SortOrder
    candidatId?: SortOrder
    Note?: SortOrder
    commentNote?: SortOrder
    dateNote?: SortOrder
    entreprise?: EntrepriseOrderByWithRelationInput
    candidat?: CandidatOrderByWithRelationInput
  }

  export type NoteWhereUniqueInput = Prisma.AtLeast<{
    idNote?: number
    AND?: NoteWhereInput | NoteWhereInput[]
    OR?: NoteWhereInput[]
    NOT?: NoteWhereInput | NoteWhereInput[]
    entrepriseId?: IntFilter<"Note"> | number
    candidatId?: IntFilter<"Note"> | number
    Note?: DecimalFilter<"Note"> | Decimal | DecimalJsLike | number | string
    commentNote?: StringFilter<"Note"> | string
    dateNote?: DateTimeFilter<"Note"> | Date | string
    entreprise?: XOR<EntrepriseRelationFilter, EntrepriseWhereInput>
    candidat?: XOR<CandidatRelationFilter, CandidatWhereInput>
  }, "idNote">

  export type NoteOrderByWithAggregationInput = {
    idNote?: SortOrder
    entrepriseId?: SortOrder
    candidatId?: SortOrder
    Note?: SortOrder
    commentNote?: SortOrder
    dateNote?: SortOrder
    _count?: NoteCountOrderByAggregateInput
    _avg?: NoteAvgOrderByAggregateInput
    _max?: NoteMaxOrderByAggregateInput
    _min?: NoteMinOrderByAggregateInput
    _sum?: NoteSumOrderByAggregateInput
  }

  export type NoteScalarWhereWithAggregatesInput = {
    AND?: NoteScalarWhereWithAggregatesInput | NoteScalarWhereWithAggregatesInput[]
    OR?: NoteScalarWhereWithAggregatesInput[]
    NOT?: NoteScalarWhereWithAggregatesInput | NoteScalarWhereWithAggregatesInput[]
    idNote?: IntWithAggregatesFilter<"Note"> | number
    entrepriseId?: IntWithAggregatesFilter<"Note"> | number
    candidatId?: IntWithAggregatesFilter<"Note"> | number
    Note?: DecimalWithAggregatesFilter<"Note"> | Decimal | DecimalJsLike | number | string
    commentNote?: StringWithAggregatesFilter<"Note"> | string
    dateNote?: DateTimeWithAggregatesFilter<"Note"> | Date | string
  }

  export type OffreEmploiWhereInput = {
    AND?: OffreEmploiWhereInput | OffreEmploiWhereInput[]
    OR?: OffreEmploiWhereInput[]
    NOT?: OffreEmploiWhereInput | OffreEmploiWhereInput[]
    idOffreEmploi?: IntFilter<"OffreEmploi"> | number
    entrepriseId?: IntFilter<"OffreEmploi"> | number
    titreOffreEmploi?: StringFilter<"OffreEmploi"> | string
    descripOffreEmploi?: StringFilter<"OffreEmploi"> | string
    localiOffreEmploi?: StringFilter<"OffreEmploi"> | string
    datePubliOffreEmploi?: DateTimeFilter<"OffreEmploi"> | Date | string
    datelimitOffreEmploi?: DateTimeFilter<"OffreEmploi"> | Date | string
    salaireOffreEmploi?: IntFilter<"OffreEmploi"> | number
    typeContOffreEmploi?: StringFilter<"OffreEmploi"> | string
    experienceOffreEmploi?: StringFilter<"OffreEmploi"> | string
    nivEtuOffreEmploi?: StringFilter<"OffreEmploi"> | string
    competencesOffreEmploi?: StringFilter<"OffreEmploi"> | string
    entreprise?: XOR<EntrepriseRelationFilter, EntrepriseWhereInput>
  }

  export type OffreEmploiOrderByWithRelationInput = {
    idOffreEmploi?: SortOrder
    entrepriseId?: SortOrder
    titreOffreEmploi?: SortOrder
    descripOffreEmploi?: SortOrder
    localiOffreEmploi?: SortOrder
    datePubliOffreEmploi?: SortOrder
    datelimitOffreEmploi?: SortOrder
    salaireOffreEmploi?: SortOrder
    typeContOffreEmploi?: SortOrder
    experienceOffreEmploi?: SortOrder
    nivEtuOffreEmploi?: SortOrder
    competencesOffreEmploi?: SortOrder
    entreprise?: EntrepriseOrderByWithRelationInput
  }

  export type OffreEmploiWhereUniqueInput = Prisma.AtLeast<{
    idOffreEmploi?: number
    AND?: OffreEmploiWhereInput | OffreEmploiWhereInput[]
    OR?: OffreEmploiWhereInput[]
    NOT?: OffreEmploiWhereInput | OffreEmploiWhereInput[]
    entrepriseId?: IntFilter<"OffreEmploi"> | number
    titreOffreEmploi?: StringFilter<"OffreEmploi"> | string
    descripOffreEmploi?: StringFilter<"OffreEmploi"> | string
    localiOffreEmploi?: StringFilter<"OffreEmploi"> | string
    datePubliOffreEmploi?: DateTimeFilter<"OffreEmploi"> | Date | string
    datelimitOffreEmploi?: DateTimeFilter<"OffreEmploi"> | Date | string
    salaireOffreEmploi?: IntFilter<"OffreEmploi"> | number
    typeContOffreEmploi?: StringFilter<"OffreEmploi"> | string
    experienceOffreEmploi?: StringFilter<"OffreEmploi"> | string
    nivEtuOffreEmploi?: StringFilter<"OffreEmploi"> | string
    competencesOffreEmploi?: StringFilter<"OffreEmploi"> | string
    entreprise?: XOR<EntrepriseRelationFilter, EntrepriseWhereInput>
  }, "idOffreEmploi">

  export type OffreEmploiOrderByWithAggregationInput = {
    idOffreEmploi?: SortOrder
    entrepriseId?: SortOrder
    titreOffreEmploi?: SortOrder
    descripOffreEmploi?: SortOrder
    localiOffreEmploi?: SortOrder
    datePubliOffreEmploi?: SortOrder
    datelimitOffreEmploi?: SortOrder
    salaireOffreEmploi?: SortOrder
    typeContOffreEmploi?: SortOrder
    experienceOffreEmploi?: SortOrder
    nivEtuOffreEmploi?: SortOrder
    competencesOffreEmploi?: SortOrder
    _count?: OffreEmploiCountOrderByAggregateInput
    _avg?: OffreEmploiAvgOrderByAggregateInput
    _max?: OffreEmploiMaxOrderByAggregateInput
    _min?: OffreEmploiMinOrderByAggregateInput
    _sum?: OffreEmploiSumOrderByAggregateInput
  }

  export type OffreEmploiScalarWhereWithAggregatesInput = {
    AND?: OffreEmploiScalarWhereWithAggregatesInput | OffreEmploiScalarWhereWithAggregatesInput[]
    OR?: OffreEmploiScalarWhereWithAggregatesInput[]
    NOT?: OffreEmploiScalarWhereWithAggregatesInput | OffreEmploiScalarWhereWithAggregatesInput[]
    idOffreEmploi?: IntWithAggregatesFilter<"OffreEmploi"> | number
    entrepriseId?: IntWithAggregatesFilter<"OffreEmploi"> | number
    titreOffreEmploi?: StringWithAggregatesFilter<"OffreEmploi"> | string
    descripOffreEmploi?: StringWithAggregatesFilter<"OffreEmploi"> | string
    localiOffreEmploi?: StringWithAggregatesFilter<"OffreEmploi"> | string
    datePubliOffreEmploi?: DateTimeWithAggregatesFilter<"OffreEmploi"> | Date | string
    datelimitOffreEmploi?: DateTimeWithAggregatesFilter<"OffreEmploi"> | Date | string
    salaireOffreEmploi?: IntWithAggregatesFilter<"OffreEmploi"> | number
    typeContOffreEmploi?: StringWithAggregatesFilter<"OffreEmploi"> | string
    experienceOffreEmploi?: StringWithAggregatesFilter<"OffreEmploi"> | string
    nivEtuOffreEmploi?: StringWithAggregatesFilter<"OffreEmploi"> | string
    competencesOffreEmploi?: StringWithAggregatesFilter<"OffreEmploi"> | string
  }

  export type ProjetWhereInput = {
    AND?: ProjetWhereInput | ProjetWhereInput[]
    OR?: ProjetWhereInput[]
    NOT?: ProjetWhereInput | ProjetWhereInput[]
    idProjet?: IntFilter<"Projet"> | number
    entrepriseId?: IntFilter<"Projet"> | number
    titreProjet?: StringFilter<"Projet"> | string
    descripProjet?: StringFilter<"Projet"> | string
    BudgetProjet?: IntFilter<"Projet"> | number
    DelaiProjet?: IntFilter<"Projet"> | number
    entreprise?: XOR<EntrepriseRelationFilter, EntrepriseWhereInput>
    propositions?: PropositionListRelationFilter
  }

  export type ProjetOrderByWithRelationInput = {
    idProjet?: SortOrder
    entrepriseId?: SortOrder
    titreProjet?: SortOrder
    descripProjet?: SortOrder
    BudgetProjet?: SortOrder
    DelaiProjet?: SortOrder
    entreprise?: EntrepriseOrderByWithRelationInput
    propositions?: PropositionOrderByRelationAggregateInput
  }

  export type ProjetWhereUniqueInput = Prisma.AtLeast<{
    idProjet?: number
    AND?: ProjetWhereInput | ProjetWhereInput[]
    OR?: ProjetWhereInput[]
    NOT?: ProjetWhereInput | ProjetWhereInput[]
    entrepriseId?: IntFilter<"Projet"> | number
    titreProjet?: StringFilter<"Projet"> | string
    descripProjet?: StringFilter<"Projet"> | string
    BudgetProjet?: IntFilter<"Projet"> | number
    DelaiProjet?: IntFilter<"Projet"> | number
    entreprise?: XOR<EntrepriseRelationFilter, EntrepriseWhereInput>
    propositions?: PropositionListRelationFilter
  }, "idProjet">

  export type ProjetOrderByWithAggregationInput = {
    idProjet?: SortOrder
    entrepriseId?: SortOrder
    titreProjet?: SortOrder
    descripProjet?: SortOrder
    BudgetProjet?: SortOrder
    DelaiProjet?: SortOrder
    _count?: ProjetCountOrderByAggregateInput
    _avg?: ProjetAvgOrderByAggregateInput
    _max?: ProjetMaxOrderByAggregateInput
    _min?: ProjetMinOrderByAggregateInput
    _sum?: ProjetSumOrderByAggregateInput
  }

  export type ProjetScalarWhereWithAggregatesInput = {
    AND?: ProjetScalarWhereWithAggregatesInput | ProjetScalarWhereWithAggregatesInput[]
    OR?: ProjetScalarWhereWithAggregatesInput[]
    NOT?: ProjetScalarWhereWithAggregatesInput | ProjetScalarWhereWithAggregatesInput[]
    idProjet?: IntWithAggregatesFilter<"Projet"> | number
    entrepriseId?: IntWithAggregatesFilter<"Projet"> | number
    titreProjet?: StringWithAggregatesFilter<"Projet"> | string
    descripProjet?: StringWithAggregatesFilter<"Projet"> | string
    BudgetProjet?: IntWithAggregatesFilter<"Projet"> | number
    DelaiProjet?: IntWithAggregatesFilter<"Projet"> | number
  }

  export type PropositionWhereInput = {
    AND?: PropositionWhereInput | PropositionWhereInput[]
    OR?: PropositionWhereInput[]
    NOT?: PropositionWhereInput | PropositionWhereInput[]
    idProposition?: IntFilter<"Proposition"> | number
    projetId?: IntFilter<"Proposition"> | number
    freelancerId?: IntFilter<"Proposition"> | number
    delaiProposition?: IntFilter<"Proposition"> | number
    descripProposition?: StringFilter<"Proposition"> | string
    coutProposition?: IntFilter<"Proposition"> | number
    competenceProposition?: StringFilter<"Proposition"> | string
    projets?: XOR<ProjetRelationFilter, ProjetWhereInput>
    freelancer?: XOR<FreelancerRelationFilter, FreelancerWhereInput>
  }

  export type PropositionOrderByWithRelationInput = {
    idProposition?: SortOrder
    projetId?: SortOrder
    freelancerId?: SortOrder
    delaiProposition?: SortOrder
    descripProposition?: SortOrder
    coutProposition?: SortOrder
    competenceProposition?: SortOrder
    projets?: ProjetOrderByWithRelationInput
    freelancer?: FreelancerOrderByWithRelationInput
  }

  export type PropositionWhereUniqueInput = Prisma.AtLeast<{
    idProposition?: number
    AND?: PropositionWhereInput | PropositionWhereInput[]
    OR?: PropositionWhereInput[]
    NOT?: PropositionWhereInput | PropositionWhereInput[]
    projetId?: IntFilter<"Proposition"> | number
    freelancerId?: IntFilter<"Proposition"> | number
    delaiProposition?: IntFilter<"Proposition"> | number
    descripProposition?: StringFilter<"Proposition"> | string
    coutProposition?: IntFilter<"Proposition"> | number
    competenceProposition?: StringFilter<"Proposition"> | string
    projets?: XOR<ProjetRelationFilter, ProjetWhereInput>
    freelancer?: XOR<FreelancerRelationFilter, FreelancerWhereInput>
  }, "idProposition">

  export type PropositionOrderByWithAggregationInput = {
    idProposition?: SortOrder
    projetId?: SortOrder
    freelancerId?: SortOrder
    delaiProposition?: SortOrder
    descripProposition?: SortOrder
    coutProposition?: SortOrder
    competenceProposition?: SortOrder
    _count?: PropositionCountOrderByAggregateInput
    _avg?: PropositionAvgOrderByAggregateInput
    _max?: PropositionMaxOrderByAggregateInput
    _min?: PropositionMinOrderByAggregateInput
    _sum?: PropositionSumOrderByAggregateInput
  }

  export type PropositionScalarWhereWithAggregatesInput = {
    AND?: PropositionScalarWhereWithAggregatesInput | PropositionScalarWhereWithAggregatesInput[]
    OR?: PropositionScalarWhereWithAggregatesInput[]
    NOT?: PropositionScalarWhereWithAggregatesInput | PropositionScalarWhereWithAggregatesInput[]
    idProposition?: IntWithAggregatesFilter<"Proposition"> | number
    projetId?: IntWithAggregatesFilter<"Proposition"> | number
    freelancerId?: IntWithAggregatesFilter<"Proposition"> | number
    delaiProposition?: IntWithAggregatesFilter<"Proposition"> | number
    descripProposition?: StringWithAggregatesFilter<"Proposition"> | string
    coutProposition?: IntWithAggregatesFilter<"Proposition"> | number
    competenceProposition?: StringWithAggregatesFilter<"Proposition"> | string
  }

  export type AccountCreateInput = {
    id?: string
    type: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    user: UserCreateNestedOneWithoutAccountsInput
  }

  export type AccountUncheckedCreateInput = {
    id?: string
    userId: number
    type: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutAccountsNestedInput
  }

  export type AccountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountCreateManyInput = {
    id?: string
    userId: number
    type: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountVerificationCreateInput = {
    accountType?: string
    verifiedAt?: Date | string | null
    createdAt: Date | string
    verified: boolean
    ip?: string | null
    firstName?: string | null
    lastName?: string | null
    code: string
    userName: string
    password: string
    attempt?: number | null
    userId: number
  }

  export type AccountVerificationUncheckedCreateInput = {
    id?: number
    accountType?: string
    verifiedAt?: Date | string | null
    createdAt: Date | string
    verified: boolean
    ip?: string | null
    firstName?: string | null
    lastName?: string | null
    code: string
    userName: string
    password: string
    attempt?: number | null
    userId: number
  }

  export type AccountVerificationUpdateInput = {
    accountType?: StringFieldUpdateOperationsInput | string
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    attempt?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type AccountVerificationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    accountType?: StringFieldUpdateOperationsInput | string
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    attempt?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type AccountVerificationCreateManyInput = {
    id?: number
    accountType?: string
    verifiedAt?: Date | string | null
    createdAt: Date | string
    verified: boolean
    ip?: string | null
    firstName?: string | null
    lastName?: string | null
    code: string
    userName: string
    password: string
    attempt?: number | null
    userId: number
  }

  export type AccountVerificationUpdateManyMutationInput = {
    accountType?: StringFieldUpdateOperationsInput | string
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    attempt?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type AccountVerificationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    accountType?: StringFieldUpdateOperationsInput | string
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    attempt?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type PasswordResetCreateInput = {
    userId: number
    code: string
    attempt: number
    ip: string
    createdAt?: Date | string | null
    codeVerified?: boolean
    codeVerifiedAt?: Date | string | null
    reset?: boolean
    resetAt?: Date | string | null
  }

  export type PasswordResetUncheckedCreateInput = {
    id?: number
    userId: number
    code: string
    attempt: number
    ip: string
    createdAt?: Date | string | null
    codeVerified?: boolean
    codeVerifiedAt?: Date | string | null
    reset?: boolean
    resetAt?: Date | string | null
  }

  export type PasswordResetUpdateInput = {
    userId?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    attempt?: IntFieldUpdateOperationsInput | number
    ip?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    codeVerified?: BoolFieldUpdateOperationsInput | boolean
    codeVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reset?: BoolFieldUpdateOperationsInput | boolean
    resetAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PasswordResetUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    attempt?: IntFieldUpdateOperationsInput | number
    ip?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    codeVerified?: BoolFieldUpdateOperationsInput | boolean
    codeVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reset?: BoolFieldUpdateOperationsInput | boolean
    resetAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PasswordResetCreateManyInput = {
    id?: number
    userId: number
    code: string
    attempt: number
    ip: string
    createdAt?: Date | string | null
    codeVerified?: boolean
    codeVerifiedAt?: Date | string | null
    reset?: boolean
    resetAt?: Date | string | null
  }

  export type PasswordResetUpdateManyMutationInput = {
    userId?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    attempt?: IntFieldUpdateOperationsInput | number
    ip?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    codeVerified?: BoolFieldUpdateOperationsInput | boolean
    codeVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reset?: BoolFieldUpdateOperationsInput | boolean
    resetAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PasswordResetUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    attempt?: IntFieldUpdateOperationsInput | number
    ip?: StringFieldUpdateOperationsInput | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    codeVerified?: BoolFieldUpdateOperationsInput | boolean
    codeVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reset?: BoolFieldUpdateOperationsInput | boolean
    resetAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SessionCreateInput = {
    sessionToken: string
    expires: Date | string
    active?: boolean
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateInput = {
    id?: number
    sessionToken: string
    userId: number
    expires: Date | string
    active?: boolean
  }

  export type SessionUpdateInput = {
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    active?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SessionCreateManyInput = {
    id?: number
    sessionToken: string
    userId: number
    expires: Date | string
    active?: boolean
  }

  export type SessionUpdateManyMutationInput = {
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserCreateInput = {
    firstName?: string | null
    lastName?: string | null
    email?: string | null
    userName?: string | null
    phoneNumber?: string | null
    passwordHash?: string | null
    active?: boolean | null
    createdAt?: Date | string | null
    verifiedAt?: Date | string | null
    signupMethod?: string | null
    image?: string | null
    entreprise?: EntrepriseCreateNestedManyWithoutUserInput
    candidat?: CandidatCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    firstName?: string | null
    lastName?: string | null
    email?: string | null
    userName?: string | null
    phoneNumber?: string | null
    passwordHash?: string | null
    active?: boolean | null
    createdAt?: Date | string | null
    verifiedAt?: Date | string | null
    signupMethod?: string | null
    image?: string | null
    entreprise?: EntrepriseUncheckedCreateNestedManyWithoutUserInput
    candidat?: CandidatUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    userName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    active?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    signupMethod?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    entreprise?: EntrepriseUpdateManyWithoutUserNestedInput
    candidat?: CandidatUpdateManyWithoutUserNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    userName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    active?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    signupMethod?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    entreprise?: EntrepriseUncheckedUpdateManyWithoutUserNestedInput
    candidat?: CandidatUncheckedUpdateManyWithoutUserNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    firstName?: string | null
    lastName?: string | null
    email?: string | null
    userName?: string | null
    phoneNumber?: string | null
    passwordHash?: string | null
    active?: boolean | null
    createdAt?: Date | string | null
    verifiedAt?: Date | string | null
    signupMethod?: string | null
    image?: string | null
  }

  export type UserUpdateManyMutationInput = {
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    userName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    active?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    signupMethod?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    userName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    active?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    signupMethod?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CandidatCreateInput = {
    adresCandidat?: string | null
    experienceCandidat?: string | null
    nivEtudesCandidat?: string | null
    competencesCandidat?: string | null
    cVCandidat?: string | null
    user: UserCreateNestedOneWithoutCandidatInput
    entretiens?: EntretienCreateNestedManyWithoutCandidatInput
    notes?: NoteCreateNestedManyWithoutCandidatInput
  }

  export type CandidatUncheckedCreateInput = {
    idCandidat?: number
    adresCandidat?: string | null
    experienceCandidat?: string | null
    nivEtudesCandidat?: string | null
    competencesCandidat?: string | null
    cVCandidat?: string | null
    userId: number
    entretiens?: EntretienUncheckedCreateNestedManyWithoutCandidatInput
    notes?: NoteUncheckedCreateNestedManyWithoutCandidatInput
  }

  export type CandidatUpdateInput = {
    adresCandidat?: NullableStringFieldUpdateOperationsInput | string | null
    experienceCandidat?: NullableStringFieldUpdateOperationsInput | string | null
    nivEtudesCandidat?: NullableStringFieldUpdateOperationsInput | string | null
    competencesCandidat?: NullableStringFieldUpdateOperationsInput | string | null
    cVCandidat?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutCandidatNestedInput
    entretiens?: EntretienUpdateManyWithoutCandidatNestedInput
    notes?: NoteUpdateManyWithoutCandidatNestedInput
  }

  export type CandidatUncheckedUpdateInput = {
    idCandidat?: IntFieldUpdateOperationsInput | number
    adresCandidat?: NullableStringFieldUpdateOperationsInput | string | null
    experienceCandidat?: NullableStringFieldUpdateOperationsInput | string | null
    nivEtudesCandidat?: NullableStringFieldUpdateOperationsInput | string | null
    competencesCandidat?: NullableStringFieldUpdateOperationsInput | string | null
    cVCandidat?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    entretiens?: EntretienUncheckedUpdateManyWithoutCandidatNestedInput
    notes?: NoteUncheckedUpdateManyWithoutCandidatNestedInput
  }

  export type CandidatCreateManyInput = {
    idCandidat?: number
    adresCandidat?: string | null
    experienceCandidat?: string | null
    nivEtudesCandidat?: string | null
    competencesCandidat?: string | null
    cVCandidat?: string | null
    userId: number
  }

  export type CandidatUpdateManyMutationInput = {
    adresCandidat?: NullableStringFieldUpdateOperationsInput | string | null
    experienceCandidat?: NullableStringFieldUpdateOperationsInput | string | null
    nivEtudesCandidat?: NullableStringFieldUpdateOperationsInput | string | null
    competencesCandidat?: NullableStringFieldUpdateOperationsInput | string | null
    cVCandidat?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CandidatUncheckedUpdateManyInput = {
    idCandidat?: IntFieldUpdateOperationsInput | number
    adresCandidat?: NullableStringFieldUpdateOperationsInput | string | null
    experienceCandidat?: NullableStringFieldUpdateOperationsInput | string | null
    nivEtudesCandidat?: NullableStringFieldUpdateOperationsInput | string | null
    competencesCandidat?: NullableStringFieldUpdateOperationsInput | string | null
    cVCandidat?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type ContratCreateInput = {
    titreProjContrat: string
    datDebConrat: Date | string
    datFinConrat: Date | string
    coutContrat: number
    descripContrat: string
    statutContrat: string
    entreprise: EntrepriseCreateNestedOneWithoutContratsInput
    freelancer: FreelancerCreateNestedOneWithoutContratsInput
  }

  export type ContratUncheckedCreateInput = {
    idContrat?: number
    entrepriseId: number
    freelancerId: number
    titreProjContrat: string
    datDebConrat: Date | string
    datFinConrat: Date | string
    coutContrat: number
    descripContrat: string
    statutContrat: string
  }

  export type ContratUpdateInput = {
    titreProjContrat?: StringFieldUpdateOperationsInput | string
    datDebConrat?: DateTimeFieldUpdateOperationsInput | Date | string
    datFinConrat?: DateTimeFieldUpdateOperationsInput | Date | string
    coutContrat?: IntFieldUpdateOperationsInput | number
    descripContrat?: StringFieldUpdateOperationsInput | string
    statutContrat?: StringFieldUpdateOperationsInput | string
    entreprise?: EntrepriseUpdateOneRequiredWithoutContratsNestedInput
    freelancer?: FreelancerUpdateOneRequiredWithoutContratsNestedInput
  }

  export type ContratUncheckedUpdateInput = {
    idContrat?: IntFieldUpdateOperationsInput | number
    entrepriseId?: IntFieldUpdateOperationsInput | number
    freelancerId?: IntFieldUpdateOperationsInput | number
    titreProjContrat?: StringFieldUpdateOperationsInput | string
    datDebConrat?: DateTimeFieldUpdateOperationsInput | Date | string
    datFinConrat?: DateTimeFieldUpdateOperationsInput | Date | string
    coutContrat?: IntFieldUpdateOperationsInput | number
    descripContrat?: StringFieldUpdateOperationsInput | string
    statutContrat?: StringFieldUpdateOperationsInput | string
  }

  export type ContratCreateManyInput = {
    idContrat?: number
    entrepriseId: number
    freelancerId: number
    titreProjContrat: string
    datDebConrat: Date | string
    datFinConrat: Date | string
    coutContrat: number
    descripContrat: string
    statutContrat: string
  }

  export type ContratUpdateManyMutationInput = {
    titreProjContrat?: StringFieldUpdateOperationsInput | string
    datDebConrat?: DateTimeFieldUpdateOperationsInput | Date | string
    datFinConrat?: DateTimeFieldUpdateOperationsInput | Date | string
    coutContrat?: IntFieldUpdateOperationsInput | number
    descripContrat?: StringFieldUpdateOperationsInput | string
    statutContrat?: StringFieldUpdateOperationsInput | string
  }

  export type ContratUncheckedUpdateManyInput = {
    idContrat?: IntFieldUpdateOperationsInput | number
    entrepriseId?: IntFieldUpdateOperationsInput | number
    freelancerId?: IntFieldUpdateOperationsInput | number
    titreProjContrat?: StringFieldUpdateOperationsInput | string
    datDebConrat?: DateTimeFieldUpdateOperationsInput | Date | string
    datFinConrat?: DateTimeFieldUpdateOperationsInput | Date | string
    coutContrat?: IntFieldUpdateOperationsInput | number
    descripContrat?: StringFieldUpdateOperationsInput | string
    statutContrat?: StringFieldUpdateOperationsInput | string
  }

  export type EntrepriseCreateInput = {
    nomEntreprise?: string | null
    adresEntreprise?: string | null
    contactEntreprise?: string | null
    sectActivEntreprise?: string | null
    tailleEntreprise?: string | null
    logoEntreprise?: string | null
    descripEntreprise?: string | null
    siteWebEntreprise?: string | null
    user: UserCreateNestedOneWithoutEntrepriseInput
    offreEmplois?: OffreEmploiCreateNestedManyWithoutEntrepriseInput
    entretiens?: EntretienCreateNestedManyWithoutEntrepriseInput
    contrats?: ContratCreateNestedManyWithoutEntrepriseInput
    projets?: ProjetCreateNestedManyWithoutEntrepriseInput
    notes?: NoteCreateNestedManyWithoutEntrepriseInput
  }

  export type EntrepriseUncheckedCreateInput = {
    idEntreprise?: number
    nomEntreprise?: string | null
    adresEntreprise?: string | null
    contactEntreprise?: string | null
    sectActivEntreprise?: string | null
    tailleEntreprise?: string | null
    logoEntreprise?: string | null
    descripEntreprise?: string | null
    siteWebEntreprise?: string | null
    userId: number
    offreEmplois?: OffreEmploiUncheckedCreateNestedManyWithoutEntrepriseInput
    entretiens?: EntretienUncheckedCreateNestedManyWithoutEntrepriseInput
    contrats?: ContratUncheckedCreateNestedManyWithoutEntrepriseInput
    projets?: ProjetUncheckedCreateNestedManyWithoutEntrepriseInput
    notes?: NoteUncheckedCreateNestedManyWithoutEntrepriseInput
  }

  export type EntrepriseUpdateInput = {
    nomEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    adresEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    contactEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    sectActivEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    tailleEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    logoEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    descripEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    siteWebEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutEntrepriseNestedInput
    offreEmplois?: OffreEmploiUpdateManyWithoutEntrepriseNestedInput
    entretiens?: EntretienUpdateManyWithoutEntrepriseNestedInput
    contrats?: ContratUpdateManyWithoutEntrepriseNestedInput
    projets?: ProjetUpdateManyWithoutEntrepriseNestedInput
    notes?: NoteUpdateManyWithoutEntrepriseNestedInput
  }

  export type EntrepriseUncheckedUpdateInput = {
    idEntreprise?: IntFieldUpdateOperationsInput | number
    nomEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    adresEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    contactEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    sectActivEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    tailleEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    logoEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    descripEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    siteWebEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    offreEmplois?: OffreEmploiUncheckedUpdateManyWithoutEntrepriseNestedInput
    entretiens?: EntretienUncheckedUpdateManyWithoutEntrepriseNestedInput
    contrats?: ContratUncheckedUpdateManyWithoutEntrepriseNestedInput
    projets?: ProjetUncheckedUpdateManyWithoutEntrepriseNestedInput
    notes?: NoteUncheckedUpdateManyWithoutEntrepriseNestedInput
  }

  export type EntrepriseCreateManyInput = {
    idEntreprise?: number
    nomEntreprise?: string | null
    adresEntreprise?: string | null
    contactEntreprise?: string | null
    sectActivEntreprise?: string | null
    tailleEntreprise?: string | null
    logoEntreprise?: string | null
    descripEntreprise?: string | null
    siteWebEntreprise?: string | null
    userId: number
  }

  export type EntrepriseUpdateManyMutationInput = {
    nomEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    adresEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    contactEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    sectActivEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    tailleEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    logoEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    descripEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    siteWebEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EntrepriseUncheckedUpdateManyInput = {
    idEntreprise?: IntFieldUpdateOperationsInput | number
    nomEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    adresEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    contactEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    sectActivEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    tailleEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    logoEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    descripEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    siteWebEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type EntretienCreateInput = {
    dateEntretien: Date | string
    adresEntretien: string
    recruEntretien: string
    typeEntretien: string
    descripEntreprise: string
    entreprise: EntrepriseCreateNestedOneWithoutEntretiensInput
    candidat: CandidatCreateNestedOneWithoutEntretiensInput
  }

  export type EntretienUncheckedCreateInput = {
    idEntretien?: number
    entrepriseId: number
    candidatId: number
    dateEntretien: Date | string
    adresEntretien: string
    recruEntretien: string
    typeEntretien: string
    descripEntreprise: string
  }

  export type EntretienUpdateInput = {
    dateEntretien?: DateTimeFieldUpdateOperationsInput | Date | string
    adresEntretien?: StringFieldUpdateOperationsInput | string
    recruEntretien?: StringFieldUpdateOperationsInput | string
    typeEntretien?: StringFieldUpdateOperationsInput | string
    descripEntreprise?: StringFieldUpdateOperationsInput | string
    entreprise?: EntrepriseUpdateOneRequiredWithoutEntretiensNestedInput
    candidat?: CandidatUpdateOneRequiredWithoutEntretiensNestedInput
  }

  export type EntretienUncheckedUpdateInput = {
    idEntretien?: IntFieldUpdateOperationsInput | number
    entrepriseId?: IntFieldUpdateOperationsInput | number
    candidatId?: IntFieldUpdateOperationsInput | number
    dateEntretien?: DateTimeFieldUpdateOperationsInput | Date | string
    adresEntretien?: StringFieldUpdateOperationsInput | string
    recruEntretien?: StringFieldUpdateOperationsInput | string
    typeEntretien?: StringFieldUpdateOperationsInput | string
    descripEntreprise?: StringFieldUpdateOperationsInput | string
  }

  export type EntretienCreateManyInput = {
    idEntretien?: number
    entrepriseId: number
    candidatId: number
    dateEntretien: Date | string
    adresEntretien: string
    recruEntretien: string
    typeEntretien: string
    descripEntreprise: string
  }

  export type EntretienUpdateManyMutationInput = {
    dateEntretien?: DateTimeFieldUpdateOperationsInput | Date | string
    adresEntretien?: StringFieldUpdateOperationsInput | string
    recruEntretien?: StringFieldUpdateOperationsInput | string
    typeEntretien?: StringFieldUpdateOperationsInput | string
    descripEntreprise?: StringFieldUpdateOperationsInput | string
  }

  export type EntretienUncheckedUpdateManyInput = {
    idEntretien?: IntFieldUpdateOperationsInput | number
    entrepriseId?: IntFieldUpdateOperationsInput | number
    candidatId?: IntFieldUpdateOperationsInput | number
    dateEntretien?: DateTimeFieldUpdateOperationsInput | Date | string
    adresEntretien?: StringFieldUpdateOperationsInput | string
    recruEntretien?: StringFieldUpdateOperationsInput | string
    typeEntretien?: StringFieldUpdateOperationsInput | string
    descripEntreprise?: StringFieldUpdateOperationsInput | string
  }

  export type FreelancerCreateInput = {
    nomFreelancer: string
    prenomFreelancer: string
    adresFreelancer: string
    TelFreelancer: string
    emailFreelancer: string
    competencesFreelancer: string
    experienceFreelancer: string
    portfolioFreelancer: string
    propositions?: PropositionCreateNestedManyWithoutFreelancerInput
    contrats?: ContratCreateNestedManyWithoutFreelancerInput
  }

  export type FreelancerUncheckedCreateInput = {
    idFreelancer?: number
    nomFreelancer: string
    prenomFreelancer: string
    adresFreelancer: string
    TelFreelancer: string
    emailFreelancer: string
    competencesFreelancer: string
    experienceFreelancer: string
    portfolioFreelancer: string
    propositions?: PropositionUncheckedCreateNestedManyWithoutFreelancerInput
    contrats?: ContratUncheckedCreateNestedManyWithoutFreelancerInput
  }

  export type FreelancerUpdateInput = {
    nomFreelancer?: StringFieldUpdateOperationsInput | string
    prenomFreelancer?: StringFieldUpdateOperationsInput | string
    adresFreelancer?: StringFieldUpdateOperationsInput | string
    TelFreelancer?: StringFieldUpdateOperationsInput | string
    emailFreelancer?: StringFieldUpdateOperationsInput | string
    competencesFreelancer?: StringFieldUpdateOperationsInput | string
    experienceFreelancer?: StringFieldUpdateOperationsInput | string
    portfolioFreelancer?: StringFieldUpdateOperationsInput | string
    propositions?: PropositionUpdateManyWithoutFreelancerNestedInput
    contrats?: ContratUpdateManyWithoutFreelancerNestedInput
  }

  export type FreelancerUncheckedUpdateInput = {
    idFreelancer?: IntFieldUpdateOperationsInput | number
    nomFreelancer?: StringFieldUpdateOperationsInput | string
    prenomFreelancer?: StringFieldUpdateOperationsInput | string
    adresFreelancer?: StringFieldUpdateOperationsInput | string
    TelFreelancer?: StringFieldUpdateOperationsInput | string
    emailFreelancer?: StringFieldUpdateOperationsInput | string
    competencesFreelancer?: StringFieldUpdateOperationsInput | string
    experienceFreelancer?: StringFieldUpdateOperationsInput | string
    portfolioFreelancer?: StringFieldUpdateOperationsInput | string
    propositions?: PropositionUncheckedUpdateManyWithoutFreelancerNestedInput
    contrats?: ContratUncheckedUpdateManyWithoutFreelancerNestedInput
  }

  export type FreelancerCreateManyInput = {
    idFreelancer?: number
    nomFreelancer: string
    prenomFreelancer: string
    adresFreelancer: string
    TelFreelancer: string
    emailFreelancer: string
    competencesFreelancer: string
    experienceFreelancer: string
    portfolioFreelancer: string
  }

  export type FreelancerUpdateManyMutationInput = {
    nomFreelancer?: StringFieldUpdateOperationsInput | string
    prenomFreelancer?: StringFieldUpdateOperationsInput | string
    adresFreelancer?: StringFieldUpdateOperationsInput | string
    TelFreelancer?: StringFieldUpdateOperationsInput | string
    emailFreelancer?: StringFieldUpdateOperationsInput | string
    competencesFreelancer?: StringFieldUpdateOperationsInput | string
    experienceFreelancer?: StringFieldUpdateOperationsInput | string
    portfolioFreelancer?: StringFieldUpdateOperationsInput | string
  }

  export type FreelancerUncheckedUpdateManyInput = {
    idFreelancer?: IntFieldUpdateOperationsInput | number
    nomFreelancer?: StringFieldUpdateOperationsInput | string
    prenomFreelancer?: StringFieldUpdateOperationsInput | string
    adresFreelancer?: StringFieldUpdateOperationsInput | string
    TelFreelancer?: StringFieldUpdateOperationsInput | string
    emailFreelancer?: StringFieldUpdateOperationsInput | string
    competencesFreelancer?: StringFieldUpdateOperationsInput | string
    experienceFreelancer?: StringFieldUpdateOperationsInput | string
    portfolioFreelancer?: StringFieldUpdateOperationsInput | string
  }

  export type NoteCreateInput = {
    Note: Decimal | DecimalJsLike | number | string
    commentNote: string
    dateNote: Date | string
    entreprise: EntrepriseCreateNestedOneWithoutNotesInput
    candidat: CandidatCreateNestedOneWithoutNotesInput
  }

  export type NoteUncheckedCreateInput = {
    idNote?: number
    entrepriseId: number
    candidatId: number
    Note: Decimal | DecimalJsLike | number | string
    commentNote: string
    dateNote: Date | string
  }

  export type NoteUpdateInput = {
    Note?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    commentNote?: StringFieldUpdateOperationsInput | string
    dateNote?: DateTimeFieldUpdateOperationsInput | Date | string
    entreprise?: EntrepriseUpdateOneRequiredWithoutNotesNestedInput
    candidat?: CandidatUpdateOneRequiredWithoutNotesNestedInput
  }

  export type NoteUncheckedUpdateInput = {
    idNote?: IntFieldUpdateOperationsInput | number
    entrepriseId?: IntFieldUpdateOperationsInput | number
    candidatId?: IntFieldUpdateOperationsInput | number
    Note?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    commentNote?: StringFieldUpdateOperationsInput | string
    dateNote?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NoteCreateManyInput = {
    idNote?: number
    entrepriseId: number
    candidatId: number
    Note: Decimal | DecimalJsLike | number | string
    commentNote: string
    dateNote: Date | string
  }

  export type NoteUpdateManyMutationInput = {
    Note?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    commentNote?: StringFieldUpdateOperationsInput | string
    dateNote?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NoteUncheckedUpdateManyInput = {
    idNote?: IntFieldUpdateOperationsInput | number
    entrepriseId?: IntFieldUpdateOperationsInput | number
    candidatId?: IntFieldUpdateOperationsInput | number
    Note?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    commentNote?: StringFieldUpdateOperationsInput | string
    dateNote?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OffreEmploiCreateInput = {
    titreOffreEmploi: string
    descripOffreEmploi: string
    localiOffreEmploi: string
    datePubliOffreEmploi: Date | string
    datelimitOffreEmploi: Date | string
    salaireOffreEmploi: number
    typeContOffreEmploi: string
    experienceOffreEmploi: string
    nivEtuOffreEmploi: string
    competencesOffreEmploi: string
    entreprise: EntrepriseCreateNestedOneWithoutOffreEmploisInput
  }

  export type OffreEmploiUncheckedCreateInput = {
    idOffreEmploi?: number
    entrepriseId: number
    titreOffreEmploi: string
    descripOffreEmploi: string
    localiOffreEmploi: string
    datePubliOffreEmploi: Date | string
    datelimitOffreEmploi: Date | string
    salaireOffreEmploi: number
    typeContOffreEmploi: string
    experienceOffreEmploi: string
    nivEtuOffreEmploi: string
    competencesOffreEmploi: string
  }

  export type OffreEmploiUpdateInput = {
    titreOffreEmploi?: StringFieldUpdateOperationsInput | string
    descripOffreEmploi?: StringFieldUpdateOperationsInput | string
    localiOffreEmploi?: StringFieldUpdateOperationsInput | string
    datePubliOffreEmploi?: DateTimeFieldUpdateOperationsInput | Date | string
    datelimitOffreEmploi?: DateTimeFieldUpdateOperationsInput | Date | string
    salaireOffreEmploi?: IntFieldUpdateOperationsInput | number
    typeContOffreEmploi?: StringFieldUpdateOperationsInput | string
    experienceOffreEmploi?: StringFieldUpdateOperationsInput | string
    nivEtuOffreEmploi?: StringFieldUpdateOperationsInput | string
    competencesOffreEmploi?: StringFieldUpdateOperationsInput | string
    entreprise?: EntrepriseUpdateOneRequiredWithoutOffreEmploisNestedInput
  }

  export type OffreEmploiUncheckedUpdateInput = {
    idOffreEmploi?: IntFieldUpdateOperationsInput | number
    entrepriseId?: IntFieldUpdateOperationsInput | number
    titreOffreEmploi?: StringFieldUpdateOperationsInput | string
    descripOffreEmploi?: StringFieldUpdateOperationsInput | string
    localiOffreEmploi?: StringFieldUpdateOperationsInput | string
    datePubliOffreEmploi?: DateTimeFieldUpdateOperationsInput | Date | string
    datelimitOffreEmploi?: DateTimeFieldUpdateOperationsInput | Date | string
    salaireOffreEmploi?: IntFieldUpdateOperationsInput | number
    typeContOffreEmploi?: StringFieldUpdateOperationsInput | string
    experienceOffreEmploi?: StringFieldUpdateOperationsInput | string
    nivEtuOffreEmploi?: StringFieldUpdateOperationsInput | string
    competencesOffreEmploi?: StringFieldUpdateOperationsInput | string
  }

  export type OffreEmploiCreateManyInput = {
    idOffreEmploi?: number
    entrepriseId: number
    titreOffreEmploi: string
    descripOffreEmploi: string
    localiOffreEmploi: string
    datePubliOffreEmploi: Date | string
    datelimitOffreEmploi: Date | string
    salaireOffreEmploi: number
    typeContOffreEmploi: string
    experienceOffreEmploi: string
    nivEtuOffreEmploi: string
    competencesOffreEmploi: string
  }

  export type OffreEmploiUpdateManyMutationInput = {
    titreOffreEmploi?: StringFieldUpdateOperationsInput | string
    descripOffreEmploi?: StringFieldUpdateOperationsInput | string
    localiOffreEmploi?: StringFieldUpdateOperationsInput | string
    datePubliOffreEmploi?: DateTimeFieldUpdateOperationsInput | Date | string
    datelimitOffreEmploi?: DateTimeFieldUpdateOperationsInput | Date | string
    salaireOffreEmploi?: IntFieldUpdateOperationsInput | number
    typeContOffreEmploi?: StringFieldUpdateOperationsInput | string
    experienceOffreEmploi?: StringFieldUpdateOperationsInput | string
    nivEtuOffreEmploi?: StringFieldUpdateOperationsInput | string
    competencesOffreEmploi?: StringFieldUpdateOperationsInput | string
  }

  export type OffreEmploiUncheckedUpdateManyInput = {
    idOffreEmploi?: IntFieldUpdateOperationsInput | number
    entrepriseId?: IntFieldUpdateOperationsInput | number
    titreOffreEmploi?: StringFieldUpdateOperationsInput | string
    descripOffreEmploi?: StringFieldUpdateOperationsInput | string
    localiOffreEmploi?: StringFieldUpdateOperationsInput | string
    datePubliOffreEmploi?: DateTimeFieldUpdateOperationsInput | Date | string
    datelimitOffreEmploi?: DateTimeFieldUpdateOperationsInput | Date | string
    salaireOffreEmploi?: IntFieldUpdateOperationsInput | number
    typeContOffreEmploi?: StringFieldUpdateOperationsInput | string
    experienceOffreEmploi?: StringFieldUpdateOperationsInput | string
    nivEtuOffreEmploi?: StringFieldUpdateOperationsInput | string
    competencesOffreEmploi?: StringFieldUpdateOperationsInput | string
  }

  export type ProjetCreateInput = {
    titreProjet: string
    descripProjet: string
    BudgetProjet: number
    DelaiProjet: number
    entreprise: EntrepriseCreateNestedOneWithoutProjetsInput
    propositions?: PropositionCreateNestedManyWithoutProjetsInput
  }

  export type ProjetUncheckedCreateInput = {
    idProjet?: number
    entrepriseId: number
    titreProjet: string
    descripProjet: string
    BudgetProjet: number
    DelaiProjet: number
    propositions?: PropositionUncheckedCreateNestedManyWithoutProjetsInput
  }

  export type ProjetUpdateInput = {
    titreProjet?: StringFieldUpdateOperationsInput | string
    descripProjet?: StringFieldUpdateOperationsInput | string
    BudgetProjet?: IntFieldUpdateOperationsInput | number
    DelaiProjet?: IntFieldUpdateOperationsInput | number
    entreprise?: EntrepriseUpdateOneRequiredWithoutProjetsNestedInput
    propositions?: PropositionUpdateManyWithoutProjetsNestedInput
  }

  export type ProjetUncheckedUpdateInput = {
    idProjet?: IntFieldUpdateOperationsInput | number
    entrepriseId?: IntFieldUpdateOperationsInput | number
    titreProjet?: StringFieldUpdateOperationsInput | string
    descripProjet?: StringFieldUpdateOperationsInput | string
    BudgetProjet?: IntFieldUpdateOperationsInput | number
    DelaiProjet?: IntFieldUpdateOperationsInput | number
    propositions?: PropositionUncheckedUpdateManyWithoutProjetsNestedInput
  }

  export type ProjetCreateManyInput = {
    idProjet?: number
    entrepriseId: number
    titreProjet: string
    descripProjet: string
    BudgetProjet: number
    DelaiProjet: number
  }

  export type ProjetUpdateManyMutationInput = {
    titreProjet?: StringFieldUpdateOperationsInput | string
    descripProjet?: StringFieldUpdateOperationsInput | string
    BudgetProjet?: IntFieldUpdateOperationsInput | number
    DelaiProjet?: IntFieldUpdateOperationsInput | number
  }

  export type ProjetUncheckedUpdateManyInput = {
    idProjet?: IntFieldUpdateOperationsInput | number
    entrepriseId?: IntFieldUpdateOperationsInput | number
    titreProjet?: StringFieldUpdateOperationsInput | string
    descripProjet?: StringFieldUpdateOperationsInput | string
    BudgetProjet?: IntFieldUpdateOperationsInput | number
    DelaiProjet?: IntFieldUpdateOperationsInput | number
  }

  export type PropositionCreateInput = {
    delaiProposition: number
    descripProposition: string
    coutProposition: number
    competenceProposition: string
    projets: ProjetCreateNestedOneWithoutPropositionsInput
    freelancer: FreelancerCreateNestedOneWithoutPropositionsInput
  }

  export type PropositionUncheckedCreateInput = {
    idProposition?: number
    projetId: number
    freelancerId: number
    delaiProposition: number
    descripProposition: string
    coutProposition: number
    competenceProposition: string
  }

  export type PropositionUpdateInput = {
    delaiProposition?: IntFieldUpdateOperationsInput | number
    descripProposition?: StringFieldUpdateOperationsInput | string
    coutProposition?: IntFieldUpdateOperationsInput | number
    competenceProposition?: StringFieldUpdateOperationsInput | string
    projets?: ProjetUpdateOneRequiredWithoutPropositionsNestedInput
    freelancer?: FreelancerUpdateOneRequiredWithoutPropositionsNestedInput
  }

  export type PropositionUncheckedUpdateInput = {
    idProposition?: IntFieldUpdateOperationsInput | number
    projetId?: IntFieldUpdateOperationsInput | number
    freelancerId?: IntFieldUpdateOperationsInput | number
    delaiProposition?: IntFieldUpdateOperationsInput | number
    descripProposition?: StringFieldUpdateOperationsInput | string
    coutProposition?: IntFieldUpdateOperationsInput | number
    competenceProposition?: StringFieldUpdateOperationsInput | string
  }

  export type PropositionCreateManyInput = {
    idProposition?: number
    projetId: number
    freelancerId: number
    delaiProposition: number
    descripProposition: string
    coutProposition: number
    competenceProposition: string
  }

  export type PropositionUpdateManyMutationInput = {
    delaiProposition?: IntFieldUpdateOperationsInput | number
    descripProposition?: StringFieldUpdateOperationsInput | string
    coutProposition?: IntFieldUpdateOperationsInput | number
    competenceProposition?: StringFieldUpdateOperationsInput | string
  }

  export type PropositionUncheckedUpdateManyInput = {
    idProposition?: IntFieldUpdateOperationsInput | number
    projetId?: IntFieldUpdateOperationsInput | number
    freelancerId?: IntFieldUpdateOperationsInput | number
    delaiProposition?: IntFieldUpdateOperationsInput | number
    descripProposition?: StringFieldUpdateOperationsInput | string
    coutProposition?: IntFieldUpdateOperationsInput | number
    competenceProposition?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AccountCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountAvgOrderByAggregateInput = {
    userId?: SortOrder
    expires_at?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountSumOrderByAggregateInput = {
    userId?: SortOrder
    expires_at?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type AccountVerificationCountOrderByAggregateInput = {
    id?: SortOrder
    accountType?: SortOrder
    verifiedAt?: SortOrder
    createdAt?: SortOrder
    verified?: SortOrder
    ip?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    code?: SortOrder
    userName?: SortOrder
    password?: SortOrder
    attempt?: SortOrder
    userId?: SortOrder
  }

  export type AccountVerificationAvgOrderByAggregateInput = {
    id?: SortOrder
    attempt?: SortOrder
    userId?: SortOrder
  }

  export type AccountVerificationMaxOrderByAggregateInput = {
    id?: SortOrder
    accountType?: SortOrder
    verifiedAt?: SortOrder
    createdAt?: SortOrder
    verified?: SortOrder
    ip?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    code?: SortOrder
    userName?: SortOrder
    password?: SortOrder
    attempt?: SortOrder
    userId?: SortOrder
  }

  export type AccountVerificationMinOrderByAggregateInput = {
    id?: SortOrder
    accountType?: SortOrder
    verifiedAt?: SortOrder
    createdAt?: SortOrder
    verified?: SortOrder
    ip?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    code?: SortOrder
    userName?: SortOrder
    password?: SortOrder
    attempt?: SortOrder
    userId?: SortOrder
  }

  export type AccountVerificationSumOrderByAggregateInput = {
    id?: SortOrder
    attempt?: SortOrder
    userId?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type PasswordResetCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    code?: SortOrder
    attempt?: SortOrder
    ip?: SortOrder
    createdAt?: SortOrder
    codeVerified?: SortOrder
    codeVerifiedAt?: SortOrder
    reset?: SortOrder
    resetAt?: SortOrder
  }

  export type PasswordResetAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    attempt?: SortOrder
  }

  export type PasswordResetMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    code?: SortOrder
    attempt?: SortOrder
    ip?: SortOrder
    createdAt?: SortOrder
    codeVerified?: SortOrder
    codeVerifiedAt?: SortOrder
    reset?: SortOrder
    resetAt?: SortOrder
  }

  export type PasswordResetMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    code?: SortOrder
    attempt?: SortOrder
    ip?: SortOrder
    createdAt?: SortOrder
    codeVerified?: SortOrder
    codeVerifiedAt?: SortOrder
    reset?: SortOrder
    resetAt?: SortOrder
  }

  export type PasswordResetSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    attempt?: SortOrder
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    active?: SortOrder
  }

  export type SessionAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    active?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    active?: SortOrder
  }

  export type SessionSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type EntrepriseListRelationFilter = {
    every?: EntrepriseWhereInput
    some?: EntrepriseWhereInput
    none?: EntrepriseWhereInput
  }

  export type CandidatListRelationFilter = {
    every?: CandidatWhereInput
    some?: CandidatWhereInput
    none?: CandidatWhereInput
  }

  export type AccountListRelationFilter = {
    every?: AccountWhereInput
    some?: AccountWhereInput
    none?: AccountWhereInput
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type EntrepriseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CandidatOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    userName?: SortOrder
    phoneNumber?: SortOrder
    passwordHash?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    verifiedAt?: SortOrder
    signupMethod?: SortOrder
    image?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    userName?: SortOrder
    phoneNumber?: SortOrder
    passwordHash?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    verifiedAt?: SortOrder
    signupMethod?: SortOrder
    image?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    userName?: SortOrder
    phoneNumber?: SortOrder
    passwordHash?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    verifiedAt?: SortOrder
    signupMethod?: SortOrder
    image?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type EntretienListRelationFilter = {
    every?: EntretienWhereInput
    some?: EntretienWhereInput
    none?: EntretienWhereInput
  }

  export type NoteListRelationFilter = {
    every?: NoteWhereInput
    some?: NoteWhereInput
    none?: NoteWhereInput
  }

  export type EntretienOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NoteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CandidatCountOrderByAggregateInput = {
    idCandidat?: SortOrder
    adresCandidat?: SortOrder
    experienceCandidat?: SortOrder
    nivEtudesCandidat?: SortOrder
    competencesCandidat?: SortOrder
    cVCandidat?: SortOrder
    userId?: SortOrder
  }

  export type CandidatAvgOrderByAggregateInput = {
    idCandidat?: SortOrder
    userId?: SortOrder
  }

  export type CandidatMaxOrderByAggregateInput = {
    idCandidat?: SortOrder
    adresCandidat?: SortOrder
    experienceCandidat?: SortOrder
    nivEtudesCandidat?: SortOrder
    competencesCandidat?: SortOrder
    cVCandidat?: SortOrder
    userId?: SortOrder
  }

  export type CandidatMinOrderByAggregateInput = {
    idCandidat?: SortOrder
    adresCandidat?: SortOrder
    experienceCandidat?: SortOrder
    nivEtudesCandidat?: SortOrder
    competencesCandidat?: SortOrder
    cVCandidat?: SortOrder
    userId?: SortOrder
  }

  export type CandidatSumOrderByAggregateInput = {
    idCandidat?: SortOrder
    userId?: SortOrder
  }

  export type EntrepriseRelationFilter = {
    is?: EntrepriseWhereInput
    isNot?: EntrepriseWhereInput
  }

  export type FreelancerRelationFilter = {
    is?: FreelancerWhereInput
    isNot?: FreelancerWhereInput
  }

  export type ContratCountOrderByAggregateInput = {
    idContrat?: SortOrder
    entrepriseId?: SortOrder
    freelancerId?: SortOrder
    titreProjContrat?: SortOrder
    datDebConrat?: SortOrder
    datFinConrat?: SortOrder
    coutContrat?: SortOrder
    descripContrat?: SortOrder
    statutContrat?: SortOrder
  }

  export type ContratAvgOrderByAggregateInput = {
    idContrat?: SortOrder
    entrepriseId?: SortOrder
    freelancerId?: SortOrder
    coutContrat?: SortOrder
  }

  export type ContratMaxOrderByAggregateInput = {
    idContrat?: SortOrder
    entrepriseId?: SortOrder
    freelancerId?: SortOrder
    titreProjContrat?: SortOrder
    datDebConrat?: SortOrder
    datFinConrat?: SortOrder
    coutContrat?: SortOrder
    descripContrat?: SortOrder
    statutContrat?: SortOrder
  }

  export type ContratMinOrderByAggregateInput = {
    idContrat?: SortOrder
    entrepriseId?: SortOrder
    freelancerId?: SortOrder
    titreProjContrat?: SortOrder
    datDebConrat?: SortOrder
    datFinConrat?: SortOrder
    coutContrat?: SortOrder
    descripContrat?: SortOrder
    statutContrat?: SortOrder
  }

  export type ContratSumOrderByAggregateInput = {
    idContrat?: SortOrder
    entrepriseId?: SortOrder
    freelancerId?: SortOrder
    coutContrat?: SortOrder
  }

  export type OffreEmploiListRelationFilter = {
    every?: OffreEmploiWhereInput
    some?: OffreEmploiWhereInput
    none?: OffreEmploiWhereInput
  }

  export type ContratListRelationFilter = {
    every?: ContratWhereInput
    some?: ContratWhereInput
    none?: ContratWhereInput
  }

  export type ProjetListRelationFilter = {
    every?: ProjetWhereInput
    some?: ProjetWhereInput
    none?: ProjetWhereInput
  }

  export type OffreEmploiOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ContratOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProjetOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EntrepriseCountOrderByAggregateInput = {
    idEntreprise?: SortOrder
    nomEntreprise?: SortOrder
    adresEntreprise?: SortOrder
    contactEntreprise?: SortOrder
    sectActivEntreprise?: SortOrder
    tailleEntreprise?: SortOrder
    logoEntreprise?: SortOrder
    descripEntreprise?: SortOrder
    siteWebEntreprise?: SortOrder
    userId?: SortOrder
  }

  export type EntrepriseAvgOrderByAggregateInput = {
    idEntreprise?: SortOrder
    userId?: SortOrder
  }

  export type EntrepriseMaxOrderByAggregateInput = {
    idEntreprise?: SortOrder
    nomEntreprise?: SortOrder
    adresEntreprise?: SortOrder
    contactEntreprise?: SortOrder
    sectActivEntreprise?: SortOrder
    tailleEntreprise?: SortOrder
    logoEntreprise?: SortOrder
    descripEntreprise?: SortOrder
    siteWebEntreprise?: SortOrder
    userId?: SortOrder
  }

  export type EntrepriseMinOrderByAggregateInput = {
    idEntreprise?: SortOrder
    nomEntreprise?: SortOrder
    adresEntreprise?: SortOrder
    contactEntreprise?: SortOrder
    sectActivEntreprise?: SortOrder
    tailleEntreprise?: SortOrder
    logoEntreprise?: SortOrder
    descripEntreprise?: SortOrder
    siteWebEntreprise?: SortOrder
    userId?: SortOrder
  }

  export type EntrepriseSumOrderByAggregateInput = {
    idEntreprise?: SortOrder
    userId?: SortOrder
  }

  export type CandidatRelationFilter = {
    is?: CandidatWhereInput
    isNot?: CandidatWhereInput
  }

  export type EntretienCountOrderByAggregateInput = {
    idEntretien?: SortOrder
    entrepriseId?: SortOrder
    candidatId?: SortOrder
    dateEntretien?: SortOrder
    adresEntretien?: SortOrder
    recruEntretien?: SortOrder
    typeEntretien?: SortOrder
    descripEntreprise?: SortOrder
  }

  export type EntretienAvgOrderByAggregateInput = {
    idEntretien?: SortOrder
    entrepriseId?: SortOrder
    candidatId?: SortOrder
  }

  export type EntretienMaxOrderByAggregateInput = {
    idEntretien?: SortOrder
    entrepriseId?: SortOrder
    candidatId?: SortOrder
    dateEntretien?: SortOrder
    adresEntretien?: SortOrder
    recruEntretien?: SortOrder
    typeEntretien?: SortOrder
    descripEntreprise?: SortOrder
  }

  export type EntretienMinOrderByAggregateInput = {
    idEntretien?: SortOrder
    entrepriseId?: SortOrder
    candidatId?: SortOrder
    dateEntretien?: SortOrder
    adresEntretien?: SortOrder
    recruEntretien?: SortOrder
    typeEntretien?: SortOrder
    descripEntreprise?: SortOrder
  }

  export type EntretienSumOrderByAggregateInput = {
    idEntretien?: SortOrder
    entrepriseId?: SortOrder
    candidatId?: SortOrder
  }

  export type PropositionListRelationFilter = {
    every?: PropositionWhereInput
    some?: PropositionWhereInput
    none?: PropositionWhereInput
  }

  export type PropositionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FreelancerCountOrderByAggregateInput = {
    idFreelancer?: SortOrder
    nomFreelancer?: SortOrder
    prenomFreelancer?: SortOrder
    adresFreelancer?: SortOrder
    TelFreelancer?: SortOrder
    emailFreelancer?: SortOrder
    competencesFreelancer?: SortOrder
    experienceFreelancer?: SortOrder
    portfolioFreelancer?: SortOrder
  }

  export type FreelancerAvgOrderByAggregateInput = {
    idFreelancer?: SortOrder
  }

  export type FreelancerMaxOrderByAggregateInput = {
    idFreelancer?: SortOrder
    nomFreelancer?: SortOrder
    prenomFreelancer?: SortOrder
    adresFreelancer?: SortOrder
    TelFreelancer?: SortOrder
    emailFreelancer?: SortOrder
    competencesFreelancer?: SortOrder
    experienceFreelancer?: SortOrder
    portfolioFreelancer?: SortOrder
  }

  export type FreelancerMinOrderByAggregateInput = {
    idFreelancer?: SortOrder
    nomFreelancer?: SortOrder
    prenomFreelancer?: SortOrder
    adresFreelancer?: SortOrder
    TelFreelancer?: SortOrder
    emailFreelancer?: SortOrder
    competencesFreelancer?: SortOrder
    experienceFreelancer?: SortOrder
    portfolioFreelancer?: SortOrder
  }

  export type FreelancerSumOrderByAggregateInput = {
    idFreelancer?: SortOrder
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NoteCountOrderByAggregateInput = {
    idNote?: SortOrder
    entrepriseId?: SortOrder
    candidatId?: SortOrder
    Note?: SortOrder
    commentNote?: SortOrder
    dateNote?: SortOrder
  }

  export type NoteAvgOrderByAggregateInput = {
    idNote?: SortOrder
    entrepriseId?: SortOrder
    candidatId?: SortOrder
    Note?: SortOrder
  }

  export type NoteMaxOrderByAggregateInput = {
    idNote?: SortOrder
    entrepriseId?: SortOrder
    candidatId?: SortOrder
    Note?: SortOrder
    commentNote?: SortOrder
    dateNote?: SortOrder
  }

  export type NoteMinOrderByAggregateInput = {
    idNote?: SortOrder
    entrepriseId?: SortOrder
    candidatId?: SortOrder
    Note?: SortOrder
    commentNote?: SortOrder
    dateNote?: SortOrder
  }

  export type NoteSumOrderByAggregateInput = {
    idNote?: SortOrder
    entrepriseId?: SortOrder
    candidatId?: SortOrder
    Note?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type OffreEmploiCountOrderByAggregateInput = {
    idOffreEmploi?: SortOrder
    entrepriseId?: SortOrder
    titreOffreEmploi?: SortOrder
    descripOffreEmploi?: SortOrder
    localiOffreEmploi?: SortOrder
    datePubliOffreEmploi?: SortOrder
    datelimitOffreEmploi?: SortOrder
    salaireOffreEmploi?: SortOrder
    typeContOffreEmploi?: SortOrder
    experienceOffreEmploi?: SortOrder
    nivEtuOffreEmploi?: SortOrder
    competencesOffreEmploi?: SortOrder
  }

  export type OffreEmploiAvgOrderByAggregateInput = {
    idOffreEmploi?: SortOrder
    entrepriseId?: SortOrder
    salaireOffreEmploi?: SortOrder
  }

  export type OffreEmploiMaxOrderByAggregateInput = {
    idOffreEmploi?: SortOrder
    entrepriseId?: SortOrder
    titreOffreEmploi?: SortOrder
    descripOffreEmploi?: SortOrder
    localiOffreEmploi?: SortOrder
    datePubliOffreEmploi?: SortOrder
    datelimitOffreEmploi?: SortOrder
    salaireOffreEmploi?: SortOrder
    typeContOffreEmploi?: SortOrder
    experienceOffreEmploi?: SortOrder
    nivEtuOffreEmploi?: SortOrder
    competencesOffreEmploi?: SortOrder
  }

  export type OffreEmploiMinOrderByAggregateInput = {
    idOffreEmploi?: SortOrder
    entrepriseId?: SortOrder
    titreOffreEmploi?: SortOrder
    descripOffreEmploi?: SortOrder
    localiOffreEmploi?: SortOrder
    datePubliOffreEmploi?: SortOrder
    datelimitOffreEmploi?: SortOrder
    salaireOffreEmploi?: SortOrder
    typeContOffreEmploi?: SortOrder
    experienceOffreEmploi?: SortOrder
    nivEtuOffreEmploi?: SortOrder
    competencesOffreEmploi?: SortOrder
  }

  export type OffreEmploiSumOrderByAggregateInput = {
    idOffreEmploi?: SortOrder
    entrepriseId?: SortOrder
    salaireOffreEmploi?: SortOrder
  }

  export type ProjetCountOrderByAggregateInput = {
    idProjet?: SortOrder
    entrepriseId?: SortOrder
    titreProjet?: SortOrder
    descripProjet?: SortOrder
    BudgetProjet?: SortOrder
    DelaiProjet?: SortOrder
  }

  export type ProjetAvgOrderByAggregateInput = {
    idProjet?: SortOrder
    entrepriseId?: SortOrder
    BudgetProjet?: SortOrder
    DelaiProjet?: SortOrder
  }

  export type ProjetMaxOrderByAggregateInput = {
    idProjet?: SortOrder
    entrepriseId?: SortOrder
    titreProjet?: SortOrder
    descripProjet?: SortOrder
    BudgetProjet?: SortOrder
    DelaiProjet?: SortOrder
  }

  export type ProjetMinOrderByAggregateInput = {
    idProjet?: SortOrder
    entrepriseId?: SortOrder
    titreProjet?: SortOrder
    descripProjet?: SortOrder
    BudgetProjet?: SortOrder
    DelaiProjet?: SortOrder
  }

  export type ProjetSumOrderByAggregateInput = {
    idProjet?: SortOrder
    entrepriseId?: SortOrder
    BudgetProjet?: SortOrder
    DelaiProjet?: SortOrder
  }

  export type ProjetRelationFilter = {
    is?: ProjetWhereInput
    isNot?: ProjetWhereInput
  }

  export type PropositionCountOrderByAggregateInput = {
    idProposition?: SortOrder
    projetId?: SortOrder
    freelancerId?: SortOrder
    delaiProposition?: SortOrder
    descripProposition?: SortOrder
    coutProposition?: SortOrder
    competenceProposition?: SortOrder
  }

  export type PropositionAvgOrderByAggregateInput = {
    idProposition?: SortOrder
    projetId?: SortOrder
    freelancerId?: SortOrder
    delaiProposition?: SortOrder
    coutProposition?: SortOrder
  }

  export type PropositionMaxOrderByAggregateInput = {
    idProposition?: SortOrder
    projetId?: SortOrder
    freelancerId?: SortOrder
    delaiProposition?: SortOrder
    descripProposition?: SortOrder
    coutProposition?: SortOrder
    competenceProposition?: SortOrder
  }

  export type PropositionMinOrderByAggregateInput = {
    idProposition?: SortOrder
    projetId?: SortOrder
    freelancerId?: SortOrder
    delaiProposition?: SortOrder
    descripProposition?: SortOrder
    coutProposition?: SortOrder
    competenceProposition?: SortOrder
  }

  export type PropositionSumOrderByAggregateInput = {
    idProposition?: SortOrder
    projetId?: SortOrder
    freelancerId?: SortOrder
    delaiProposition?: SortOrder
    coutProposition?: SortOrder
  }

  export type UserCreateNestedOneWithoutAccountsInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    connect?: UserWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutAccountsNestedInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    upsert?: UserUpsertWithoutAccountsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAccountsInput, UserUpdateWithoutAccountsInput>, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type EntrepriseCreateNestedManyWithoutUserInput = {
    create?: XOR<EntrepriseCreateWithoutUserInput, EntrepriseUncheckedCreateWithoutUserInput> | EntrepriseCreateWithoutUserInput[] | EntrepriseUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EntrepriseCreateOrConnectWithoutUserInput | EntrepriseCreateOrConnectWithoutUserInput[]
    createMany?: EntrepriseCreateManyUserInputEnvelope
    connect?: EntrepriseWhereUniqueInput | EntrepriseWhereUniqueInput[]
  }

  export type CandidatCreateNestedManyWithoutUserInput = {
    create?: XOR<CandidatCreateWithoutUserInput, CandidatUncheckedCreateWithoutUserInput> | CandidatCreateWithoutUserInput[] | CandidatUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CandidatCreateOrConnectWithoutUserInput | CandidatCreateOrConnectWithoutUserInput[]
    createMany?: CandidatCreateManyUserInputEnvelope
    connect?: CandidatWhereUniqueInput | CandidatWhereUniqueInput[]
  }

  export type AccountCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type EntrepriseUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<EntrepriseCreateWithoutUserInput, EntrepriseUncheckedCreateWithoutUserInput> | EntrepriseCreateWithoutUserInput[] | EntrepriseUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EntrepriseCreateOrConnectWithoutUserInput | EntrepriseCreateOrConnectWithoutUserInput[]
    createMany?: EntrepriseCreateManyUserInputEnvelope
    connect?: EntrepriseWhereUniqueInput | EntrepriseWhereUniqueInput[]
  }

  export type CandidatUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CandidatCreateWithoutUserInput, CandidatUncheckedCreateWithoutUserInput> | CandidatCreateWithoutUserInput[] | CandidatUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CandidatCreateOrConnectWithoutUserInput | CandidatCreateOrConnectWithoutUserInput[]
    createMany?: CandidatCreateManyUserInputEnvelope
    connect?: CandidatWhereUniqueInput | CandidatWhereUniqueInput[]
  }

  export type AccountUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type EntrepriseUpdateManyWithoutUserNestedInput = {
    create?: XOR<EntrepriseCreateWithoutUserInput, EntrepriseUncheckedCreateWithoutUserInput> | EntrepriseCreateWithoutUserInput[] | EntrepriseUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EntrepriseCreateOrConnectWithoutUserInput | EntrepriseCreateOrConnectWithoutUserInput[]
    upsert?: EntrepriseUpsertWithWhereUniqueWithoutUserInput | EntrepriseUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: EntrepriseCreateManyUserInputEnvelope
    set?: EntrepriseWhereUniqueInput | EntrepriseWhereUniqueInput[]
    disconnect?: EntrepriseWhereUniqueInput | EntrepriseWhereUniqueInput[]
    delete?: EntrepriseWhereUniqueInput | EntrepriseWhereUniqueInput[]
    connect?: EntrepriseWhereUniqueInput | EntrepriseWhereUniqueInput[]
    update?: EntrepriseUpdateWithWhereUniqueWithoutUserInput | EntrepriseUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: EntrepriseUpdateManyWithWhereWithoutUserInput | EntrepriseUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: EntrepriseScalarWhereInput | EntrepriseScalarWhereInput[]
  }

  export type CandidatUpdateManyWithoutUserNestedInput = {
    create?: XOR<CandidatCreateWithoutUserInput, CandidatUncheckedCreateWithoutUserInput> | CandidatCreateWithoutUserInput[] | CandidatUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CandidatCreateOrConnectWithoutUserInput | CandidatCreateOrConnectWithoutUserInput[]
    upsert?: CandidatUpsertWithWhereUniqueWithoutUserInput | CandidatUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CandidatCreateManyUserInputEnvelope
    set?: CandidatWhereUniqueInput | CandidatWhereUniqueInput[]
    disconnect?: CandidatWhereUniqueInput | CandidatWhereUniqueInput[]
    delete?: CandidatWhereUniqueInput | CandidatWhereUniqueInput[]
    connect?: CandidatWhereUniqueInput | CandidatWhereUniqueInput[]
    update?: CandidatUpdateWithWhereUniqueWithoutUserInput | CandidatUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CandidatUpdateManyWithWhereWithoutUserInput | CandidatUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CandidatScalarWhereInput | CandidatScalarWhereInput[]
  }

  export type AccountUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type SessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type EntrepriseUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<EntrepriseCreateWithoutUserInput, EntrepriseUncheckedCreateWithoutUserInput> | EntrepriseCreateWithoutUserInput[] | EntrepriseUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EntrepriseCreateOrConnectWithoutUserInput | EntrepriseCreateOrConnectWithoutUserInput[]
    upsert?: EntrepriseUpsertWithWhereUniqueWithoutUserInput | EntrepriseUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: EntrepriseCreateManyUserInputEnvelope
    set?: EntrepriseWhereUniqueInput | EntrepriseWhereUniqueInput[]
    disconnect?: EntrepriseWhereUniqueInput | EntrepriseWhereUniqueInput[]
    delete?: EntrepriseWhereUniqueInput | EntrepriseWhereUniqueInput[]
    connect?: EntrepriseWhereUniqueInput | EntrepriseWhereUniqueInput[]
    update?: EntrepriseUpdateWithWhereUniqueWithoutUserInput | EntrepriseUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: EntrepriseUpdateManyWithWhereWithoutUserInput | EntrepriseUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: EntrepriseScalarWhereInput | EntrepriseScalarWhereInput[]
  }

  export type CandidatUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CandidatCreateWithoutUserInput, CandidatUncheckedCreateWithoutUserInput> | CandidatCreateWithoutUserInput[] | CandidatUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CandidatCreateOrConnectWithoutUserInput | CandidatCreateOrConnectWithoutUserInput[]
    upsert?: CandidatUpsertWithWhereUniqueWithoutUserInput | CandidatUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CandidatCreateManyUserInputEnvelope
    set?: CandidatWhereUniqueInput | CandidatWhereUniqueInput[]
    disconnect?: CandidatWhereUniqueInput | CandidatWhereUniqueInput[]
    delete?: CandidatWhereUniqueInput | CandidatWhereUniqueInput[]
    connect?: CandidatWhereUniqueInput | CandidatWhereUniqueInput[]
    update?: CandidatUpdateWithWhereUniqueWithoutUserInput | CandidatUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CandidatUpdateManyWithWhereWithoutUserInput | CandidatUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CandidatScalarWhereInput | CandidatScalarWhereInput[]
  }

  export type AccountUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutCandidatInput = {
    create?: XOR<UserCreateWithoutCandidatInput, UserUncheckedCreateWithoutCandidatInput>
    connectOrCreate?: UserCreateOrConnectWithoutCandidatInput
    connect?: UserWhereUniqueInput
  }

  export type EntretienCreateNestedManyWithoutCandidatInput = {
    create?: XOR<EntretienCreateWithoutCandidatInput, EntretienUncheckedCreateWithoutCandidatInput> | EntretienCreateWithoutCandidatInput[] | EntretienUncheckedCreateWithoutCandidatInput[]
    connectOrCreate?: EntretienCreateOrConnectWithoutCandidatInput | EntretienCreateOrConnectWithoutCandidatInput[]
    createMany?: EntretienCreateManyCandidatInputEnvelope
    connect?: EntretienWhereUniqueInput | EntretienWhereUniqueInput[]
  }

  export type NoteCreateNestedManyWithoutCandidatInput = {
    create?: XOR<NoteCreateWithoutCandidatInput, NoteUncheckedCreateWithoutCandidatInput> | NoteCreateWithoutCandidatInput[] | NoteUncheckedCreateWithoutCandidatInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutCandidatInput | NoteCreateOrConnectWithoutCandidatInput[]
    createMany?: NoteCreateManyCandidatInputEnvelope
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
  }

  export type EntretienUncheckedCreateNestedManyWithoutCandidatInput = {
    create?: XOR<EntretienCreateWithoutCandidatInput, EntretienUncheckedCreateWithoutCandidatInput> | EntretienCreateWithoutCandidatInput[] | EntretienUncheckedCreateWithoutCandidatInput[]
    connectOrCreate?: EntretienCreateOrConnectWithoutCandidatInput | EntretienCreateOrConnectWithoutCandidatInput[]
    createMany?: EntretienCreateManyCandidatInputEnvelope
    connect?: EntretienWhereUniqueInput | EntretienWhereUniqueInput[]
  }

  export type NoteUncheckedCreateNestedManyWithoutCandidatInput = {
    create?: XOR<NoteCreateWithoutCandidatInput, NoteUncheckedCreateWithoutCandidatInput> | NoteCreateWithoutCandidatInput[] | NoteUncheckedCreateWithoutCandidatInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutCandidatInput | NoteCreateOrConnectWithoutCandidatInput[]
    createMany?: NoteCreateManyCandidatInputEnvelope
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutCandidatNestedInput = {
    create?: XOR<UserCreateWithoutCandidatInput, UserUncheckedCreateWithoutCandidatInput>
    connectOrCreate?: UserCreateOrConnectWithoutCandidatInput
    upsert?: UserUpsertWithoutCandidatInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCandidatInput, UserUpdateWithoutCandidatInput>, UserUncheckedUpdateWithoutCandidatInput>
  }

  export type EntretienUpdateManyWithoutCandidatNestedInput = {
    create?: XOR<EntretienCreateWithoutCandidatInput, EntretienUncheckedCreateWithoutCandidatInput> | EntretienCreateWithoutCandidatInput[] | EntretienUncheckedCreateWithoutCandidatInput[]
    connectOrCreate?: EntretienCreateOrConnectWithoutCandidatInput | EntretienCreateOrConnectWithoutCandidatInput[]
    upsert?: EntretienUpsertWithWhereUniqueWithoutCandidatInput | EntretienUpsertWithWhereUniqueWithoutCandidatInput[]
    createMany?: EntretienCreateManyCandidatInputEnvelope
    set?: EntretienWhereUniqueInput | EntretienWhereUniqueInput[]
    disconnect?: EntretienWhereUniqueInput | EntretienWhereUniqueInput[]
    delete?: EntretienWhereUniqueInput | EntretienWhereUniqueInput[]
    connect?: EntretienWhereUniqueInput | EntretienWhereUniqueInput[]
    update?: EntretienUpdateWithWhereUniqueWithoutCandidatInput | EntretienUpdateWithWhereUniqueWithoutCandidatInput[]
    updateMany?: EntretienUpdateManyWithWhereWithoutCandidatInput | EntretienUpdateManyWithWhereWithoutCandidatInput[]
    deleteMany?: EntretienScalarWhereInput | EntretienScalarWhereInput[]
  }

  export type NoteUpdateManyWithoutCandidatNestedInput = {
    create?: XOR<NoteCreateWithoutCandidatInput, NoteUncheckedCreateWithoutCandidatInput> | NoteCreateWithoutCandidatInput[] | NoteUncheckedCreateWithoutCandidatInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutCandidatInput | NoteCreateOrConnectWithoutCandidatInput[]
    upsert?: NoteUpsertWithWhereUniqueWithoutCandidatInput | NoteUpsertWithWhereUniqueWithoutCandidatInput[]
    createMany?: NoteCreateManyCandidatInputEnvelope
    set?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    disconnect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    delete?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    update?: NoteUpdateWithWhereUniqueWithoutCandidatInput | NoteUpdateWithWhereUniqueWithoutCandidatInput[]
    updateMany?: NoteUpdateManyWithWhereWithoutCandidatInput | NoteUpdateManyWithWhereWithoutCandidatInput[]
    deleteMany?: NoteScalarWhereInput | NoteScalarWhereInput[]
  }

  export type EntretienUncheckedUpdateManyWithoutCandidatNestedInput = {
    create?: XOR<EntretienCreateWithoutCandidatInput, EntretienUncheckedCreateWithoutCandidatInput> | EntretienCreateWithoutCandidatInput[] | EntretienUncheckedCreateWithoutCandidatInput[]
    connectOrCreate?: EntretienCreateOrConnectWithoutCandidatInput | EntretienCreateOrConnectWithoutCandidatInput[]
    upsert?: EntretienUpsertWithWhereUniqueWithoutCandidatInput | EntretienUpsertWithWhereUniqueWithoutCandidatInput[]
    createMany?: EntretienCreateManyCandidatInputEnvelope
    set?: EntretienWhereUniqueInput | EntretienWhereUniqueInput[]
    disconnect?: EntretienWhereUniqueInput | EntretienWhereUniqueInput[]
    delete?: EntretienWhereUniqueInput | EntretienWhereUniqueInput[]
    connect?: EntretienWhereUniqueInput | EntretienWhereUniqueInput[]
    update?: EntretienUpdateWithWhereUniqueWithoutCandidatInput | EntretienUpdateWithWhereUniqueWithoutCandidatInput[]
    updateMany?: EntretienUpdateManyWithWhereWithoutCandidatInput | EntretienUpdateManyWithWhereWithoutCandidatInput[]
    deleteMany?: EntretienScalarWhereInput | EntretienScalarWhereInput[]
  }

  export type NoteUncheckedUpdateManyWithoutCandidatNestedInput = {
    create?: XOR<NoteCreateWithoutCandidatInput, NoteUncheckedCreateWithoutCandidatInput> | NoteCreateWithoutCandidatInput[] | NoteUncheckedCreateWithoutCandidatInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutCandidatInput | NoteCreateOrConnectWithoutCandidatInput[]
    upsert?: NoteUpsertWithWhereUniqueWithoutCandidatInput | NoteUpsertWithWhereUniqueWithoutCandidatInput[]
    createMany?: NoteCreateManyCandidatInputEnvelope
    set?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    disconnect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    delete?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    update?: NoteUpdateWithWhereUniqueWithoutCandidatInput | NoteUpdateWithWhereUniqueWithoutCandidatInput[]
    updateMany?: NoteUpdateManyWithWhereWithoutCandidatInput | NoteUpdateManyWithWhereWithoutCandidatInput[]
    deleteMany?: NoteScalarWhereInput | NoteScalarWhereInput[]
  }

  export type EntrepriseCreateNestedOneWithoutContratsInput = {
    create?: XOR<EntrepriseCreateWithoutContratsInput, EntrepriseUncheckedCreateWithoutContratsInput>
    connectOrCreate?: EntrepriseCreateOrConnectWithoutContratsInput
    connect?: EntrepriseWhereUniqueInput
  }

  export type FreelancerCreateNestedOneWithoutContratsInput = {
    create?: XOR<FreelancerCreateWithoutContratsInput, FreelancerUncheckedCreateWithoutContratsInput>
    connectOrCreate?: FreelancerCreateOrConnectWithoutContratsInput
    connect?: FreelancerWhereUniqueInput
  }

  export type EntrepriseUpdateOneRequiredWithoutContratsNestedInput = {
    create?: XOR<EntrepriseCreateWithoutContratsInput, EntrepriseUncheckedCreateWithoutContratsInput>
    connectOrCreate?: EntrepriseCreateOrConnectWithoutContratsInput
    upsert?: EntrepriseUpsertWithoutContratsInput
    connect?: EntrepriseWhereUniqueInput
    update?: XOR<XOR<EntrepriseUpdateToOneWithWhereWithoutContratsInput, EntrepriseUpdateWithoutContratsInput>, EntrepriseUncheckedUpdateWithoutContratsInput>
  }

  export type FreelancerUpdateOneRequiredWithoutContratsNestedInput = {
    create?: XOR<FreelancerCreateWithoutContratsInput, FreelancerUncheckedCreateWithoutContratsInput>
    connectOrCreate?: FreelancerCreateOrConnectWithoutContratsInput
    upsert?: FreelancerUpsertWithoutContratsInput
    connect?: FreelancerWhereUniqueInput
    update?: XOR<XOR<FreelancerUpdateToOneWithWhereWithoutContratsInput, FreelancerUpdateWithoutContratsInput>, FreelancerUncheckedUpdateWithoutContratsInput>
  }

  export type UserCreateNestedOneWithoutEntrepriseInput = {
    create?: XOR<UserCreateWithoutEntrepriseInput, UserUncheckedCreateWithoutEntrepriseInput>
    connectOrCreate?: UserCreateOrConnectWithoutEntrepriseInput
    connect?: UserWhereUniqueInput
  }

  export type OffreEmploiCreateNestedManyWithoutEntrepriseInput = {
    create?: XOR<OffreEmploiCreateWithoutEntrepriseInput, OffreEmploiUncheckedCreateWithoutEntrepriseInput> | OffreEmploiCreateWithoutEntrepriseInput[] | OffreEmploiUncheckedCreateWithoutEntrepriseInput[]
    connectOrCreate?: OffreEmploiCreateOrConnectWithoutEntrepriseInput | OffreEmploiCreateOrConnectWithoutEntrepriseInput[]
    createMany?: OffreEmploiCreateManyEntrepriseInputEnvelope
    connect?: OffreEmploiWhereUniqueInput | OffreEmploiWhereUniqueInput[]
  }

  export type EntretienCreateNestedManyWithoutEntrepriseInput = {
    create?: XOR<EntretienCreateWithoutEntrepriseInput, EntretienUncheckedCreateWithoutEntrepriseInput> | EntretienCreateWithoutEntrepriseInput[] | EntretienUncheckedCreateWithoutEntrepriseInput[]
    connectOrCreate?: EntretienCreateOrConnectWithoutEntrepriseInput | EntretienCreateOrConnectWithoutEntrepriseInput[]
    createMany?: EntretienCreateManyEntrepriseInputEnvelope
    connect?: EntretienWhereUniqueInput | EntretienWhereUniqueInput[]
  }

  export type ContratCreateNestedManyWithoutEntrepriseInput = {
    create?: XOR<ContratCreateWithoutEntrepriseInput, ContratUncheckedCreateWithoutEntrepriseInput> | ContratCreateWithoutEntrepriseInput[] | ContratUncheckedCreateWithoutEntrepriseInput[]
    connectOrCreate?: ContratCreateOrConnectWithoutEntrepriseInput | ContratCreateOrConnectWithoutEntrepriseInput[]
    createMany?: ContratCreateManyEntrepriseInputEnvelope
    connect?: ContratWhereUniqueInput | ContratWhereUniqueInput[]
  }

  export type ProjetCreateNestedManyWithoutEntrepriseInput = {
    create?: XOR<ProjetCreateWithoutEntrepriseInput, ProjetUncheckedCreateWithoutEntrepriseInput> | ProjetCreateWithoutEntrepriseInput[] | ProjetUncheckedCreateWithoutEntrepriseInput[]
    connectOrCreate?: ProjetCreateOrConnectWithoutEntrepriseInput | ProjetCreateOrConnectWithoutEntrepriseInput[]
    createMany?: ProjetCreateManyEntrepriseInputEnvelope
    connect?: ProjetWhereUniqueInput | ProjetWhereUniqueInput[]
  }

  export type NoteCreateNestedManyWithoutEntrepriseInput = {
    create?: XOR<NoteCreateWithoutEntrepriseInput, NoteUncheckedCreateWithoutEntrepriseInput> | NoteCreateWithoutEntrepriseInput[] | NoteUncheckedCreateWithoutEntrepriseInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutEntrepriseInput | NoteCreateOrConnectWithoutEntrepriseInput[]
    createMany?: NoteCreateManyEntrepriseInputEnvelope
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
  }

  export type OffreEmploiUncheckedCreateNestedManyWithoutEntrepriseInput = {
    create?: XOR<OffreEmploiCreateWithoutEntrepriseInput, OffreEmploiUncheckedCreateWithoutEntrepriseInput> | OffreEmploiCreateWithoutEntrepriseInput[] | OffreEmploiUncheckedCreateWithoutEntrepriseInput[]
    connectOrCreate?: OffreEmploiCreateOrConnectWithoutEntrepriseInput | OffreEmploiCreateOrConnectWithoutEntrepriseInput[]
    createMany?: OffreEmploiCreateManyEntrepriseInputEnvelope
    connect?: OffreEmploiWhereUniqueInput | OffreEmploiWhereUniqueInput[]
  }

  export type EntretienUncheckedCreateNestedManyWithoutEntrepriseInput = {
    create?: XOR<EntretienCreateWithoutEntrepriseInput, EntretienUncheckedCreateWithoutEntrepriseInput> | EntretienCreateWithoutEntrepriseInput[] | EntretienUncheckedCreateWithoutEntrepriseInput[]
    connectOrCreate?: EntretienCreateOrConnectWithoutEntrepriseInput | EntretienCreateOrConnectWithoutEntrepriseInput[]
    createMany?: EntretienCreateManyEntrepriseInputEnvelope
    connect?: EntretienWhereUniqueInput | EntretienWhereUniqueInput[]
  }

  export type ContratUncheckedCreateNestedManyWithoutEntrepriseInput = {
    create?: XOR<ContratCreateWithoutEntrepriseInput, ContratUncheckedCreateWithoutEntrepriseInput> | ContratCreateWithoutEntrepriseInput[] | ContratUncheckedCreateWithoutEntrepriseInput[]
    connectOrCreate?: ContratCreateOrConnectWithoutEntrepriseInput | ContratCreateOrConnectWithoutEntrepriseInput[]
    createMany?: ContratCreateManyEntrepriseInputEnvelope
    connect?: ContratWhereUniqueInput | ContratWhereUniqueInput[]
  }

  export type ProjetUncheckedCreateNestedManyWithoutEntrepriseInput = {
    create?: XOR<ProjetCreateWithoutEntrepriseInput, ProjetUncheckedCreateWithoutEntrepriseInput> | ProjetCreateWithoutEntrepriseInput[] | ProjetUncheckedCreateWithoutEntrepriseInput[]
    connectOrCreate?: ProjetCreateOrConnectWithoutEntrepriseInput | ProjetCreateOrConnectWithoutEntrepriseInput[]
    createMany?: ProjetCreateManyEntrepriseInputEnvelope
    connect?: ProjetWhereUniqueInput | ProjetWhereUniqueInput[]
  }

  export type NoteUncheckedCreateNestedManyWithoutEntrepriseInput = {
    create?: XOR<NoteCreateWithoutEntrepriseInput, NoteUncheckedCreateWithoutEntrepriseInput> | NoteCreateWithoutEntrepriseInput[] | NoteUncheckedCreateWithoutEntrepriseInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutEntrepriseInput | NoteCreateOrConnectWithoutEntrepriseInput[]
    createMany?: NoteCreateManyEntrepriseInputEnvelope
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutEntrepriseNestedInput = {
    create?: XOR<UserCreateWithoutEntrepriseInput, UserUncheckedCreateWithoutEntrepriseInput>
    connectOrCreate?: UserCreateOrConnectWithoutEntrepriseInput
    upsert?: UserUpsertWithoutEntrepriseInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutEntrepriseInput, UserUpdateWithoutEntrepriseInput>, UserUncheckedUpdateWithoutEntrepriseInput>
  }

  export type OffreEmploiUpdateManyWithoutEntrepriseNestedInput = {
    create?: XOR<OffreEmploiCreateWithoutEntrepriseInput, OffreEmploiUncheckedCreateWithoutEntrepriseInput> | OffreEmploiCreateWithoutEntrepriseInput[] | OffreEmploiUncheckedCreateWithoutEntrepriseInput[]
    connectOrCreate?: OffreEmploiCreateOrConnectWithoutEntrepriseInput | OffreEmploiCreateOrConnectWithoutEntrepriseInput[]
    upsert?: OffreEmploiUpsertWithWhereUniqueWithoutEntrepriseInput | OffreEmploiUpsertWithWhereUniqueWithoutEntrepriseInput[]
    createMany?: OffreEmploiCreateManyEntrepriseInputEnvelope
    set?: OffreEmploiWhereUniqueInput | OffreEmploiWhereUniqueInput[]
    disconnect?: OffreEmploiWhereUniqueInput | OffreEmploiWhereUniqueInput[]
    delete?: OffreEmploiWhereUniqueInput | OffreEmploiWhereUniqueInput[]
    connect?: OffreEmploiWhereUniqueInput | OffreEmploiWhereUniqueInput[]
    update?: OffreEmploiUpdateWithWhereUniqueWithoutEntrepriseInput | OffreEmploiUpdateWithWhereUniqueWithoutEntrepriseInput[]
    updateMany?: OffreEmploiUpdateManyWithWhereWithoutEntrepriseInput | OffreEmploiUpdateManyWithWhereWithoutEntrepriseInput[]
    deleteMany?: OffreEmploiScalarWhereInput | OffreEmploiScalarWhereInput[]
  }

  export type EntretienUpdateManyWithoutEntrepriseNestedInput = {
    create?: XOR<EntretienCreateWithoutEntrepriseInput, EntretienUncheckedCreateWithoutEntrepriseInput> | EntretienCreateWithoutEntrepriseInput[] | EntretienUncheckedCreateWithoutEntrepriseInput[]
    connectOrCreate?: EntretienCreateOrConnectWithoutEntrepriseInput | EntretienCreateOrConnectWithoutEntrepriseInput[]
    upsert?: EntretienUpsertWithWhereUniqueWithoutEntrepriseInput | EntretienUpsertWithWhereUniqueWithoutEntrepriseInput[]
    createMany?: EntretienCreateManyEntrepriseInputEnvelope
    set?: EntretienWhereUniqueInput | EntretienWhereUniqueInput[]
    disconnect?: EntretienWhereUniqueInput | EntretienWhereUniqueInput[]
    delete?: EntretienWhereUniqueInput | EntretienWhereUniqueInput[]
    connect?: EntretienWhereUniqueInput | EntretienWhereUniqueInput[]
    update?: EntretienUpdateWithWhereUniqueWithoutEntrepriseInput | EntretienUpdateWithWhereUniqueWithoutEntrepriseInput[]
    updateMany?: EntretienUpdateManyWithWhereWithoutEntrepriseInput | EntretienUpdateManyWithWhereWithoutEntrepriseInput[]
    deleteMany?: EntretienScalarWhereInput | EntretienScalarWhereInput[]
  }

  export type ContratUpdateManyWithoutEntrepriseNestedInput = {
    create?: XOR<ContratCreateWithoutEntrepriseInput, ContratUncheckedCreateWithoutEntrepriseInput> | ContratCreateWithoutEntrepriseInput[] | ContratUncheckedCreateWithoutEntrepriseInput[]
    connectOrCreate?: ContratCreateOrConnectWithoutEntrepriseInput | ContratCreateOrConnectWithoutEntrepriseInput[]
    upsert?: ContratUpsertWithWhereUniqueWithoutEntrepriseInput | ContratUpsertWithWhereUniqueWithoutEntrepriseInput[]
    createMany?: ContratCreateManyEntrepriseInputEnvelope
    set?: ContratWhereUniqueInput | ContratWhereUniqueInput[]
    disconnect?: ContratWhereUniqueInput | ContratWhereUniqueInput[]
    delete?: ContratWhereUniqueInput | ContratWhereUniqueInput[]
    connect?: ContratWhereUniqueInput | ContratWhereUniqueInput[]
    update?: ContratUpdateWithWhereUniqueWithoutEntrepriseInput | ContratUpdateWithWhereUniqueWithoutEntrepriseInput[]
    updateMany?: ContratUpdateManyWithWhereWithoutEntrepriseInput | ContratUpdateManyWithWhereWithoutEntrepriseInput[]
    deleteMany?: ContratScalarWhereInput | ContratScalarWhereInput[]
  }

  export type ProjetUpdateManyWithoutEntrepriseNestedInput = {
    create?: XOR<ProjetCreateWithoutEntrepriseInput, ProjetUncheckedCreateWithoutEntrepriseInput> | ProjetCreateWithoutEntrepriseInput[] | ProjetUncheckedCreateWithoutEntrepriseInput[]
    connectOrCreate?: ProjetCreateOrConnectWithoutEntrepriseInput | ProjetCreateOrConnectWithoutEntrepriseInput[]
    upsert?: ProjetUpsertWithWhereUniqueWithoutEntrepriseInput | ProjetUpsertWithWhereUniqueWithoutEntrepriseInput[]
    createMany?: ProjetCreateManyEntrepriseInputEnvelope
    set?: ProjetWhereUniqueInput | ProjetWhereUniqueInput[]
    disconnect?: ProjetWhereUniqueInput | ProjetWhereUniqueInput[]
    delete?: ProjetWhereUniqueInput | ProjetWhereUniqueInput[]
    connect?: ProjetWhereUniqueInput | ProjetWhereUniqueInput[]
    update?: ProjetUpdateWithWhereUniqueWithoutEntrepriseInput | ProjetUpdateWithWhereUniqueWithoutEntrepriseInput[]
    updateMany?: ProjetUpdateManyWithWhereWithoutEntrepriseInput | ProjetUpdateManyWithWhereWithoutEntrepriseInput[]
    deleteMany?: ProjetScalarWhereInput | ProjetScalarWhereInput[]
  }

  export type NoteUpdateManyWithoutEntrepriseNestedInput = {
    create?: XOR<NoteCreateWithoutEntrepriseInput, NoteUncheckedCreateWithoutEntrepriseInput> | NoteCreateWithoutEntrepriseInput[] | NoteUncheckedCreateWithoutEntrepriseInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutEntrepriseInput | NoteCreateOrConnectWithoutEntrepriseInput[]
    upsert?: NoteUpsertWithWhereUniqueWithoutEntrepriseInput | NoteUpsertWithWhereUniqueWithoutEntrepriseInput[]
    createMany?: NoteCreateManyEntrepriseInputEnvelope
    set?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    disconnect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    delete?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    update?: NoteUpdateWithWhereUniqueWithoutEntrepriseInput | NoteUpdateWithWhereUniqueWithoutEntrepriseInput[]
    updateMany?: NoteUpdateManyWithWhereWithoutEntrepriseInput | NoteUpdateManyWithWhereWithoutEntrepriseInput[]
    deleteMany?: NoteScalarWhereInput | NoteScalarWhereInput[]
  }

  export type OffreEmploiUncheckedUpdateManyWithoutEntrepriseNestedInput = {
    create?: XOR<OffreEmploiCreateWithoutEntrepriseInput, OffreEmploiUncheckedCreateWithoutEntrepriseInput> | OffreEmploiCreateWithoutEntrepriseInput[] | OffreEmploiUncheckedCreateWithoutEntrepriseInput[]
    connectOrCreate?: OffreEmploiCreateOrConnectWithoutEntrepriseInput | OffreEmploiCreateOrConnectWithoutEntrepriseInput[]
    upsert?: OffreEmploiUpsertWithWhereUniqueWithoutEntrepriseInput | OffreEmploiUpsertWithWhereUniqueWithoutEntrepriseInput[]
    createMany?: OffreEmploiCreateManyEntrepriseInputEnvelope
    set?: OffreEmploiWhereUniqueInput | OffreEmploiWhereUniqueInput[]
    disconnect?: OffreEmploiWhereUniqueInput | OffreEmploiWhereUniqueInput[]
    delete?: OffreEmploiWhereUniqueInput | OffreEmploiWhereUniqueInput[]
    connect?: OffreEmploiWhereUniqueInput | OffreEmploiWhereUniqueInput[]
    update?: OffreEmploiUpdateWithWhereUniqueWithoutEntrepriseInput | OffreEmploiUpdateWithWhereUniqueWithoutEntrepriseInput[]
    updateMany?: OffreEmploiUpdateManyWithWhereWithoutEntrepriseInput | OffreEmploiUpdateManyWithWhereWithoutEntrepriseInput[]
    deleteMany?: OffreEmploiScalarWhereInput | OffreEmploiScalarWhereInput[]
  }

  export type EntretienUncheckedUpdateManyWithoutEntrepriseNestedInput = {
    create?: XOR<EntretienCreateWithoutEntrepriseInput, EntretienUncheckedCreateWithoutEntrepriseInput> | EntretienCreateWithoutEntrepriseInput[] | EntretienUncheckedCreateWithoutEntrepriseInput[]
    connectOrCreate?: EntretienCreateOrConnectWithoutEntrepriseInput | EntretienCreateOrConnectWithoutEntrepriseInput[]
    upsert?: EntretienUpsertWithWhereUniqueWithoutEntrepriseInput | EntretienUpsertWithWhereUniqueWithoutEntrepriseInput[]
    createMany?: EntretienCreateManyEntrepriseInputEnvelope
    set?: EntretienWhereUniqueInput | EntretienWhereUniqueInput[]
    disconnect?: EntretienWhereUniqueInput | EntretienWhereUniqueInput[]
    delete?: EntretienWhereUniqueInput | EntretienWhereUniqueInput[]
    connect?: EntretienWhereUniqueInput | EntretienWhereUniqueInput[]
    update?: EntretienUpdateWithWhereUniqueWithoutEntrepriseInput | EntretienUpdateWithWhereUniqueWithoutEntrepriseInput[]
    updateMany?: EntretienUpdateManyWithWhereWithoutEntrepriseInput | EntretienUpdateManyWithWhereWithoutEntrepriseInput[]
    deleteMany?: EntretienScalarWhereInput | EntretienScalarWhereInput[]
  }

  export type ContratUncheckedUpdateManyWithoutEntrepriseNestedInput = {
    create?: XOR<ContratCreateWithoutEntrepriseInput, ContratUncheckedCreateWithoutEntrepriseInput> | ContratCreateWithoutEntrepriseInput[] | ContratUncheckedCreateWithoutEntrepriseInput[]
    connectOrCreate?: ContratCreateOrConnectWithoutEntrepriseInput | ContratCreateOrConnectWithoutEntrepriseInput[]
    upsert?: ContratUpsertWithWhereUniqueWithoutEntrepriseInput | ContratUpsertWithWhereUniqueWithoutEntrepriseInput[]
    createMany?: ContratCreateManyEntrepriseInputEnvelope
    set?: ContratWhereUniqueInput | ContratWhereUniqueInput[]
    disconnect?: ContratWhereUniqueInput | ContratWhereUniqueInput[]
    delete?: ContratWhereUniqueInput | ContratWhereUniqueInput[]
    connect?: ContratWhereUniqueInput | ContratWhereUniqueInput[]
    update?: ContratUpdateWithWhereUniqueWithoutEntrepriseInput | ContratUpdateWithWhereUniqueWithoutEntrepriseInput[]
    updateMany?: ContratUpdateManyWithWhereWithoutEntrepriseInput | ContratUpdateManyWithWhereWithoutEntrepriseInput[]
    deleteMany?: ContratScalarWhereInput | ContratScalarWhereInput[]
  }

  export type ProjetUncheckedUpdateManyWithoutEntrepriseNestedInput = {
    create?: XOR<ProjetCreateWithoutEntrepriseInput, ProjetUncheckedCreateWithoutEntrepriseInput> | ProjetCreateWithoutEntrepriseInput[] | ProjetUncheckedCreateWithoutEntrepriseInput[]
    connectOrCreate?: ProjetCreateOrConnectWithoutEntrepriseInput | ProjetCreateOrConnectWithoutEntrepriseInput[]
    upsert?: ProjetUpsertWithWhereUniqueWithoutEntrepriseInput | ProjetUpsertWithWhereUniqueWithoutEntrepriseInput[]
    createMany?: ProjetCreateManyEntrepriseInputEnvelope
    set?: ProjetWhereUniqueInput | ProjetWhereUniqueInput[]
    disconnect?: ProjetWhereUniqueInput | ProjetWhereUniqueInput[]
    delete?: ProjetWhereUniqueInput | ProjetWhereUniqueInput[]
    connect?: ProjetWhereUniqueInput | ProjetWhereUniqueInput[]
    update?: ProjetUpdateWithWhereUniqueWithoutEntrepriseInput | ProjetUpdateWithWhereUniqueWithoutEntrepriseInput[]
    updateMany?: ProjetUpdateManyWithWhereWithoutEntrepriseInput | ProjetUpdateManyWithWhereWithoutEntrepriseInput[]
    deleteMany?: ProjetScalarWhereInput | ProjetScalarWhereInput[]
  }

  export type NoteUncheckedUpdateManyWithoutEntrepriseNestedInput = {
    create?: XOR<NoteCreateWithoutEntrepriseInput, NoteUncheckedCreateWithoutEntrepriseInput> | NoteCreateWithoutEntrepriseInput[] | NoteUncheckedCreateWithoutEntrepriseInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutEntrepriseInput | NoteCreateOrConnectWithoutEntrepriseInput[]
    upsert?: NoteUpsertWithWhereUniqueWithoutEntrepriseInput | NoteUpsertWithWhereUniqueWithoutEntrepriseInput[]
    createMany?: NoteCreateManyEntrepriseInputEnvelope
    set?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    disconnect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    delete?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    update?: NoteUpdateWithWhereUniqueWithoutEntrepriseInput | NoteUpdateWithWhereUniqueWithoutEntrepriseInput[]
    updateMany?: NoteUpdateManyWithWhereWithoutEntrepriseInput | NoteUpdateManyWithWhereWithoutEntrepriseInput[]
    deleteMany?: NoteScalarWhereInput | NoteScalarWhereInput[]
  }

  export type EntrepriseCreateNestedOneWithoutEntretiensInput = {
    create?: XOR<EntrepriseCreateWithoutEntretiensInput, EntrepriseUncheckedCreateWithoutEntretiensInput>
    connectOrCreate?: EntrepriseCreateOrConnectWithoutEntretiensInput
    connect?: EntrepriseWhereUniqueInput
  }

  export type CandidatCreateNestedOneWithoutEntretiensInput = {
    create?: XOR<CandidatCreateWithoutEntretiensInput, CandidatUncheckedCreateWithoutEntretiensInput>
    connectOrCreate?: CandidatCreateOrConnectWithoutEntretiensInput
    connect?: CandidatWhereUniqueInput
  }

  export type EntrepriseUpdateOneRequiredWithoutEntretiensNestedInput = {
    create?: XOR<EntrepriseCreateWithoutEntretiensInput, EntrepriseUncheckedCreateWithoutEntretiensInput>
    connectOrCreate?: EntrepriseCreateOrConnectWithoutEntretiensInput
    upsert?: EntrepriseUpsertWithoutEntretiensInput
    connect?: EntrepriseWhereUniqueInput
    update?: XOR<XOR<EntrepriseUpdateToOneWithWhereWithoutEntretiensInput, EntrepriseUpdateWithoutEntretiensInput>, EntrepriseUncheckedUpdateWithoutEntretiensInput>
  }

  export type CandidatUpdateOneRequiredWithoutEntretiensNestedInput = {
    create?: XOR<CandidatCreateWithoutEntretiensInput, CandidatUncheckedCreateWithoutEntretiensInput>
    connectOrCreate?: CandidatCreateOrConnectWithoutEntretiensInput
    upsert?: CandidatUpsertWithoutEntretiensInput
    connect?: CandidatWhereUniqueInput
    update?: XOR<XOR<CandidatUpdateToOneWithWhereWithoutEntretiensInput, CandidatUpdateWithoutEntretiensInput>, CandidatUncheckedUpdateWithoutEntretiensInput>
  }

  export type PropositionCreateNestedManyWithoutFreelancerInput = {
    create?: XOR<PropositionCreateWithoutFreelancerInput, PropositionUncheckedCreateWithoutFreelancerInput> | PropositionCreateWithoutFreelancerInput[] | PropositionUncheckedCreateWithoutFreelancerInput[]
    connectOrCreate?: PropositionCreateOrConnectWithoutFreelancerInput | PropositionCreateOrConnectWithoutFreelancerInput[]
    createMany?: PropositionCreateManyFreelancerInputEnvelope
    connect?: PropositionWhereUniqueInput | PropositionWhereUniqueInput[]
  }

  export type ContratCreateNestedManyWithoutFreelancerInput = {
    create?: XOR<ContratCreateWithoutFreelancerInput, ContratUncheckedCreateWithoutFreelancerInput> | ContratCreateWithoutFreelancerInput[] | ContratUncheckedCreateWithoutFreelancerInput[]
    connectOrCreate?: ContratCreateOrConnectWithoutFreelancerInput | ContratCreateOrConnectWithoutFreelancerInput[]
    createMany?: ContratCreateManyFreelancerInputEnvelope
    connect?: ContratWhereUniqueInput | ContratWhereUniqueInput[]
  }

  export type PropositionUncheckedCreateNestedManyWithoutFreelancerInput = {
    create?: XOR<PropositionCreateWithoutFreelancerInput, PropositionUncheckedCreateWithoutFreelancerInput> | PropositionCreateWithoutFreelancerInput[] | PropositionUncheckedCreateWithoutFreelancerInput[]
    connectOrCreate?: PropositionCreateOrConnectWithoutFreelancerInput | PropositionCreateOrConnectWithoutFreelancerInput[]
    createMany?: PropositionCreateManyFreelancerInputEnvelope
    connect?: PropositionWhereUniqueInput | PropositionWhereUniqueInput[]
  }

  export type ContratUncheckedCreateNestedManyWithoutFreelancerInput = {
    create?: XOR<ContratCreateWithoutFreelancerInput, ContratUncheckedCreateWithoutFreelancerInput> | ContratCreateWithoutFreelancerInput[] | ContratUncheckedCreateWithoutFreelancerInput[]
    connectOrCreate?: ContratCreateOrConnectWithoutFreelancerInput | ContratCreateOrConnectWithoutFreelancerInput[]
    createMany?: ContratCreateManyFreelancerInputEnvelope
    connect?: ContratWhereUniqueInput | ContratWhereUniqueInput[]
  }

  export type PropositionUpdateManyWithoutFreelancerNestedInput = {
    create?: XOR<PropositionCreateWithoutFreelancerInput, PropositionUncheckedCreateWithoutFreelancerInput> | PropositionCreateWithoutFreelancerInput[] | PropositionUncheckedCreateWithoutFreelancerInput[]
    connectOrCreate?: PropositionCreateOrConnectWithoutFreelancerInput | PropositionCreateOrConnectWithoutFreelancerInput[]
    upsert?: PropositionUpsertWithWhereUniqueWithoutFreelancerInput | PropositionUpsertWithWhereUniqueWithoutFreelancerInput[]
    createMany?: PropositionCreateManyFreelancerInputEnvelope
    set?: PropositionWhereUniqueInput | PropositionWhereUniqueInput[]
    disconnect?: PropositionWhereUniqueInput | PropositionWhereUniqueInput[]
    delete?: PropositionWhereUniqueInput | PropositionWhereUniqueInput[]
    connect?: PropositionWhereUniqueInput | PropositionWhereUniqueInput[]
    update?: PropositionUpdateWithWhereUniqueWithoutFreelancerInput | PropositionUpdateWithWhereUniqueWithoutFreelancerInput[]
    updateMany?: PropositionUpdateManyWithWhereWithoutFreelancerInput | PropositionUpdateManyWithWhereWithoutFreelancerInput[]
    deleteMany?: PropositionScalarWhereInput | PropositionScalarWhereInput[]
  }

  export type ContratUpdateManyWithoutFreelancerNestedInput = {
    create?: XOR<ContratCreateWithoutFreelancerInput, ContratUncheckedCreateWithoutFreelancerInput> | ContratCreateWithoutFreelancerInput[] | ContratUncheckedCreateWithoutFreelancerInput[]
    connectOrCreate?: ContratCreateOrConnectWithoutFreelancerInput | ContratCreateOrConnectWithoutFreelancerInput[]
    upsert?: ContratUpsertWithWhereUniqueWithoutFreelancerInput | ContratUpsertWithWhereUniqueWithoutFreelancerInput[]
    createMany?: ContratCreateManyFreelancerInputEnvelope
    set?: ContratWhereUniqueInput | ContratWhereUniqueInput[]
    disconnect?: ContratWhereUniqueInput | ContratWhereUniqueInput[]
    delete?: ContratWhereUniqueInput | ContratWhereUniqueInput[]
    connect?: ContratWhereUniqueInput | ContratWhereUniqueInput[]
    update?: ContratUpdateWithWhereUniqueWithoutFreelancerInput | ContratUpdateWithWhereUniqueWithoutFreelancerInput[]
    updateMany?: ContratUpdateManyWithWhereWithoutFreelancerInput | ContratUpdateManyWithWhereWithoutFreelancerInput[]
    deleteMany?: ContratScalarWhereInput | ContratScalarWhereInput[]
  }

  export type PropositionUncheckedUpdateManyWithoutFreelancerNestedInput = {
    create?: XOR<PropositionCreateWithoutFreelancerInput, PropositionUncheckedCreateWithoutFreelancerInput> | PropositionCreateWithoutFreelancerInput[] | PropositionUncheckedCreateWithoutFreelancerInput[]
    connectOrCreate?: PropositionCreateOrConnectWithoutFreelancerInput | PropositionCreateOrConnectWithoutFreelancerInput[]
    upsert?: PropositionUpsertWithWhereUniqueWithoutFreelancerInput | PropositionUpsertWithWhereUniqueWithoutFreelancerInput[]
    createMany?: PropositionCreateManyFreelancerInputEnvelope
    set?: PropositionWhereUniqueInput | PropositionWhereUniqueInput[]
    disconnect?: PropositionWhereUniqueInput | PropositionWhereUniqueInput[]
    delete?: PropositionWhereUniqueInput | PropositionWhereUniqueInput[]
    connect?: PropositionWhereUniqueInput | PropositionWhereUniqueInput[]
    update?: PropositionUpdateWithWhereUniqueWithoutFreelancerInput | PropositionUpdateWithWhereUniqueWithoutFreelancerInput[]
    updateMany?: PropositionUpdateManyWithWhereWithoutFreelancerInput | PropositionUpdateManyWithWhereWithoutFreelancerInput[]
    deleteMany?: PropositionScalarWhereInput | PropositionScalarWhereInput[]
  }

  export type ContratUncheckedUpdateManyWithoutFreelancerNestedInput = {
    create?: XOR<ContratCreateWithoutFreelancerInput, ContratUncheckedCreateWithoutFreelancerInput> | ContratCreateWithoutFreelancerInput[] | ContratUncheckedCreateWithoutFreelancerInput[]
    connectOrCreate?: ContratCreateOrConnectWithoutFreelancerInput | ContratCreateOrConnectWithoutFreelancerInput[]
    upsert?: ContratUpsertWithWhereUniqueWithoutFreelancerInput | ContratUpsertWithWhereUniqueWithoutFreelancerInput[]
    createMany?: ContratCreateManyFreelancerInputEnvelope
    set?: ContratWhereUniqueInput | ContratWhereUniqueInput[]
    disconnect?: ContratWhereUniqueInput | ContratWhereUniqueInput[]
    delete?: ContratWhereUniqueInput | ContratWhereUniqueInput[]
    connect?: ContratWhereUniqueInput | ContratWhereUniqueInput[]
    update?: ContratUpdateWithWhereUniqueWithoutFreelancerInput | ContratUpdateWithWhereUniqueWithoutFreelancerInput[]
    updateMany?: ContratUpdateManyWithWhereWithoutFreelancerInput | ContratUpdateManyWithWhereWithoutFreelancerInput[]
    deleteMany?: ContratScalarWhereInput | ContratScalarWhereInput[]
  }

  export type EntrepriseCreateNestedOneWithoutNotesInput = {
    create?: XOR<EntrepriseCreateWithoutNotesInput, EntrepriseUncheckedCreateWithoutNotesInput>
    connectOrCreate?: EntrepriseCreateOrConnectWithoutNotesInput
    connect?: EntrepriseWhereUniqueInput
  }

  export type CandidatCreateNestedOneWithoutNotesInput = {
    create?: XOR<CandidatCreateWithoutNotesInput, CandidatUncheckedCreateWithoutNotesInput>
    connectOrCreate?: CandidatCreateOrConnectWithoutNotesInput
    connect?: CandidatWhereUniqueInput
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type EntrepriseUpdateOneRequiredWithoutNotesNestedInput = {
    create?: XOR<EntrepriseCreateWithoutNotesInput, EntrepriseUncheckedCreateWithoutNotesInput>
    connectOrCreate?: EntrepriseCreateOrConnectWithoutNotesInput
    upsert?: EntrepriseUpsertWithoutNotesInput
    connect?: EntrepriseWhereUniqueInput
    update?: XOR<XOR<EntrepriseUpdateToOneWithWhereWithoutNotesInput, EntrepriseUpdateWithoutNotesInput>, EntrepriseUncheckedUpdateWithoutNotesInput>
  }

  export type CandidatUpdateOneRequiredWithoutNotesNestedInput = {
    create?: XOR<CandidatCreateWithoutNotesInput, CandidatUncheckedCreateWithoutNotesInput>
    connectOrCreate?: CandidatCreateOrConnectWithoutNotesInput
    upsert?: CandidatUpsertWithoutNotesInput
    connect?: CandidatWhereUniqueInput
    update?: XOR<XOR<CandidatUpdateToOneWithWhereWithoutNotesInput, CandidatUpdateWithoutNotesInput>, CandidatUncheckedUpdateWithoutNotesInput>
  }

  export type EntrepriseCreateNestedOneWithoutOffreEmploisInput = {
    create?: XOR<EntrepriseCreateWithoutOffreEmploisInput, EntrepriseUncheckedCreateWithoutOffreEmploisInput>
    connectOrCreate?: EntrepriseCreateOrConnectWithoutOffreEmploisInput
    connect?: EntrepriseWhereUniqueInput
  }

  export type EntrepriseUpdateOneRequiredWithoutOffreEmploisNestedInput = {
    create?: XOR<EntrepriseCreateWithoutOffreEmploisInput, EntrepriseUncheckedCreateWithoutOffreEmploisInput>
    connectOrCreate?: EntrepriseCreateOrConnectWithoutOffreEmploisInput
    upsert?: EntrepriseUpsertWithoutOffreEmploisInput
    connect?: EntrepriseWhereUniqueInput
    update?: XOR<XOR<EntrepriseUpdateToOneWithWhereWithoutOffreEmploisInput, EntrepriseUpdateWithoutOffreEmploisInput>, EntrepriseUncheckedUpdateWithoutOffreEmploisInput>
  }

  export type EntrepriseCreateNestedOneWithoutProjetsInput = {
    create?: XOR<EntrepriseCreateWithoutProjetsInput, EntrepriseUncheckedCreateWithoutProjetsInput>
    connectOrCreate?: EntrepriseCreateOrConnectWithoutProjetsInput
    connect?: EntrepriseWhereUniqueInput
  }

  export type PropositionCreateNestedManyWithoutProjetsInput = {
    create?: XOR<PropositionCreateWithoutProjetsInput, PropositionUncheckedCreateWithoutProjetsInput> | PropositionCreateWithoutProjetsInput[] | PropositionUncheckedCreateWithoutProjetsInput[]
    connectOrCreate?: PropositionCreateOrConnectWithoutProjetsInput | PropositionCreateOrConnectWithoutProjetsInput[]
    createMany?: PropositionCreateManyProjetsInputEnvelope
    connect?: PropositionWhereUniqueInput | PropositionWhereUniqueInput[]
  }

  export type PropositionUncheckedCreateNestedManyWithoutProjetsInput = {
    create?: XOR<PropositionCreateWithoutProjetsInput, PropositionUncheckedCreateWithoutProjetsInput> | PropositionCreateWithoutProjetsInput[] | PropositionUncheckedCreateWithoutProjetsInput[]
    connectOrCreate?: PropositionCreateOrConnectWithoutProjetsInput | PropositionCreateOrConnectWithoutProjetsInput[]
    createMany?: PropositionCreateManyProjetsInputEnvelope
    connect?: PropositionWhereUniqueInput | PropositionWhereUniqueInput[]
  }

  export type EntrepriseUpdateOneRequiredWithoutProjetsNestedInput = {
    create?: XOR<EntrepriseCreateWithoutProjetsInput, EntrepriseUncheckedCreateWithoutProjetsInput>
    connectOrCreate?: EntrepriseCreateOrConnectWithoutProjetsInput
    upsert?: EntrepriseUpsertWithoutProjetsInput
    connect?: EntrepriseWhereUniqueInput
    update?: XOR<XOR<EntrepriseUpdateToOneWithWhereWithoutProjetsInput, EntrepriseUpdateWithoutProjetsInput>, EntrepriseUncheckedUpdateWithoutProjetsInput>
  }

  export type PropositionUpdateManyWithoutProjetsNestedInput = {
    create?: XOR<PropositionCreateWithoutProjetsInput, PropositionUncheckedCreateWithoutProjetsInput> | PropositionCreateWithoutProjetsInput[] | PropositionUncheckedCreateWithoutProjetsInput[]
    connectOrCreate?: PropositionCreateOrConnectWithoutProjetsInput | PropositionCreateOrConnectWithoutProjetsInput[]
    upsert?: PropositionUpsertWithWhereUniqueWithoutProjetsInput | PropositionUpsertWithWhereUniqueWithoutProjetsInput[]
    createMany?: PropositionCreateManyProjetsInputEnvelope
    set?: PropositionWhereUniqueInput | PropositionWhereUniqueInput[]
    disconnect?: PropositionWhereUniqueInput | PropositionWhereUniqueInput[]
    delete?: PropositionWhereUniqueInput | PropositionWhereUniqueInput[]
    connect?: PropositionWhereUniqueInput | PropositionWhereUniqueInput[]
    update?: PropositionUpdateWithWhereUniqueWithoutProjetsInput | PropositionUpdateWithWhereUniqueWithoutProjetsInput[]
    updateMany?: PropositionUpdateManyWithWhereWithoutProjetsInput | PropositionUpdateManyWithWhereWithoutProjetsInput[]
    deleteMany?: PropositionScalarWhereInput | PropositionScalarWhereInput[]
  }

  export type PropositionUncheckedUpdateManyWithoutProjetsNestedInput = {
    create?: XOR<PropositionCreateWithoutProjetsInput, PropositionUncheckedCreateWithoutProjetsInput> | PropositionCreateWithoutProjetsInput[] | PropositionUncheckedCreateWithoutProjetsInput[]
    connectOrCreate?: PropositionCreateOrConnectWithoutProjetsInput | PropositionCreateOrConnectWithoutProjetsInput[]
    upsert?: PropositionUpsertWithWhereUniqueWithoutProjetsInput | PropositionUpsertWithWhereUniqueWithoutProjetsInput[]
    createMany?: PropositionCreateManyProjetsInputEnvelope
    set?: PropositionWhereUniqueInput | PropositionWhereUniqueInput[]
    disconnect?: PropositionWhereUniqueInput | PropositionWhereUniqueInput[]
    delete?: PropositionWhereUniqueInput | PropositionWhereUniqueInput[]
    connect?: PropositionWhereUniqueInput | PropositionWhereUniqueInput[]
    update?: PropositionUpdateWithWhereUniqueWithoutProjetsInput | PropositionUpdateWithWhereUniqueWithoutProjetsInput[]
    updateMany?: PropositionUpdateManyWithWhereWithoutProjetsInput | PropositionUpdateManyWithWhereWithoutProjetsInput[]
    deleteMany?: PropositionScalarWhereInput | PropositionScalarWhereInput[]
  }

  export type ProjetCreateNestedOneWithoutPropositionsInput = {
    create?: XOR<ProjetCreateWithoutPropositionsInput, ProjetUncheckedCreateWithoutPropositionsInput>
    connectOrCreate?: ProjetCreateOrConnectWithoutPropositionsInput
    connect?: ProjetWhereUniqueInput
  }

  export type FreelancerCreateNestedOneWithoutPropositionsInput = {
    create?: XOR<FreelancerCreateWithoutPropositionsInput, FreelancerUncheckedCreateWithoutPropositionsInput>
    connectOrCreate?: FreelancerCreateOrConnectWithoutPropositionsInput
    connect?: FreelancerWhereUniqueInput
  }

  export type ProjetUpdateOneRequiredWithoutPropositionsNestedInput = {
    create?: XOR<ProjetCreateWithoutPropositionsInput, ProjetUncheckedCreateWithoutPropositionsInput>
    connectOrCreate?: ProjetCreateOrConnectWithoutPropositionsInput
    upsert?: ProjetUpsertWithoutPropositionsInput
    connect?: ProjetWhereUniqueInput
    update?: XOR<XOR<ProjetUpdateToOneWithWhereWithoutPropositionsInput, ProjetUpdateWithoutPropositionsInput>, ProjetUncheckedUpdateWithoutPropositionsInput>
  }

  export type FreelancerUpdateOneRequiredWithoutPropositionsNestedInput = {
    create?: XOR<FreelancerCreateWithoutPropositionsInput, FreelancerUncheckedCreateWithoutPropositionsInput>
    connectOrCreate?: FreelancerCreateOrConnectWithoutPropositionsInput
    upsert?: FreelancerUpsertWithoutPropositionsInput
    connect?: FreelancerWhereUniqueInput
    update?: XOR<XOR<FreelancerUpdateToOneWithWhereWithoutPropositionsInput, FreelancerUpdateWithoutPropositionsInput>, FreelancerUncheckedUpdateWithoutPropositionsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type UserCreateWithoutAccountsInput = {
    firstName?: string | null
    lastName?: string | null
    email?: string | null
    userName?: string | null
    phoneNumber?: string | null
    passwordHash?: string | null
    active?: boolean | null
    createdAt?: Date | string | null
    verifiedAt?: Date | string | null
    signupMethod?: string | null
    image?: string | null
    entreprise?: EntrepriseCreateNestedManyWithoutUserInput
    candidat?: CandidatCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAccountsInput = {
    id?: number
    firstName?: string | null
    lastName?: string | null
    email?: string | null
    userName?: string | null
    phoneNumber?: string | null
    passwordHash?: string | null
    active?: boolean | null
    createdAt?: Date | string | null
    verifiedAt?: Date | string | null
    signupMethod?: string | null
    image?: string | null
    entreprise?: EntrepriseUncheckedCreateNestedManyWithoutUserInput
    candidat?: CandidatUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAccountsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
  }

  export type UserUpsertWithoutAccountsInput = {
    update: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAccountsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserUpdateWithoutAccountsInput = {
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    userName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    active?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    signupMethod?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    entreprise?: EntrepriseUpdateManyWithoutUserNestedInput
    candidat?: CandidatUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAccountsInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    userName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    active?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    signupMethod?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    entreprise?: EntrepriseUncheckedUpdateManyWithoutUserNestedInput
    candidat?: CandidatUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutSessionsInput = {
    firstName?: string | null
    lastName?: string | null
    email?: string | null
    userName?: string | null
    phoneNumber?: string | null
    passwordHash?: string | null
    active?: boolean | null
    createdAt?: Date | string | null
    verifiedAt?: Date | string | null
    signupMethod?: string | null
    image?: string | null
    entreprise?: EntrepriseCreateNestedManyWithoutUserInput
    candidat?: CandidatCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: number
    firstName?: string | null
    lastName?: string | null
    email?: string | null
    userName?: string | null
    phoneNumber?: string | null
    passwordHash?: string | null
    active?: boolean | null
    createdAt?: Date | string | null
    verifiedAt?: Date | string | null
    signupMethod?: string | null
    image?: string | null
    entreprise?: EntrepriseUncheckedCreateNestedManyWithoutUserInput
    candidat?: CandidatUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    userName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    active?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    signupMethod?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    entreprise?: EntrepriseUpdateManyWithoutUserNestedInput
    candidat?: CandidatUpdateManyWithoutUserNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    userName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    active?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    signupMethod?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    entreprise?: EntrepriseUncheckedUpdateManyWithoutUserNestedInput
    candidat?: CandidatUncheckedUpdateManyWithoutUserNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
  }

  export type EntrepriseCreateWithoutUserInput = {
    nomEntreprise?: string | null
    adresEntreprise?: string | null
    contactEntreprise?: string | null
    sectActivEntreprise?: string | null
    tailleEntreprise?: string | null
    logoEntreprise?: string | null
    descripEntreprise?: string | null
    siteWebEntreprise?: string | null
    offreEmplois?: OffreEmploiCreateNestedManyWithoutEntrepriseInput
    entretiens?: EntretienCreateNestedManyWithoutEntrepriseInput
    contrats?: ContratCreateNestedManyWithoutEntrepriseInput
    projets?: ProjetCreateNestedManyWithoutEntrepriseInput
    notes?: NoteCreateNestedManyWithoutEntrepriseInput
  }

  export type EntrepriseUncheckedCreateWithoutUserInput = {
    idEntreprise?: number
    nomEntreprise?: string | null
    adresEntreprise?: string | null
    contactEntreprise?: string | null
    sectActivEntreprise?: string | null
    tailleEntreprise?: string | null
    logoEntreprise?: string | null
    descripEntreprise?: string | null
    siteWebEntreprise?: string | null
    offreEmplois?: OffreEmploiUncheckedCreateNestedManyWithoutEntrepriseInput
    entretiens?: EntretienUncheckedCreateNestedManyWithoutEntrepriseInput
    contrats?: ContratUncheckedCreateNestedManyWithoutEntrepriseInput
    projets?: ProjetUncheckedCreateNestedManyWithoutEntrepriseInput
    notes?: NoteUncheckedCreateNestedManyWithoutEntrepriseInput
  }

  export type EntrepriseCreateOrConnectWithoutUserInput = {
    where: EntrepriseWhereUniqueInput
    create: XOR<EntrepriseCreateWithoutUserInput, EntrepriseUncheckedCreateWithoutUserInput>
  }

  export type EntrepriseCreateManyUserInputEnvelope = {
    data: EntrepriseCreateManyUserInput | EntrepriseCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CandidatCreateWithoutUserInput = {
    adresCandidat?: string | null
    experienceCandidat?: string | null
    nivEtudesCandidat?: string | null
    competencesCandidat?: string | null
    cVCandidat?: string | null
    entretiens?: EntretienCreateNestedManyWithoutCandidatInput
    notes?: NoteCreateNestedManyWithoutCandidatInput
  }

  export type CandidatUncheckedCreateWithoutUserInput = {
    idCandidat?: number
    adresCandidat?: string | null
    experienceCandidat?: string | null
    nivEtudesCandidat?: string | null
    competencesCandidat?: string | null
    cVCandidat?: string | null
    entretiens?: EntretienUncheckedCreateNestedManyWithoutCandidatInput
    notes?: NoteUncheckedCreateNestedManyWithoutCandidatInput
  }

  export type CandidatCreateOrConnectWithoutUserInput = {
    where: CandidatWhereUniqueInput
    create: XOR<CandidatCreateWithoutUserInput, CandidatUncheckedCreateWithoutUserInput>
  }

  export type CandidatCreateManyUserInputEnvelope = {
    data: CandidatCreateManyUserInput | CandidatCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AccountCreateWithoutUserInput = {
    id?: string
    type: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUncheckedCreateWithoutUserInput = {
    id?: string
    type: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountCreateOrConnectWithoutUserInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountCreateManyUserInputEnvelope = {
    data: AccountCreateManyUserInput | AccountCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SessionCreateWithoutUserInput = {
    sessionToken: string
    expires: Date | string
    active?: boolean
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id?: number
    sessionToken: string
    expires: Date | string
    active?: boolean
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: SessionCreateManyUserInput | SessionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type EntrepriseUpsertWithWhereUniqueWithoutUserInput = {
    where: EntrepriseWhereUniqueInput
    update: XOR<EntrepriseUpdateWithoutUserInput, EntrepriseUncheckedUpdateWithoutUserInput>
    create: XOR<EntrepriseCreateWithoutUserInput, EntrepriseUncheckedCreateWithoutUserInput>
  }

  export type EntrepriseUpdateWithWhereUniqueWithoutUserInput = {
    where: EntrepriseWhereUniqueInput
    data: XOR<EntrepriseUpdateWithoutUserInput, EntrepriseUncheckedUpdateWithoutUserInput>
  }

  export type EntrepriseUpdateManyWithWhereWithoutUserInput = {
    where: EntrepriseScalarWhereInput
    data: XOR<EntrepriseUpdateManyMutationInput, EntrepriseUncheckedUpdateManyWithoutUserInput>
  }

  export type EntrepriseScalarWhereInput = {
    AND?: EntrepriseScalarWhereInput | EntrepriseScalarWhereInput[]
    OR?: EntrepriseScalarWhereInput[]
    NOT?: EntrepriseScalarWhereInput | EntrepriseScalarWhereInput[]
    idEntreprise?: IntFilter<"Entreprise"> | number
    nomEntreprise?: StringNullableFilter<"Entreprise"> | string | null
    adresEntreprise?: StringNullableFilter<"Entreprise"> | string | null
    contactEntreprise?: StringNullableFilter<"Entreprise"> | string | null
    sectActivEntreprise?: StringNullableFilter<"Entreprise"> | string | null
    tailleEntreprise?: StringNullableFilter<"Entreprise"> | string | null
    logoEntreprise?: StringNullableFilter<"Entreprise"> | string | null
    descripEntreprise?: StringNullableFilter<"Entreprise"> | string | null
    siteWebEntreprise?: StringNullableFilter<"Entreprise"> | string | null
    userId?: IntFilter<"Entreprise"> | number
  }

  export type CandidatUpsertWithWhereUniqueWithoutUserInput = {
    where: CandidatWhereUniqueInput
    update: XOR<CandidatUpdateWithoutUserInput, CandidatUncheckedUpdateWithoutUserInput>
    create: XOR<CandidatCreateWithoutUserInput, CandidatUncheckedCreateWithoutUserInput>
  }

  export type CandidatUpdateWithWhereUniqueWithoutUserInput = {
    where: CandidatWhereUniqueInput
    data: XOR<CandidatUpdateWithoutUserInput, CandidatUncheckedUpdateWithoutUserInput>
  }

  export type CandidatUpdateManyWithWhereWithoutUserInput = {
    where: CandidatScalarWhereInput
    data: XOR<CandidatUpdateManyMutationInput, CandidatUncheckedUpdateManyWithoutUserInput>
  }

  export type CandidatScalarWhereInput = {
    AND?: CandidatScalarWhereInput | CandidatScalarWhereInput[]
    OR?: CandidatScalarWhereInput[]
    NOT?: CandidatScalarWhereInput | CandidatScalarWhereInput[]
    idCandidat?: IntFilter<"Candidat"> | number
    adresCandidat?: StringNullableFilter<"Candidat"> | string | null
    experienceCandidat?: StringNullableFilter<"Candidat"> | string | null
    nivEtudesCandidat?: StringNullableFilter<"Candidat"> | string | null
    competencesCandidat?: StringNullableFilter<"Candidat"> | string | null
    cVCandidat?: StringNullableFilter<"Candidat"> | string | null
    userId?: IntFilter<"Candidat"> | number
  }

  export type AccountUpsertWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    update: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountUpdateWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    data: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
  }

  export type AccountUpdateManyWithWhereWithoutUserInput = {
    where: AccountScalarWhereInput
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyWithoutUserInput>
  }

  export type AccountScalarWhereInput = {
    AND?: AccountScalarWhereInput | AccountScalarWhereInput[]
    OR?: AccountScalarWhereInput[]
    NOT?: AccountScalarWhereInput | AccountScalarWhereInput[]
    id?: StringFilter<"Account"> | string
    userId?: IntFilter<"Account"> | number
    type?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutUserInput>
  }

  export type SessionScalarWhereInput = {
    AND?: SessionScalarWhereInput | SessionScalarWhereInput[]
    OR?: SessionScalarWhereInput[]
    NOT?: SessionScalarWhereInput | SessionScalarWhereInput[]
    id?: IntFilter<"Session"> | number
    sessionToken?: StringFilter<"Session"> | string
    userId?: IntFilter<"Session"> | number
    expires?: DateTimeFilter<"Session"> | Date | string
    active?: BoolFilter<"Session"> | boolean
  }

  export type UserCreateWithoutCandidatInput = {
    firstName?: string | null
    lastName?: string | null
    email?: string | null
    userName?: string | null
    phoneNumber?: string | null
    passwordHash?: string | null
    active?: boolean | null
    createdAt?: Date | string | null
    verifiedAt?: Date | string | null
    signupMethod?: string | null
    image?: string | null
    entreprise?: EntrepriseCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCandidatInput = {
    id?: number
    firstName?: string | null
    lastName?: string | null
    email?: string | null
    userName?: string | null
    phoneNumber?: string | null
    passwordHash?: string | null
    active?: boolean | null
    createdAt?: Date | string | null
    verifiedAt?: Date | string | null
    signupMethod?: string | null
    image?: string | null
    entreprise?: EntrepriseUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCandidatInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCandidatInput, UserUncheckedCreateWithoutCandidatInput>
  }

  export type EntretienCreateWithoutCandidatInput = {
    dateEntretien: Date | string
    adresEntretien: string
    recruEntretien: string
    typeEntretien: string
    descripEntreprise: string
    entreprise: EntrepriseCreateNestedOneWithoutEntretiensInput
  }

  export type EntretienUncheckedCreateWithoutCandidatInput = {
    idEntretien?: number
    entrepriseId: number
    dateEntretien: Date | string
    adresEntretien: string
    recruEntretien: string
    typeEntretien: string
    descripEntreprise: string
  }

  export type EntretienCreateOrConnectWithoutCandidatInput = {
    where: EntretienWhereUniqueInput
    create: XOR<EntretienCreateWithoutCandidatInput, EntretienUncheckedCreateWithoutCandidatInput>
  }

  export type EntretienCreateManyCandidatInputEnvelope = {
    data: EntretienCreateManyCandidatInput | EntretienCreateManyCandidatInput[]
    skipDuplicates?: boolean
  }

  export type NoteCreateWithoutCandidatInput = {
    Note: Decimal | DecimalJsLike | number | string
    commentNote: string
    dateNote: Date | string
    entreprise: EntrepriseCreateNestedOneWithoutNotesInput
  }

  export type NoteUncheckedCreateWithoutCandidatInput = {
    idNote?: number
    entrepriseId: number
    Note: Decimal | DecimalJsLike | number | string
    commentNote: string
    dateNote: Date | string
  }

  export type NoteCreateOrConnectWithoutCandidatInput = {
    where: NoteWhereUniqueInput
    create: XOR<NoteCreateWithoutCandidatInput, NoteUncheckedCreateWithoutCandidatInput>
  }

  export type NoteCreateManyCandidatInputEnvelope = {
    data: NoteCreateManyCandidatInput | NoteCreateManyCandidatInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutCandidatInput = {
    update: XOR<UserUpdateWithoutCandidatInput, UserUncheckedUpdateWithoutCandidatInput>
    create: XOR<UserCreateWithoutCandidatInput, UserUncheckedCreateWithoutCandidatInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCandidatInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCandidatInput, UserUncheckedUpdateWithoutCandidatInput>
  }

  export type UserUpdateWithoutCandidatInput = {
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    userName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    active?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    signupMethod?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    entreprise?: EntrepriseUpdateManyWithoutUserNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCandidatInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    userName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    active?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    signupMethod?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    entreprise?: EntrepriseUncheckedUpdateManyWithoutUserNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type EntretienUpsertWithWhereUniqueWithoutCandidatInput = {
    where: EntretienWhereUniqueInput
    update: XOR<EntretienUpdateWithoutCandidatInput, EntretienUncheckedUpdateWithoutCandidatInput>
    create: XOR<EntretienCreateWithoutCandidatInput, EntretienUncheckedCreateWithoutCandidatInput>
  }

  export type EntretienUpdateWithWhereUniqueWithoutCandidatInput = {
    where: EntretienWhereUniqueInput
    data: XOR<EntretienUpdateWithoutCandidatInput, EntretienUncheckedUpdateWithoutCandidatInput>
  }

  export type EntretienUpdateManyWithWhereWithoutCandidatInput = {
    where: EntretienScalarWhereInput
    data: XOR<EntretienUpdateManyMutationInput, EntretienUncheckedUpdateManyWithoutCandidatInput>
  }

  export type EntretienScalarWhereInput = {
    AND?: EntretienScalarWhereInput | EntretienScalarWhereInput[]
    OR?: EntretienScalarWhereInput[]
    NOT?: EntretienScalarWhereInput | EntretienScalarWhereInput[]
    idEntretien?: IntFilter<"Entretien"> | number
    entrepriseId?: IntFilter<"Entretien"> | number
    candidatId?: IntFilter<"Entretien"> | number
    dateEntretien?: DateTimeFilter<"Entretien"> | Date | string
    adresEntretien?: StringFilter<"Entretien"> | string
    recruEntretien?: StringFilter<"Entretien"> | string
    typeEntretien?: StringFilter<"Entretien"> | string
    descripEntreprise?: StringFilter<"Entretien"> | string
  }

  export type NoteUpsertWithWhereUniqueWithoutCandidatInput = {
    where: NoteWhereUniqueInput
    update: XOR<NoteUpdateWithoutCandidatInput, NoteUncheckedUpdateWithoutCandidatInput>
    create: XOR<NoteCreateWithoutCandidatInput, NoteUncheckedCreateWithoutCandidatInput>
  }

  export type NoteUpdateWithWhereUniqueWithoutCandidatInput = {
    where: NoteWhereUniqueInput
    data: XOR<NoteUpdateWithoutCandidatInput, NoteUncheckedUpdateWithoutCandidatInput>
  }

  export type NoteUpdateManyWithWhereWithoutCandidatInput = {
    where: NoteScalarWhereInput
    data: XOR<NoteUpdateManyMutationInput, NoteUncheckedUpdateManyWithoutCandidatInput>
  }

  export type NoteScalarWhereInput = {
    AND?: NoteScalarWhereInput | NoteScalarWhereInput[]
    OR?: NoteScalarWhereInput[]
    NOT?: NoteScalarWhereInput | NoteScalarWhereInput[]
    idNote?: IntFilter<"Note"> | number
    entrepriseId?: IntFilter<"Note"> | number
    candidatId?: IntFilter<"Note"> | number
    Note?: DecimalFilter<"Note"> | Decimal | DecimalJsLike | number | string
    commentNote?: StringFilter<"Note"> | string
    dateNote?: DateTimeFilter<"Note"> | Date | string
  }

  export type EntrepriseCreateWithoutContratsInput = {
    nomEntreprise?: string | null
    adresEntreprise?: string | null
    contactEntreprise?: string | null
    sectActivEntreprise?: string | null
    tailleEntreprise?: string | null
    logoEntreprise?: string | null
    descripEntreprise?: string | null
    siteWebEntreprise?: string | null
    user: UserCreateNestedOneWithoutEntrepriseInput
    offreEmplois?: OffreEmploiCreateNestedManyWithoutEntrepriseInput
    entretiens?: EntretienCreateNestedManyWithoutEntrepriseInput
    projets?: ProjetCreateNestedManyWithoutEntrepriseInput
    notes?: NoteCreateNestedManyWithoutEntrepriseInput
  }

  export type EntrepriseUncheckedCreateWithoutContratsInput = {
    idEntreprise?: number
    nomEntreprise?: string | null
    adresEntreprise?: string | null
    contactEntreprise?: string | null
    sectActivEntreprise?: string | null
    tailleEntreprise?: string | null
    logoEntreprise?: string | null
    descripEntreprise?: string | null
    siteWebEntreprise?: string | null
    userId: number
    offreEmplois?: OffreEmploiUncheckedCreateNestedManyWithoutEntrepriseInput
    entretiens?: EntretienUncheckedCreateNestedManyWithoutEntrepriseInput
    projets?: ProjetUncheckedCreateNestedManyWithoutEntrepriseInput
    notes?: NoteUncheckedCreateNestedManyWithoutEntrepriseInput
  }

  export type EntrepriseCreateOrConnectWithoutContratsInput = {
    where: EntrepriseWhereUniqueInput
    create: XOR<EntrepriseCreateWithoutContratsInput, EntrepriseUncheckedCreateWithoutContratsInput>
  }

  export type FreelancerCreateWithoutContratsInput = {
    nomFreelancer: string
    prenomFreelancer: string
    adresFreelancer: string
    TelFreelancer: string
    emailFreelancer: string
    competencesFreelancer: string
    experienceFreelancer: string
    portfolioFreelancer: string
    propositions?: PropositionCreateNestedManyWithoutFreelancerInput
  }

  export type FreelancerUncheckedCreateWithoutContratsInput = {
    idFreelancer?: number
    nomFreelancer: string
    prenomFreelancer: string
    adresFreelancer: string
    TelFreelancer: string
    emailFreelancer: string
    competencesFreelancer: string
    experienceFreelancer: string
    portfolioFreelancer: string
    propositions?: PropositionUncheckedCreateNestedManyWithoutFreelancerInput
  }

  export type FreelancerCreateOrConnectWithoutContratsInput = {
    where: FreelancerWhereUniqueInput
    create: XOR<FreelancerCreateWithoutContratsInput, FreelancerUncheckedCreateWithoutContratsInput>
  }

  export type EntrepriseUpsertWithoutContratsInput = {
    update: XOR<EntrepriseUpdateWithoutContratsInput, EntrepriseUncheckedUpdateWithoutContratsInput>
    create: XOR<EntrepriseCreateWithoutContratsInput, EntrepriseUncheckedCreateWithoutContratsInput>
    where?: EntrepriseWhereInput
  }

  export type EntrepriseUpdateToOneWithWhereWithoutContratsInput = {
    where?: EntrepriseWhereInput
    data: XOR<EntrepriseUpdateWithoutContratsInput, EntrepriseUncheckedUpdateWithoutContratsInput>
  }

  export type EntrepriseUpdateWithoutContratsInput = {
    nomEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    adresEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    contactEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    sectActivEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    tailleEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    logoEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    descripEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    siteWebEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutEntrepriseNestedInput
    offreEmplois?: OffreEmploiUpdateManyWithoutEntrepriseNestedInput
    entretiens?: EntretienUpdateManyWithoutEntrepriseNestedInput
    projets?: ProjetUpdateManyWithoutEntrepriseNestedInput
    notes?: NoteUpdateManyWithoutEntrepriseNestedInput
  }

  export type EntrepriseUncheckedUpdateWithoutContratsInput = {
    idEntreprise?: IntFieldUpdateOperationsInput | number
    nomEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    adresEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    contactEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    sectActivEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    tailleEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    logoEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    descripEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    siteWebEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    offreEmplois?: OffreEmploiUncheckedUpdateManyWithoutEntrepriseNestedInput
    entretiens?: EntretienUncheckedUpdateManyWithoutEntrepriseNestedInput
    projets?: ProjetUncheckedUpdateManyWithoutEntrepriseNestedInput
    notes?: NoteUncheckedUpdateManyWithoutEntrepriseNestedInput
  }

  export type FreelancerUpsertWithoutContratsInput = {
    update: XOR<FreelancerUpdateWithoutContratsInput, FreelancerUncheckedUpdateWithoutContratsInput>
    create: XOR<FreelancerCreateWithoutContratsInput, FreelancerUncheckedCreateWithoutContratsInput>
    where?: FreelancerWhereInput
  }

  export type FreelancerUpdateToOneWithWhereWithoutContratsInput = {
    where?: FreelancerWhereInput
    data: XOR<FreelancerUpdateWithoutContratsInput, FreelancerUncheckedUpdateWithoutContratsInput>
  }

  export type FreelancerUpdateWithoutContratsInput = {
    nomFreelancer?: StringFieldUpdateOperationsInput | string
    prenomFreelancer?: StringFieldUpdateOperationsInput | string
    adresFreelancer?: StringFieldUpdateOperationsInput | string
    TelFreelancer?: StringFieldUpdateOperationsInput | string
    emailFreelancer?: StringFieldUpdateOperationsInput | string
    competencesFreelancer?: StringFieldUpdateOperationsInput | string
    experienceFreelancer?: StringFieldUpdateOperationsInput | string
    portfolioFreelancer?: StringFieldUpdateOperationsInput | string
    propositions?: PropositionUpdateManyWithoutFreelancerNestedInput
  }

  export type FreelancerUncheckedUpdateWithoutContratsInput = {
    idFreelancer?: IntFieldUpdateOperationsInput | number
    nomFreelancer?: StringFieldUpdateOperationsInput | string
    prenomFreelancer?: StringFieldUpdateOperationsInput | string
    adresFreelancer?: StringFieldUpdateOperationsInput | string
    TelFreelancer?: StringFieldUpdateOperationsInput | string
    emailFreelancer?: StringFieldUpdateOperationsInput | string
    competencesFreelancer?: StringFieldUpdateOperationsInput | string
    experienceFreelancer?: StringFieldUpdateOperationsInput | string
    portfolioFreelancer?: StringFieldUpdateOperationsInput | string
    propositions?: PropositionUncheckedUpdateManyWithoutFreelancerNestedInput
  }

  export type UserCreateWithoutEntrepriseInput = {
    firstName?: string | null
    lastName?: string | null
    email?: string | null
    userName?: string | null
    phoneNumber?: string | null
    passwordHash?: string | null
    active?: boolean | null
    createdAt?: Date | string | null
    verifiedAt?: Date | string | null
    signupMethod?: string | null
    image?: string | null
    candidat?: CandidatCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutEntrepriseInput = {
    id?: number
    firstName?: string | null
    lastName?: string | null
    email?: string | null
    userName?: string | null
    phoneNumber?: string | null
    passwordHash?: string | null
    active?: boolean | null
    createdAt?: Date | string | null
    verifiedAt?: Date | string | null
    signupMethod?: string | null
    image?: string | null
    candidat?: CandidatUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutEntrepriseInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutEntrepriseInput, UserUncheckedCreateWithoutEntrepriseInput>
  }

  export type OffreEmploiCreateWithoutEntrepriseInput = {
    titreOffreEmploi: string
    descripOffreEmploi: string
    localiOffreEmploi: string
    datePubliOffreEmploi: Date | string
    datelimitOffreEmploi: Date | string
    salaireOffreEmploi: number
    typeContOffreEmploi: string
    experienceOffreEmploi: string
    nivEtuOffreEmploi: string
    competencesOffreEmploi: string
  }

  export type OffreEmploiUncheckedCreateWithoutEntrepriseInput = {
    idOffreEmploi?: number
    titreOffreEmploi: string
    descripOffreEmploi: string
    localiOffreEmploi: string
    datePubliOffreEmploi: Date | string
    datelimitOffreEmploi: Date | string
    salaireOffreEmploi: number
    typeContOffreEmploi: string
    experienceOffreEmploi: string
    nivEtuOffreEmploi: string
    competencesOffreEmploi: string
  }

  export type OffreEmploiCreateOrConnectWithoutEntrepriseInput = {
    where: OffreEmploiWhereUniqueInput
    create: XOR<OffreEmploiCreateWithoutEntrepriseInput, OffreEmploiUncheckedCreateWithoutEntrepriseInput>
  }

  export type OffreEmploiCreateManyEntrepriseInputEnvelope = {
    data: OffreEmploiCreateManyEntrepriseInput | OffreEmploiCreateManyEntrepriseInput[]
    skipDuplicates?: boolean
  }

  export type EntretienCreateWithoutEntrepriseInput = {
    dateEntretien: Date | string
    adresEntretien: string
    recruEntretien: string
    typeEntretien: string
    descripEntreprise: string
    candidat: CandidatCreateNestedOneWithoutEntretiensInput
  }

  export type EntretienUncheckedCreateWithoutEntrepriseInput = {
    idEntretien?: number
    candidatId: number
    dateEntretien: Date | string
    adresEntretien: string
    recruEntretien: string
    typeEntretien: string
    descripEntreprise: string
  }

  export type EntretienCreateOrConnectWithoutEntrepriseInput = {
    where: EntretienWhereUniqueInput
    create: XOR<EntretienCreateWithoutEntrepriseInput, EntretienUncheckedCreateWithoutEntrepriseInput>
  }

  export type EntretienCreateManyEntrepriseInputEnvelope = {
    data: EntretienCreateManyEntrepriseInput | EntretienCreateManyEntrepriseInput[]
    skipDuplicates?: boolean
  }

  export type ContratCreateWithoutEntrepriseInput = {
    titreProjContrat: string
    datDebConrat: Date | string
    datFinConrat: Date | string
    coutContrat: number
    descripContrat: string
    statutContrat: string
    freelancer: FreelancerCreateNestedOneWithoutContratsInput
  }

  export type ContratUncheckedCreateWithoutEntrepriseInput = {
    idContrat?: number
    freelancerId: number
    titreProjContrat: string
    datDebConrat: Date | string
    datFinConrat: Date | string
    coutContrat: number
    descripContrat: string
    statutContrat: string
  }

  export type ContratCreateOrConnectWithoutEntrepriseInput = {
    where: ContratWhereUniqueInput
    create: XOR<ContratCreateWithoutEntrepriseInput, ContratUncheckedCreateWithoutEntrepriseInput>
  }

  export type ContratCreateManyEntrepriseInputEnvelope = {
    data: ContratCreateManyEntrepriseInput | ContratCreateManyEntrepriseInput[]
    skipDuplicates?: boolean
  }

  export type ProjetCreateWithoutEntrepriseInput = {
    titreProjet: string
    descripProjet: string
    BudgetProjet: number
    DelaiProjet: number
    propositions?: PropositionCreateNestedManyWithoutProjetsInput
  }

  export type ProjetUncheckedCreateWithoutEntrepriseInput = {
    idProjet?: number
    titreProjet: string
    descripProjet: string
    BudgetProjet: number
    DelaiProjet: number
    propositions?: PropositionUncheckedCreateNestedManyWithoutProjetsInput
  }

  export type ProjetCreateOrConnectWithoutEntrepriseInput = {
    where: ProjetWhereUniqueInput
    create: XOR<ProjetCreateWithoutEntrepriseInput, ProjetUncheckedCreateWithoutEntrepriseInput>
  }

  export type ProjetCreateManyEntrepriseInputEnvelope = {
    data: ProjetCreateManyEntrepriseInput | ProjetCreateManyEntrepriseInput[]
    skipDuplicates?: boolean
  }

  export type NoteCreateWithoutEntrepriseInput = {
    Note: Decimal | DecimalJsLike | number | string
    commentNote: string
    dateNote: Date | string
    candidat: CandidatCreateNestedOneWithoutNotesInput
  }

  export type NoteUncheckedCreateWithoutEntrepriseInput = {
    idNote?: number
    candidatId: number
    Note: Decimal | DecimalJsLike | number | string
    commentNote: string
    dateNote: Date | string
  }

  export type NoteCreateOrConnectWithoutEntrepriseInput = {
    where: NoteWhereUniqueInput
    create: XOR<NoteCreateWithoutEntrepriseInput, NoteUncheckedCreateWithoutEntrepriseInput>
  }

  export type NoteCreateManyEntrepriseInputEnvelope = {
    data: NoteCreateManyEntrepriseInput | NoteCreateManyEntrepriseInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutEntrepriseInput = {
    update: XOR<UserUpdateWithoutEntrepriseInput, UserUncheckedUpdateWithoutEntrepriseInput>
    create: XOR<UserCreateWithoutEntrepriseInput, UserUncheckedCreateWithoutEntrepriseInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutEntrepriseInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutEntrepriseInput, UserUncheckedUpdateWithoutEntrepriseInput>
  }

  export type UserUpdateWithoutEntrepriseInput = {
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    userName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    active?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    signupMethod?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    candidat?: CandidatUpdateManyWithoutUserNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutEntrepriseInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    userName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    active?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    signupMethod?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    candidat?: CandidatUncheckedUpdateManyWithoutUserNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type OffreEmploiUpsertWithWhereUniqueWithoutEntrepriseInput = {
    where: OffreEmploiWhereUniqueInput
    update: XOR<OffreEmploiUpdateWithoutEntrepriseInput, OffreEmploiUncheckedUpdateWithoutEntrepriseInput>
    create: XOR<OffreEmploiCreateWithoutEntrepriseInput, OffreEmploiUncheckedCreateWithoutEntrepriseInput>
  }

  export type OffreEmploiUpdateWithWhereUniqueWithoutEntrepriseInput = {
    where: OffreEmploiWhereUniqueInput
    data: XOR<OffreEmploiUpdateWithoutEntrepriseInput, OffreEmploiUncheckedUpdateWithoutEntrepriseInput>
  }

  export type OffreEmploiUpdateManyWithWhereWithoutEntrepriseInput = {
    where: OffreEmploiScalarWhereInput
    data: XOR<OffreEmploiUpdateManyMutationInput, OffreEmploiUncheckedUpdateManyWithoutEntrepriseInput>
  }

  export type OffreEmploiScalarWhereInput = {
    AND?: OffreEmploiScalarWhereInput | OffreEmploiScalarWhereInput[]
    OR?: OffreEmploiScalarWhereInput[]
    NOT?: OffreEmploiScalarWhereInput | OffreEmploiScalarWhereInput[]
    idOffreEmploi?: IntFilter<"OffreEmploi"> | number
    entrepriseId?: IntFilter<"OffreEmploi"> | number
    titreOffreEmploi?: StringFilter<"OffreEmploi"> | string
    descripOffreEmploi?: StringFilter<"OffreEmploi"> | string
    localiOffreEmploi?: StringFilter<"OffreEmploi"> | string
    datePubliOffreEmploi?: DateTimeFilter<"OffreEmploi"> | Date | string
    datelimitOffreEmploi?: DateTimeFilter<"OffreEmploi"> | Date | string
    salaireOffreEmploi?: IntFilter<"OffreEmploi"> | number
    typeContOffreEmploi?: StringFilter<"OffreEmploi"> | string
    experienceOffreEmploi?: StringFilter<"OffreEmploi"> | string
    nivEtuOffreEmploi?: StringFilter<"OffreEmploi"> | string
    competencesOffreEmploi?: StringFilter<"OffreEmploi"> | string
  }

  export type EntretienUpsertWithWhereUniqueWithoutEntrepriseInput = {
    where: EntretienWhereUniqueInput
    update: XOR<EntretienUpdateWithoutEntrepriseInput, EntretienUncheckedUpdateWithoutEntrepriseInput>
    create: XOR<EntretienCreateWithoutEntrepriseInput, EntretienUncheckedCreateWithoutEntrepriseInput>
  }

  export type EntretienUpdateWithWhereUniqueWithoutEntrepriseInput = {
    where: EntretienWhereUniqueInput
    data: XOR<EntretienUpdateWithoutEntrepriseInput, EntretienUncheckedUpdateWithoutEntrepriseInput>
  }

  export type EntretienUpdateManyWithWhereWithoutEntrepriseInput = {
    where: EntretienScalarWhereInput
    data: XOR<EntretienUpdateManyMutationInput, EntretienUncheckedUpdateManyWithoutEntrepriseInput>
  }

  export type ContratUpsertWithWhereUniqueWithoutEntrepriseInput = {
    where: ContratWhereUniqueInput
    update: XOR<ContratUpdateWithoutEntrepriseInput, ContratUncheckedUpdateWithoutEntrepriseInput>
    create: XOR<ContratCreateWithoutEntrepriseInput, ContratUncheckedCreateWithoutEntrepriseInput>
  }

  export type ContratUpdateWithWhereUniqueWithoutEntrepriseInput = {
    where: ContratWhereUniqueInput
    data: XOR<ContratUpdateWithoutEntrepriseInput, ContratUncheckedUpdateWithoutEntrepriseInput>
  }

  export type ContratUpdateManyWithWhereWithoutEntrepriseInput = {
    where: ContratScalarWhereInput
    data: XOR<ContratUpdateManyMutationInput, ContratUncheckedUpdateManyWithoutEntrepriseInput>
  }

  export type ContratScalarWhereInput = {
    AND?: ContratScalarWhereInput | ContratScalarWhereInput[]
    OR?: ContratScalarWhereInput[]
    NOT?: ContratScalarWhereInput | ContratScalarWhereInput[]
    idContrat?: IntFilter<"Contrat"> | number
    entrepriseId?: IntFilter<"Contrat"> | number
    freelancerId?: IntFilter<"Contrat"> | number
    titreProjContrat?: StringFilter<"Contrat"> | string
    datDebConrat?: DateTimeFilter<"Contrat"> | Date | string
    datFinConrat?: DateTimeFilter<"Contrat"> | Date | string
    coutContrat?: IntFilter<"Contrat"> | number
    descripContrat?: StringFilter<"Contrat"> | string
    statutContrat?: StringFilter<"Contrat"> | string
  }

  export type ProjetUpsertWithWhereUniqueWithoutEntrepriseInput = {
    where: ProjetWhereUniqueInput
    update: XOR<ProjetUpdateWithoutEntrepriseInput, ProjetUncheckedUpdateWithoutEntrepriseInput>
    create: XOR<ProjetCreateWithoutEntrepriseInput, ProjetUncheckedCreateWithoutEntrepriseInput>
  }

  export type ProjetUpdateWithWhereUniqueWithoutEntrepriseInput = {
    where: ProjetWhereUniqueInput
    data: XOR<ProjetUpdateWithoutEntrepriseInput, ProjetUncheckedUpdateWithoutEntrepriseInput>
  }

  export type ProjetUpdateManyWithWhereWithoutEntrepriseInput = {
    where: ProjetScalarWhereInput
    data: XOR<ProjetUpdateManyMutationInput, ProjetUncheckedUpdateManyWithoutEntrepriseInput>
  }

  export type ProjetScalarWhereInput = {
    AND?: ProjetScalarWhereInput | ProjetScalarWhereInput[]
    OR?: ProjetScalarWhereInput[]
    NOT?: ProjetScalarWhereInput | ProjetScalarWhereInput[]
    idProjet?: IntFilter<"Projet"> | number
    entrepriseId?: IntFilter<"Projet"> | number
    titreProjet?: StringFilter<"Projet"> | string
    descripProjet?: StringFilter<"Projet"> | string
    BudgetProjet?: IntFilter<"Projet"> | number
    DelaiProjet?: IntFilter<"Projet"> | number
  }

  export type NoteUpsertWithWhereUniqueWithoutEntrepriseInput = {
    where: NoteWhereUniqueInput
    update: XOR<NoteUpdateWithoutEntrepriseInput, NoteUncheckedUpdateWithoutEntrepriseInput>
    create: XOR<NoteCreateWithoutEntrepriseInput, NoteUncheckedCreateWithoutEntrepriseInput>
  }

  export type NoteUpdateWithWhereUniqueWithoutEntrepriseInput = {
    where: NoteWhereUniqueInput
    data: XOR<NoteUpdateWithoutEntrepriseInput, NoteUncheckedUpdateWithoutEntrepriseInput>
  }

  export type NoteUpdateManyWithWhereWithoutEntrepriseInput = {
    where: NoteScalarWhereInput
    data: XOR<NoteUpdateManyMutationInput, NoteUncheckedUpdateManyWithoutEntrepriseInput>
  }

  export type EntrepriseCreateWithoutEntretiensInput = {
    nomEntreprise?: string | null
    adresEntreprise?: string | null
    contactEntreprise?: string | null
    sectActivEntreprise?: string | null
    tailleEntreprise?: string | null
    logoEntreprise?: string | null
    descripEntreprise?: string | null
    siteWebEntreprise?: string | null
    user: UserCreateNestedOneWithoutEntrepriseInput
    offreEmplois?: OffreEmploiCreateNestedManyWithoutEntrepriseInput
    contrats?: ContratCreateNestedManyWithoutEntrepriseInput
    projets?: ProjetCreateNestedManyWithoutEntrepriseInput
    notes?: NoteCreateNestedManyWithoutEntrepriseInput
  }

  export type EntrepriseUncheckedCreateWithoutEntretiensInput = {
    idEntreprise?: number
    nomEntreprise?: string | null
    adresEntreprise?: string | null
    contactEntreprise?: string | null
    sectActivEntreprise?: string | null
    tailleEntreprise?: string | null
    logoEntreprise?: string | null
    descripEntreprise?: string | null
    siteWebEntreprise?: string | null
    userId: number
    offreEmplois?: OffreEmploiUncheckedCreateNestedManyWithoutEntrepriseInput
    contrats?: ContratUncheckedCreateNestedManyWithoutEntrepriseInput
    projets?: ProjetUncheckedCreateNestedManyWithoutEntrepriseInput
    notes?: NoteUncheckedCreateNestedManyWithoutEntrepriseInput
  }

  export type EntrepriseCreateOrConnectWithoutEntretiensInput = {
    where: EntrepriseWhereUniqueInput
    create: XOR<EntrepriseCreateWithoutEntretiensInput, EntrepriseUncheckedCreateWithoutEntretiensInput>
  }

  export type CandidatCreateWithoutEntretiensInput = {
    adresCandidat?: string | null
    experienceCandidat?: string | null
    nivEtudesCandidat?: string | null
    competencesCandidat?: string | null
    cVCandidat?: string | null
    user: UserCreateNestedOneWithoutCandidatInput
    notes?: NoteCreateNestedManyWithoutCandidatInput
  }

  export type CandidatUncheckedCreateWithoutEntretiensInput = {
    idCandidat?: number
    adresCandidat?: string | null
    experienceCandidat?: string | null
    nivEtudesCandidat?: string | null
    competencesCandidat?: string | null
    cVCandidat?: string | null
    userId: number
    notes?: NoteUncheckedCreateNestedManyWithoutCandidatInput
  }

  export type CandidatCreateOrConnectWithoutEntretiensInput = {
    where: CandidatWhereUniqueInput
    create: XOR<CandidatCreateWithoutEntretiensInput, CandidatUncheckedCreateWithoutEntretiensInput>
  }

  export type EntrepriseUpsertWithoutEntretiensInput = {
    update: XOR<EntrepriseUpdateWithoutEntretiensInput, EntrepriseUncheckedUpdateWithoutEntretiensInput>
    create: XOR<EntrepriseCreateWithoutEntretiensInput, EntrepriseUncheckedCreateWithoutEntretiensInput>
    where?: EntrepriseWhereInput
  }

  export type EntrepriseUpdateToOneWithWhereWithoutEntretiensInput = {
    where?: EntrepriseWhereInput
    data: XOR<EntrepriseUpdateWithoutEntretiensInput, EntrepriseUncheckedUpdateWithoutEntretiensInput>
  }

  export type EntrepriseUpdateWithoutEntretiensInput = {
    nomEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    adresEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    contactEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    sectActivEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    tailleEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    logoEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    descripEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    siteWebEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutEntrepriseNestedInput
    offreEmplois?: OffreEmploiUpdateManyWithoutEntrepriseNestedInput
    contrats?: ContratUpdateManyWithoutEntrepriseNestedInput
    projets?: ProjetUpdateManyWithoutEntrepriseNestedInput
    notes?: NoteUpdateManyWithoutEntrepriseNestedInput
  }

  export type EntrepriseUncheckedUpdateWithoutEntretiensInput = {
    idEntreprise?: IntFieldUpdateOperationsInput | number
    nomEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    adresEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    contactEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    sectActivEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    tailleEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    logoEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    descripEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    siteWebEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    offreEmplois?: OffreEmploiUncheckedUpdateManyWithoutEntrepriseNestedInput
    contrats?: ContratUncheckedUpdateManyWithoutEntrepriseNestedInput
    projets?: ProjetUncheckedUpdateManyWithoutEntrepriseNestedInput
    notes?: NoteUncheckedUpdateManyWithoutEntrepriseNestedInput
  }

  export type CandidatUpsertWithoutEntretiensInput = {
    update: XOR<CandidatUpdateWithoutEntretiensInput, CandidatUncheckedUpdateWithoutEntretiensInput>
    create: XOR<CandidatCreateWithoutEntretiensInput, CandidatUncheckedCreateWithoutEntretiensInput>
    where?: CandidatWhereInput
  }

  export type CandidatUpdateToOneWithWhereWithoutEntretiensInput = {
    where?: CandidatWhereInput
    data: XOR<CandidatUpdateWithoutEntretiensInput, CandidatUncheckedUpdateWithoutEntretiensInput>
  }

  export type CandidatUpdateWithoutEntretiensInput = {
    adresCandidat?: NullableStringFieldUpdateOperationsInput | string | null
    experienceCandidat?: NullableStringFieldUpdateOperationsInput | string | null
    nivEtudesCandidat?: NullableStringFieldUpdateOperationsInput | string | null
    competencesCandidat?: NullableStringFieldUpdateOperationsInput | string | null
    cVCandidat?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutCandidatNestedInput
    notes?: NoteUpdateManyWithoutCandidatNestedInput
  }

  export type CandidatUncheckedUpdateWithoutEntretiensInput = {
    idCandidat?: IntFieldUpdateOperationsInput | number
    adresCandidat?: NullableStringFieldUpdateOperationsInput | string | null
    experienceCandidat?: NullableStringFieldUpdateOperationsInput | string | null
    nivEtudesCandidat?: NullableStringFieldUpdateOperationsInput | string | null
    competencesCandidat?: NullableStringFieldUpdateOperationsInput | string | null
    cVCandidat?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    notes?: NoteUncheckedUpdateManyWithoutCandidatNestedInput
  }

  export type PropositionCreateWithoutFreelancerInput = {
    delaiProposition: number
    descripProposition: string
    coutProposition: number
    competenceProposition: string
    projets: ProjetCreateNestedOneWithoutPropositionsInput
  }

  export type PropositionUncheckedCreateWithoutFreelancerInput = {
    idProposition?: number
    projetId: number
    delaiProposition: number
    descripProposition: string
    coutProposition: number
    competenceProposition: string
  }

  export type PropositionCreateOrConnectWithoutFreelancerInput = {
    where: PropositionWhereUniqueInput
    create: XOR<PropositionCreateWithoutFreelancerInput, PropositionUncheckedCreateWithoutFreelancerInput>
  }

  export type PropositionCreateManyFreelancerInputEnvelope = {
    data: PropositionCreateManyFreelancerInput | PropositionCreateManyFreelancerInput[]
    skipDuplicates?: boolean
  }

  export type ContratCreateWithoutFreelancerInput = {
    titreProjContrat: string
    datDebConrat: Date | string
    datFinConrat: Date | string
    coutContrat: number
    descripContrat: string
    statutContrat: string
    entreprise: EntrepriseCreateNestedOneWithoutContratsInput
  }

  export type ContratUncheckedCreateWithoutFreelancerInput = {
    idContrat?: number
    entrepriseId: number
    titreProjContrat: string
    datDebConrat: Date | string
    datFinConrat: Date | string
    coutContrat: number
    descripContrat: string
    statutContrat: string
  }

  export type ContratCreateOrConnectWithoutFreelancerInput = {
    where: ContratWhereUniqueInput
    create: XOR<ContratCreateWithoutFreelancerInput, ContratUncheckedCreateWithoutFreelancerInput>
  }

  export type ContratCreateManyFreelancerInputEnvelope = {
    data: ContratCreateManyFreelancerInput | ContratCreateManyFreelancerInput[]
    skipDuplicates?: boolean
  }

  export type PropositionUpsertWithWhereUniqueWithoutFreelancerInput = {
    where: PropositionWhereUniqueInput
    update: XOR<PropositionUpdateWithoutFreelancerInput, PropositionUncheckedUpdateWithoutFreelancerInput>
    create: XOR<PropositionCreateWithoutFreelancerInput, PropositionUncheckedCreateWithoutFreelancerInput>
  }

  export type PropositionUpdateWithWhereUniqueWithoutFreelancerInput = {
    where: PropositionWhereUniqueInput
    data: XOR<PropositionUpdateWithoutFreelancerInput, PropositionUncheckedUpdateWithoutFreelancerInput>
  }

  export type PropositionUpdateManyWithWhereWithoutFreelancerInput = {
    where: PropositionScalarWhereInput
    data: XOR<PropositionUpdateManyMutationInput, PropositionUncheckedUpdateManyWithoutFreelancerInput>
  }

  export type PropositionScalarWhereInput = {
    AND?: PropositionScalarWhereInput | PropositionScalarWhereInput[]
    OR?: PropositionScalarWhereInput[]
    NOT?: PropositionScalarWhereInput | PropositionScalarWhereInput[]
    idProposition?: IntFilter<"Proposition"> | number
    projetId?: IntFilter<"Proposition"> | number
    freelancerId?: IntFilter<"Proposition"> | number
    delaiProposition?: IntFilter<"Proposition"> | number
    descripProposition?: StringFilter<"Proposition"> | string
    coutProposition?: IntFilter<"Proposition"> | number
    competenceProposition?: StringFilter<"Proposition"> | string
  }

  export type ContratUpsertWithWhereUniqueWithoutFreelancerInput = {
    where: ContratWhereUniqueInput
    update: XOR<ContratUpdateWithoutFreelancerInput, ContratUncheckedUpdateWithoutFreelancerInput>
    create: XOR<ContratCreateWithoutFreelancerInput, ContratUncheckedCreateWithoutFreelancerInput>
  }

  export type ContratUpdateWithWhereUniqueWithoutFreelancerInput = {
    where: ContratWhereUniqueInput
    data: XOR<ContratUpdateWithoutFreelancerInput, ContratUncheckedUpdateWithoutFreelancerInput>
  }

  export type ContratUpdateManyWithWhereWithoutFreelancerInput = {
    where: ContratScalarWhereInput
    data: XOR<ContratUpdateManyMutationInput, ContratUncheckedUpdateManyWithoutFreelancerInput>
  }

  export type EntrepriseCreateWithoutNotesInput = {
    nomEntreprise?: string | null
    adresEntreprise?: string | null
    contactEntreprise?: string | null
    sectActivEntreprise?: string | null
    tailleEntreprise?: string | null
    logoEntreprise?: string | null
    descripEntreprise?: string | null
    siteWebEntreprise?: string | null
    user: UserCreateNestedOneWithoutEntrepriseInput
    offreEmplois?: OffreEmploiCreateNestedManyWithoutEntrepriseInput
    entretiens?: EntretienCreateNestedManyWithoutEntrepriseInput
    contrats?: ContratCreateNestedManyWithoutEntrepriseInput
    projets?: ProjetCreateNestedManyWithoutEntrepriseInput
  }

  export type EntrepriseUncheckedCreateWithoutNotesInput = {
    idEntreprise?: number
    nomEntreprise?: string | null
    adresEntreprise?: string | null
    contactEntreprise?: string | null
    sectActivEntreprise?: string | null
    tailleEntreprise?: string | null
    logoEntreprise?: string | null
    descripEntreprise?: string | null
    siteWebEntreprise?: string | null
    userId: number
    offreEmplois?: OffreEmploiUncheckedCreateNestedManyWithoutEntrepriseInput
    entretiens?: EntretienUncheckedCreateNestedManyWithoutEntrepriseInput
    contrats?: ContratUncheckedCreateNestedManyWithoutEntrepriseInput
    projets?: ProjetUncheckedCreateNestedManyWithoutEntrepriseInput
  }

  export type EntrepriseCreateOrConnectWithoutNotesInput = {
    where: EntrepriseWhereUniqueInput
    create: XOR<EntrepriseCreateWithoutNotesInput, EntrepriseUncheckedCreateWithoutNotesInput>
  }

  export type CandidatCreateWithoutNotesInput = {
    adresCandidat?: string | null
    experienceCandidat?: string | null
    nivEtudesCandidat?: string | null
    competencesCandidat?: string | null
    cVCandidat?: string | null
    user: UserCreateNestedOneWithoutCandidatInput
    entretiens?: EntretienCreateNestedManyWithoutCandidatInput
  }

  export type CandidatUncheckedCreateWithoutNotesInput = {
    idCandidat?: number
    adresCandidat?: string | null
    experienceCandidat?: string | null
    nivEtudesCandidat?: string | null
    competencesCandidat?: string | null
    cVCandidat?: string | null
    userId: number
    entretiens?: EntretienUncheckedCreateNestedManyWithoutCandidatInput
  }

  export type CandidatCreateOrConnectWithoutNotesInput = {
    where: CandidatWhereUniqueInput
    create: XOR<CandidatCreateWithoutNotesInput, CandidatUncheckedCreateWithoutNotesInput>
  }

  export type EntrepriseUpsertWithoutNotesInput = {
    update: XOR<EntrepriseUpdateWithoutNotesInput, EntrepriseUncheckedUpdateWithoutNotesInput>
    create: XOR<EntrepriseCreateWithoutNotesInput, EntrepriseUncheckedCreateWithoutNotesInput>
    where?: EntrepriseWhereInput
  }

  export type EntrepriseUpdateToOneWithWhereWithoutNotesInput = {
    where?: EntrepriseWhereInput
    data: XOR<EntrepriseUpdateWithoutNotesInput, EntrepriseUncheckedUpdateWithoutNotesInput>
  }

  export type EntrepriseUpdateWithoutNotesInput = {
    nomEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    adresEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    contactEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    sectActivEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    tailleEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    logoEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    descripEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    siteWebEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutEntrepriseNestedInput
    offreEmplois?: OffreEmploiUpdateManyWithoutEntrepriseNestedInput
    entretiens?: EntretienUpdateManyWithoutEntrepriseNestedInput
    contrats?: ContratUpdateManyWithoutEntrepriseNestedInput
    projets?: ProjetUpdateManyWithoutEntrepriseNestedInput
  }

  export type EntrepriseUncheckedUpdateWithoutNotesInput = {
    idEntreprise?: IntFieldUpdateOperationsInput | number
    nomEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    adresEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    contactEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    sectActivEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    tailleEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    logoEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    descripEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    siteWebEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    offreEmplois?: OffreEmploiUncheckedUpdateManyWithoutEntrepriseNestedInput
    entretiens?: EntretienUncheckedUpdateManyWithoutEntrepriseNestedInput
    contrats?: ContratUncheckedUpdateManyWithoutEntrepriseNestedInput
    projets?: ProjetUncheckedUpdateManyWithoutEntrepriseNestedInput
  }

  export type CandidatUpsertWithoutNotesInput = {
    update: XOR<CandidatUpdateWithoutNotesInput, CandidatUncheckedUpdateWithoutNotesInput>
    create: XOR<CandidatCreateWithoutNotesInput, CandidatUncheckedCreateWithoutNotesInput>
    where?: CandidatWhereInput
  }

  export type CandidatUpdateToOneWithWhereWithoutNotesInput = {
    where?: CandidatWhereInput
    data: XOR<CandidatUpdateWithoutNotesInput, CandidatUncheckedUpdateWithoutNotesInput>
  }

  export type CandidatUpdateWithoutNotesInput = {
    adresCandidat?: NullableStringFieldUpdateOperationsInput | string | null
    experienceCandidat?: NullableStringFieldUpdateOperationsInput | string | null
    nivEtudesCandidat?: NullableStringFieldUpdateOperationsInput | string | null
    competencesCandidat?: NullableStringFieldUpdateOperationsInput | string | null
    cVCandidat?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutCandidatNestedInput
    entretiens?: EntretienUpdateManyWithoutCandidatNestedInput
  }

  export type CandidatUncheckedUpdateWithoutNotesInput = {
    idCandidat?: IntFieldUpdateOperationsInput | number
    adresCandidat?: NullableStringFieldUpdateOperationsInput | string | null
    experienceCandidat?: NullableStringFieldUpdateOperationsInput | string | null
    nivEtudesCandidat?: NullableStringFieldUpdateOperationsInput | string | null
    competencesCandidat?: NullableStringFieldUpdateOperationsInput | string | null
    cVCandidat?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    entretiens?: EntretienUncheckedUpdateManyWithoutCandidatNestedInput
  }

  export type EntrepriseCreateWithoutOffreEmploisInput = {
    nomEntreprise?: string | null
    adresEntreprise?: string | null
    contactEntreprise?: string | null
    sectActivEntreprise?: string | null
    tailleEntreprise?: string | null
    logoEntreprise?: string | null
    descripEntreprise?: string | null
    siteWebEntreprise?: string | null
    user: UserCreateNestedOneWithoutEntrepriseInput
    entretiens?: EntretienCreateNestedManyWithoutEntrepriseInput
    contrats?: ContratCreateNestedManyWithoutEntrepriseInput
    projets?: ProjetCreateNestedManyWithoutEntrepriseInput
    notes?: NoteCreateNestedManyWithoutEntrepriseInput
  }

  export type EntrepriseUncheckedCreateWithoutOffreEmploisInput = {
    idEntreprise?: number
    nomEntreprise?: string | null
    adresEntreprise?: string | null
    contactEntreprise?: string | null
    sectActivEntreprise?: string | null
    tailleEntreprise?: string | null
    logoEntreprise?: string | null
    descripEntreprise?: string | null
    siteWebEntreprise?: string | null
    userId: number
    entretiens?: EntretienUncheckedCreateNestedManyWithoutEntrepriseInput
    contrats?: ContratUncheckedCreateNestedManyWithoutEntrepriseInput
    projets?: ProjetUncheckedCreateNestedManyWithoutEntrepriseInput
    notes?: NoteUncheckedCreateNestedManyWithoutEntrepriseInput
  }

  export type EntrepriseCreateOrConnectWithoutOffreEmploisInput = {
    where: EntrepriseWhereUniqueInput
    create: XOR<EntrepriseCreateWithoutOffreEmploisInput, EntrepriseUncheckedCreateWithoutOffreEmploisInput>
  }

  export type EntrepriseUpsertWithoutOffreEmploisInput = {
    update: XOR<EntrepriseUpdateWithoutOffreEmploisInput, EntrepriseUncheckedUpdateWithoutOffreEmploisInput>
    create: XOR<EntrepriseCreateWithoutOffreEmploisInput, EntrepriseUncheckedCreateWithoutOffreEmploisInput>
    where?: EntrepriseWhereInput
  }

  export type EntrepriseUpdateToOneWithWhereWithoutOffreEmploisInput = {
    where?: EntrepriseWhereInput
    data: XOR<EntrepriseUpdateWithoutOffreEmploisInput, EntrepriseUncheckedUpdateWithoutOffreEmploisInput>
  }

  export type EntrepriseUpdateWithoutOffreEmploisInput = {
    nomEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    adresEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    contactEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    sectActivEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    tailleEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    logoEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    descripEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    siteWebEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutEntrepriseNestedInput
    entretiens?: EntretienUpdateManyWithoutEntrepriseNestedInput
    contrats?: ContratUpdateManyWithoutEntrepriseNestedInput
    projets?: ProjetUpdateManyWithoutEntrepriseNestedInput
    notes?: NoteUpdateManyWithoutEntrepriseNestedInput
  }

  export type EntrepriseUncheckedUpdateWithoutOffreEmploisInput = {
    idEntreprise?: IntFieldUpdateOperationsInput | number
    nomEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    adresEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    contactEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    sectActivEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    tailleEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    logoEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    descripEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    siteWebEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    entretiens?: EntretienUncheckedUpdateManyWithoutEntrepriseNestedInput
    contrats?: ContratUncheckedUpdateManyWithoutEntrepriseNestedInput
    projets?: ProjetUncheckedUpdateManyWithoutEntrepriseNestedInput
    notes?: NoteUncheckedUpdateManyWithoutEntrepriseNestedInput
  }

  export type EntrepriseCreateWithoutProjetsInput = {
    nomEntreprise?: string | null
    adresEntreprise?: string | null
    contactEntreprise?: string | null
    sectActivEntreprise?: string | null
    tailleEntreprise?: string | null
    logoEntreprise?: string | null
    descripEntreprise?: string | null
    siteWebEntreprise?: string | null
    user: UserCreateNestedOneWithoutEntrepriseInput
    offreEmplois?: OffreEmploiCreateNestedManyWithoutEntrepriseInput
    entretiens?: EntretienCreateNestedManyWithoutEntrepriseInput
    contrats?: ContratCreateNestedManyWithoutEntrepriseInput
    notes?: NoteCreateNestedManyWithoutEntrepriseInput
  }

  export type EntrepriseUncheckedCreateWithoutProjetsInput = {
    idEntreprise?: number
    nomEntreprise?: string | null
    adresEntreprise?: string | null
    contactEntreprise?: string | null
    sectActivEntreprise?: string | null
    tailleEntreprise?: string | null
    logoEntreprise?: string | null
    descripEntreprise?: string | null
    siteWebEntreprise?: string | null
    userId: number
    offreEmplois?: OffreEmploiUncheckedCreateNestedManyWithoutEntrepriseInput
    entretiens?: EntretienUncheckedCreateNestedManyWithoutEntrepriseInput
    contrats?: ContratUncheckedCreateNestedManyWithoutEntrepriseInput
    notes?: NoteUncheckedCreateNestedManyWithoutEntrepriseInput
  }

  export type EntrepriseCreateOrConnectWithoutProjetsInput = {
    where: EntrepriseWhereUniqueInput
    create: XOR<EntrepriseCreateWithoutProjetsInput, EntrepriseUncheckedCreateWithoutProjetsInput>
  }

  export type PropositionCreateWithoutProjetsInput = {
    delaiProposition: number
    descripProposition: string
    coutProposition: number
    competenceProposition: string
    freelancer: FreelancerCreateNestedOneWithoutPropositionsInput
  }

  export type PropositionUncheckedCreateWithoutProjetsInput = {
    idProposition?: number
    freelancerId: number
    delaiProposition: number
    descripProposition: string
    coutProposition: number
    competenceProposition: string
  }

  export type PropositionCreateOrConnectWithoutProjetsInput = {
    where: PropositionWhereUniqueInput
    create: XOR<PropositionCreateWithoutProjetsInput, PropositionUncheckedCreateWithoutProjetsInput>
  }

  export type PropositionCreateManyProjetsInputEnvelope = {
    data: PropositionCreateManyProjetsInput | PropositionCreateManyProjetsInput[]
    skipDuplicates?: boolean
  }

  export type EntrepriseUpsertWithoutProjetsInput = {
    update: XOR<EntrepriseUpdateWithoutProjetsInput, EntrepriseUncheckedUpdateWithoutProjetsInput>
    create: XOR<EntrepriseCreateWithoutProjetsInput, EntrepriseUncheckedCreateWithoutProjetsInput>
    where?: EntrepriseWhereInput
  }

  export type EntrepriseUpdateToOneWithWhereWithoutProjetsInput = {
    where?: EntrepriseWhereInput
    data: XOR<EntrepriseUpdateWithoutProjetsInput, EntrepriseUncheckedUpdateWithoutProjetsInput>
  }

  export type EntrepriseUpdateWithoutProjetsInput = {
    nomEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    adresEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    contactEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    sectActivEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    tailleEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    logoEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    descripEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    siteWebEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutEntrepriseNestedInput
    offreEmplois?: OffreEmploiUpdateManyWithoutEntrepriseNestedInput
    entretiens?: EntretienUpdateManyWithoutEntrepriseNestedInput
    contrats?: ContratUpdateManyWithoutEntrepriseNestedInput
    notes?: NoteUpdateManyWithoutEntrepriseNestedInput
  }

  export type EntrepriseUncheckedUpdateWithoutProjetsInput = {
    idEntreprise?: IntFieldUpdateOperationsInput | number
    nomEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    adresEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    contactEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    sectActivEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    tailleEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    logoEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    descripEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    siteWebEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    offreEmplois?: OffreEmploiUncheckedUpdateManyWithoutEntrepriseNestedInput
    entretiens?: EntretienUncheckedUpdateManyWithoutEntrepriseNestedInput
    contrats?: ContratUncheckedUpdateManyWithoutEntrepriseNestedInput
    notes?: NoteUncheckedUpdateManyWithoutEntrepriseNestedInput
  }

  export type PropositionUpsertWithWhereUniqueWithoutProjetsInput = {
    where: PropositionWhereUniqueInput
    update: XOR<PropositionUpdateWithoutProjetsInput, PropositionUncheckedUpdateWithoutProjetsInput>
    create: XOR<PropositionCreateWithoutProjetsInput, PropositionUncheckedCreateWithoutProjetsInput>
  }

  export type PropositionUpdateWithWhereUniqueWithoutProjetsInput = {
    where: PropositionWhereUniqueInput
    data: XOR<PropositionUpdateWithoutProjetsInput, PropositionUncheckedUpdateWithoutProjetsInput>
  }

  export type PropositionUpdateManyWithWhereWithoutProjetsInput = {
    where: PropositionScalarWhereInput
    data: XOR<PropositionUpdateManyMutationInput, PropositionUncheckedUpdateManyWithoutProjetsInput>
  }

  export type ProjetCreateWithoutPropositionsInput = {
    titreProjet: string
    descripProjet: string
    BudgetProjet: number
    DelaiProjet: number
    entreprise: EntrepriseCreateNestedOneWithoutProjetsInput
  }

  export type ProjetUncheckedCreateWithoutPropositionsInput = {
    idProjet?: number
    entrepriseId: number
    titreProjet: string
    descripProjet: string
    BudgetProjet: number
    DelaiProjet: number
  }

  export type ProjetCreateOrConnectWithoutPropositionsInput = {
    where: ProjetWhereUniqueInput
    create: XOR<ProjetCreateWithoutPropositionsInput, ProjetUncheckedCreateWithoutPropositionsInput>
  }

  export type FreelancerCreateWithoutPropositionsInput = {
    nomFreelancer: string
    prenomFreelancer: string
    adresFreelancer: string
    TelFreelancer: string
    emailFreelancer: string
    competencesFreelancer: string
    experienceFreelancer: string
    portfolioFreelancer: string
    contrats?: ContratCreateNestedManyWithoutFreelancerInput
  }

  export type FreelancerUncheckedCreateWithoutPropositionsInput = {
    idFreelancer?: number
    nomFreelancer: string
    prenomFreelancer: string
    adresFreelancer: string
    TelFreelancer: string
    emailFreelancer: string
    competencesFreelancer: string
    experienceFreelancer: string
    portfolioFreelancer: string
    contrats?: ContratUncheckedCreateNestedManyWithoutFreelancerInput
  }

  export type FreelancerCreateOrConnectWithoutPropositionsInput = {
    where: FreelancerWhereUniqueInput
    create: XOR<FreelancerCreateWithoutPropositionsInput, FreelancerUncheckedCreateWithoutPropositionsInput>
  }

  export type ProjetUpsertWithoutPropositionsInput = {
    update: XOR<ProjetUpdateWithoutPropositionsInput, ProjetUncheckedUpdateWithoutPropositionsInput>
    create: XOR<ProjetCreateWithoutPropositionsInput, ProjetUncheckedCreateWithoutPropositionsInput>
    where?: ProjetWhereInput
  }

  export type ProjetUpdateToOneWithWhereWithoutPropositionsInput = {
    where?: ProjetWhereInput
    data: XOR<ProjetUpdateWithoutPropositionsInput, ProjetUncheckedUpdateWithoutPropositionsInput>
  }

  export type ProjetUpdateWithoutPropositionsInput = {
    titreProjet?: StringFieldUpdateOperationsInput | string
    descripProjet?: StringFieldUpdateOperationsInput | string
    BudgetProjet?: IntFieldUpdateOperationsInput | number
    DelaiProjet?: IntFieldUpdateOperationsInput | number
    entreprise?: EntrepriseUpdateOneRequiredWithoutProjetsNestedInput
  }

  export type ProjetUncheckedUpdateWithoutPropositionsInput = {
    idProjet?: IntFieldUpdateOperationsInput | number
    entrepriseId?: IntFieldUpdateOperationsInput | number
    titreProjet?: StringFieldUpdateOperationsInput | string
    descripProjet?: StringFieldUpdateOperationsInput | string
    BudgetProjet?: IntFieldUpdateOperationsInput | number
    DelaiProjet?: IntFieldUpdateOperationsInput | number
  }

  export type FreelancerUpsertWithoutPropositionsInput = {
    update: XOR<FreelancerUpdateWithoutPropositionsInput, FreelancerUncheckedUpdateWithoutPropositionsInput>
    create: XOR<FreelancerCreateWithoutPropositionsInput, FreelancerUncheckedCreateWithoutPropositionsInput>
    where?: FreelancerWhereInput
  }

  export type FreelancerUpdateToOneWithWhereWithoutPropositionsInput = {
    where?: FreelancerWhereInput
    data: XOR<FreelancerUpdateWithoutPropositionsInput, FreelancerUncheckedUpdateWithoutPropositionsInput>
  }

  export type FreelancerUpdateWithoutPropositionsInput = {
    nomFreelancer?: StringFieldUpdateOperationsInput | string
    prenomFreelancer?: StringFieldUpdateOperationsInput | string
    adresFreelancer?: StringFieldUpdateOperationsInput | string
    TelFreelancer?: StringFieldUpdateOperationsInput | string
    emailFreelancer?: StringFieldUpdateOperationsInput | string
    competencesFreelancer?: StringFieldUpdateOperationsInput | string
    experienceFreelancer?: StringFieldUpdateOperationsInput | string
    portfolioFreelancer?: StringFieldUpdateOperationsInput | string
    contrats?: ContratUpdateManyWithoutFreelancerNestedInput
  }

  export type FreelancerUncheckedUpdateWithoutPropositionsInput = {
    idFreelancer?: IntFieldUpdateOperationsInput | number
    nomFreelancer?: StringFieldUpdateOperationsInput | string
    prenomFreelancer?: StringFieldUpdateOperationsInput | string
    adresFreelancer?: StringFieldUpdateOperationsInput | string
    TelFreelancer?: StringFieldUpdateOperationsInput | string
    emailFreelancer?: StringFieldUpdateOperationsInput | string
    competencesFreelancer?: StringFieldUpdateOperationsInput | string
    experienceFreelancer?: StringFieldUpdateOperationsInput | string
    portfolioFreelancer?: StringFieldUpdateOperationsInput | string
    contrats?: ContratUncheckedUpdateManyWithoutFreelancerNestedInput
  }

  export type EntrepriseCreateManyUserInput = {
    idEntreprise?: number
    nomEntreprise?: string | null
    adresEntreprise?: string | null
    contactEntreprise?: string | null
    sectActivEntreprise?: string | null
    tailleEntreprise?: string | null
    logoEntreprise?: string | null
    descripEntreprise?: string | null
    siteWebEntreprise?: string | null
  }

  export type CandidatCreateManyUserInput = {
    idCandidat?: number
    adresCandidat?: string | null
    experienceCandidat?: string | null
    nivEtudesCandidat?: string | null
    competencesCandidat?: string | null
    cVCandidat?: string | null
  }

  export type AccountCreateManyUserInput = {
    id?: string
    type: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type SessionCreateManyUserInput = {
    id?: number
    sessionToken: string
    expires: Date | string
    active?: boolean
  }

  export type EntrepriseUpdateWithoutUserInput = {
    nomEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    adresEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    contactEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    sectActivEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    tailleEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    logoEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    descripEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    siteWebEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    offreEmplois?: OffreEmploiUpdateManyWithoutEntrepriseNestedInput
    entretiens?: EntretienUpdateManyWithoutEntrepriseNestedInput
    contrats?: ContratUpdateManyWithoutEntrepriseNestedInput
    projets?: ProjetUpdateManyWithoutEntrepriseNestedInput
    notes?: NoteUpdateManyWithoutEntrepriseNestedInput
  }

  export type EntrepriseUncheckedUpdateWithoutUserInput = {
    idEntreprise?: IntFieldUpdateOperationsInput | number
    nomEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    adresEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    contactEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    sectActivEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    tailleEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    logoEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    descripEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    siteWebEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    offreEmplois?: OffreEmploiUncheckedUpdateManyWithoutEntrepriseNestedInput
    entretiens?: EntretienUncheckedUpdateManyWithoutEntrepriseNestedInput
    contrats?: ContratUncheckedUpdateManyWithoutEntrepriseNestedInput
    projets?: ProjetUncheckedUpdateManyWithoutEntrepriseNestedInput
    notes?: NoteUncheckedUpdateManyWithoutEntrepriseNestedInput
  }

  export type EntrepriseUncheckedUpdateManyWithoutUserInput = {
    idEntreprise?: IntFieldUpdateOperationsInput | number
    nomEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    adresEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    contactEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    sectActivEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    tailleEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    logoEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    descripEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
    siteWebEntreprise?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CandidatUpdateWithoutUserInput = {
    adresCandidat?: NullableStringFieldUpdateOperationsInput | string | null
    experienceCandidat?: NullableStringFieldUpdateOperationsInput | string | null
    nivEtudesCandidat?: NullableStringFieldUpdateOperationsInput | string | null
    competencesCandidat?: NullableStringFieldUpdateOperationsInput | string | null
    cVCandidat?: NullableStringFieldUpdateOperationsInput | string | null
    entretiens?: EntretienUpdateManyWithoutCandidatNestedInput
    notes?: NoteUpdateManyWithoutCandidatNestedInput
  }

  export type CandidatUncheckedUpdateWithoutUserInput = {
    idCandidat?: IntFieldUpdateOperationsInput | number
    adresCandidat?: NullableStringFieldUpdateOperationsInput | string | null
    experienceCandidat?: NullableStringFieldUpdateOperationsInput | string | null
    nivEtudesCandidat?: NullableStringFieldUpdateOperationsInput | string | null
    competencesCandidat?: NullableStringFieldUpdateOperationsInput | string | null
    cVCandidat?: NullableStringFieldUpdateOperationsInput | string | null
    entretiens?: EntretienUncheckedUpdateManyWithoutCandidatNestedInput
    notes?: NoteUncheckedUpdateManyWithoutCandidatNestedInput
  }

  export type CandidatUncheckedUpdateManyWithoutUserInput = {
    idCandidat?: IntFieldUpdateOperationsInput | number
    adresCandidat?: NullableStringFieldUpdateOperationsInput | string | null
    experienceCandidat?: NullableStringFieldUpdateOperationsInput | string | null
    nivEtudesCandidat?: NullableStringFieldUpdateOperationsInput | string | null
    competencesCandidat?: NullableStringFieldUpdateOperationsInput | string | null
    cVCandidat?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionUpdateWithoutUserInput = {
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SessionUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EntretienCreateManyCandidatInput = {
    idEntretien?: number
    entrepriseId: number
    dateEntretien: Date | string
    adresEntretien: string
    recruEntretien: string
    typeEntretien: string
    descripEntreprise: string
  }

  export type NoteCreateManyCandidatInput = {
    idNote?: number
    entrepriseId: number
    Note: Decimal | DecimalJsLike | number | string
    commentNote: string
    dateNote: Date | string
  }

  export type EntretienUpdateWithoutCandidatInput = {
    dateEntretien?: DateTimeFieldUpdateOperationsInput | Date | string
    adresEntretien?: StringFieldUpdateOperationsInput | string
    recruEntretien?: StringFieldUpdateOperationsInput | string
    typeEntretien?: StringFieldUpdateOperationsInput | string
    descripEntreprise?: StringFieldUpdateOperationsInput | string
    entreprise?: EntrepriseUpdateOneRequiredWithoutEntretiensNestedInput
  }

  export type EntretienUncheckedUpdateWithoutCandidatInput = {
    idEntretien?: IntFieldUpdateOperationsInput | number
    entrepriseId?: IntFieldUpdateOperationsInput | number
    dateEntretien?: DateTimeFieldUpdateOperationsInput | Date | string
    adresEntretien?: StringFieldUpdateOperationsInput | string
    recruEntretien?: StringFieldUpdateOperationsInput | string
    typeEntretien?: StringFieldUpdateOperationsInput | string
    descripEntreprise?: StringFieldUpdateOperationsInput | string
  }

  export type EntretienUncheckedUpdateManyWithoutCandidatInput = {
    idEntretien?: IntFieldUpdateOperationsInput | number
    entrepriseId?: IntFieldUpdateOperationsInput | number
    dateEntretien?: DateTimeFieldUpdateOperationsInput | Date | string
    adresEntretien?: StringFieldUpdateOperationsInput | string
    recruEntretien?: StringFieldUpdateOperationsInput | string
    typeEntretien?: StringFieldUpdateOperationsInput | string
    descripEntreprise?: StringFieldUpdateOperationsInput | string
  }

  export type NoteUpdateWithoutCandidatInput = {
    Note?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    commentNote?: StringFieldUpdateOperationsInput | string
    dateNote?: DateTimeFieldUpdateOperationsInput | Date | string
    entreprise?: EntrepriseUpdateOneRequiredWithoutNotesNestedInput
  }

  export type NoteUncheckedUpdateWithoutCandidatInput = {
    idNote?: IntFieldUpdateOperationsInput | number
    entrepriseId?: IntFieldUpdateOperationsInput | number
    Note?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    commentNote?: StringFieldUpdateOperationsInput | string
    dateNote?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NoteUncheckedUpdateManyWithoutCandidatInput = {
    idNote?: IntFieldUpdateOperationsInput | number
    entrepriseId?: IntFieldUpdateOperationsInput | number
    Note?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    commentNote?: StringFieldUpdateOperationsInput | string
    dateNote?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OffreEmploiCreateManyEntrepriseInput = {
    idOffreEmploi?: number
    titreOffreEmploi: string
    descripOffreEmploi: string
    localiOffreEmploi: string
    datePubliOffreEmploi: Date | string
    datelimitOffreEmploi: Date | string
    salaireOffreEmploi: number
    typeContOffreEmploi: string
    experienceOffreEmploi: string
    nivEtuOffreEmploi: string
    competencesOffreEmploi: string
  }

  export type EntretienCreateManyEntrepriseInput = {
    idEntretien?: number
    candidatId: number
    dateEntretien: Date | string
    adresEntretien: string
    recruEntretien: string
    typeEntretien: string
    descripEntreprise: string
  }

  export type ContratCreateManyEntrepriseInput = {
    idContrat?: number
    freelancerId: number
    titreProjContrat: string
    datDebConrat: Date | string
    datFinConrat: Date | string
    coutContrat: number
    descripContrat: string
    statutContrat: string
  }

  export type ProjetCreateManyEntrepriseInput = {
    idProjet?: number
    titreProjet: string
    descripProjet: string
    BudgetProjet: number
    DelaiProjet: number
  }

  export type NoteCreateManyEntrepriseInput = {
    idNote?: number
    candidatId: number
    Note: Decimal | DecimalJsLike | number | string
    commentNote: string
    dateNote: Date | string
  }

  export type OffreEmploiUpdateWithoutEntrepriseInput = {
    titreOffreEmploi?: StringFieldUpdateOperationsInput | string
    descripOffreEmploi?: StringFieldUpdateOperationsInput | string
    localiOffreEmploi?: StringFieldUpdateOperationsInput | string
    datePubliOffreEmploi?: DateTimeFieldUpdateOperationsInput | Date | string
    datelimitOffreEmploi?: DateTimeFieldUpdateOperationsInput | Date | string
    salaireOffreEmploi?: IntFieldUpdateOperationsInput | number
    typeContOffreEmploi?: StringFieldUpdateOperationsInput | string
    experienceOffreEmploi?: StringFieldUpdateOperationsInput | string
    nivEtuOffreEmploi?: StringFieldUpdateOperationsInput | string
    competencesOffreEmploi?: StringFieldUpdateOperationsInput | string
  }

  export type OffreEmploiUncheckedUpdateWithoutEntrepriseInput = {
    idOffreEmploi?: IntFieldUpdateOperationsInput | number
    titreOffreEmploi?: StringFieldUpdateOperationsInput | string
    descripOffreEmploi?: StringFieldUpdateOperationsInput | string
    localiOffreEmploi?: StringFieldUpdateOperationsInput | string
    datePubliOffreEmploi?: DateTimeFieldUpdateOperationsInput | Date | string
    datelimitOffreEmploi?: DateTimeFieldUpdateOperationsInput | Date | string
    salaireOffreEmploi?: IntFieldUpdateOperationsInput | number
    typeContOffreEmploi?: StringFieldUpdateOperationsInput | string
    experienceOffreEmploi?: StringFieldUpdateOperationsInput | string
    nivEtuOffreEmploi?: StringFieldUpdateOperationsInput | string
    competencesOffreEmploi?: StringFieldUpdateOperationsInput | string
  }

  export type OffreEmploiUncheckedUpdateManyWithoutEntrepriseInput = {
    idOffreEmploi?: IntFieldUpdateOperationsInput | number
    titreOffreEmploi?: StringFieldUpdateOperationsInput | string
    descripOffreEmploi?: StringFieldUpdateOperationsInput | string
    localiOffreEmploi?: StringFieldUpdateOperationsInput | string
    datePubliOffreEmploi?: DateTimeFieldUpdateOperationsInput | Date | string
    datelimitOffreEmploi?: DateTimeFieldUpdateOperationsInput | Date | string
    salaireOffreEmploi?: IntFieldUpdateOperationsInput | number
    typeContOffreEmploi?: StringFieldUpdateOperationsInput | string
    experienceOffreEmploi?: StringFieldUpdateOperationsInput | string
    nivEtuOffreEmploi?: StringFieldUpdateOperationsInput | string
    competencesOffreEmploi?: StringFieldUpdateOperationsInput | string
  }

  export type EntretienUpdateWithoutEntrepriseInput = {
    dateEntretien?: DateTimeFieldUpdateOperationsInput | Date | string
    adresEntretien?: StringFieldUpdateOperationsInput | string
    recruEntretien?: StringFieldUpdateOperationsInput | string
    typeEntretien?: StringFieldUpdateOperationsInput | string
    descripEntreprise?: StringFieldUpdateOperationsInput | string
    candidat?: CandidatUpdateOneRequiredWithoutEntretiensNestedInput
  }

  export type EntretienUncheckedUpdateWithoutEntrepriseInput = {
    idEntretien?: IntFieldUpdateOperationsInput | number
    candidatId?: IntFieldUpdateOperationsInput | number
    dateEntretien?: DateTimeFieldUpdateOperationsInput | Date | string
    adresEntretien?: StringFieldUpdateOperationsInput | string
    recruEntretien?: StringFieldUpdateOperationsInput | string
    typeEntretien?: StringFieldUpdateOperationsInput | string
    descripEntreprise?: StringFieldUpdateOperationsInput | string
  }

  export type EntretienUncheckedUpdateManyWithoutEntrepriseInput = {
    idEntretien?: IntFieldUpdateOperationsInput | number
    candidatId?: IntFieldUpdateOperationsInput | number
    dateEntretien?: DateTimeFieldUpdateOperationsInput | Date | string
    adresEntretien?: StringFieldUpdateOperationsInput | string
    recruEntretien?: StringFieldUpdateOperationsInput | string
    typeEntretien?: StringFieldUpdateOperationsInput | string
    descripEntreprise?: StringFieldUpdateOperationsInput | string
  }

  export type ContratUpdateWithoutEntrepriseInput = {
    titreProjContrat?: StringFieldUpdateOperationsInput | string
    datDebConrat?: DateTimeFieldUpdateOperationsInput | Date | string
    datFinConrat?: DateTimeFieldUpdateOperationsInput | Date | string
    coutContrat?: IntFieldUpdateOperationsInput | number
    descripContrat?: StringFieldUpdateOperationsInput | string
    statutContrat?: StringFieldUpdateOperationsInput | string
    freelancer?: FreelancerUpdateOneRequiredWithoutContratsNestedInput
  }

  export type ContratUncheckedUpdateWithoutEntrepriseInput = {
    idContrat?: IntFieldUpdateOperationsInput | number
    freelancerId?: IntFieldUpdateOperationsInput | number
    titreProjContrat?: StringFieldUpdateOperationsInput | string
    datDebConrat?: DateTimeFieldUpdateOperationsInput | Date | string
    datFinConrat?: DateTimeFieldUpdateOperationsInput | Date | string
    coutContrat?: IntFieldUpdateOperationsInput | number
    descripContrat?: StringFieldUpdateOperationsInput | string
    statutContrat?: StringFieldUpdateOperationsInput | string
  }

  export type ContratUncheckedUpdateManyWithoutEntrepriseInput = {
    idContrat?: IntFieldUpdateOperationsInput | number
    freelancerId?: IntFieldUpdateOperationsInput | number
    titreProjContrat?: StringFieldUpdateOperationsInput | string
    datDebConrat?: DateTimeFieldUpdateOperationsInput | Date | string
    datFinConrat?: DateTimeFieldUpdateOperationsInput | Date | string
    coutContrat?: IntFieldUpdateOperationsInput | number
    descripContrat?: StringFieldUpdateOperationsInput | string
    statutContrat?: StringFieldUpdateOperationsInput | string
  }

  export type ProjetUpdateWithoutEntrepriseInput = {
    titreProjet?: StringFieldUpdateOperationsInput | string
    descripProjet?: StringFieldUpdateOperationsInput | string
    BudgetProjet?: IntFieldUpdateOperationsInput | number
    DelaiProjet?: IntFieldUpdateOperationsInput | number
    propositions?: PropositionUpdateManyWithoutProjetsNestedInput
  }

  export type ProjetUncheckedUpdateWithoutEntrepriseInput = {
    idProjet?: IntFieldUpdateOperationsInput | number
    titreProjet?: StringFieldUpdateOperationsInput | string
    descripProjet?: StringFieldUpdateOperationsInput | string
    BudgetProjet?: IntFieldUpdateOperationsInput | number
    DelaiProjet?: IntFieldUpdateOperationsInput | number
    propositions?: PropositionUncheckedUpdateManyWithoutProjetsNestedInput
  }

  export type ProjetUncheckedUpdateManyWithoutEntrepriseInput = {
    idProjet?: IntFieldUpdateOperationsInput | number
    titreProjet?: StringFieldUpdateOperationsInput | string
    descripProjet?: StringFieldUpdateOperationsInput | string
    BudgetProjet?: IntFieldUpdateOperationsInput | number
    DelaiProjet?: IntFieldUpdateOperationsInput | number
  }

  export type NoteUpdateWithoutEntrepriseInput = {
    Note?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    commentNote?: StringFieldUpdateOperationsInput | string
    dateNote?: DateTimeFieldUpdateOperationsInput | Date | string
    candidat?: CandidatUpdateOneRequiredWithoutNotesNestedInput
  }

  export type NoteUncheckedUpdateWithoutEntrepriseInput = {
    idNote?: IntFieldUpdateOperationsInput | number
    candidatId?: IntFieldUpdateOperationsInput | number
    Note?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    commentNote?: StringFieldUpdateOperationsInput | string
    dateNote?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NoteUncheckedUpdateManyWithoutEntrepriseInput = {
    idNote?: IntFieldUpdateOperationsInput | number
    candidatId?: IntFieldUpdateOperationsInput | number
    Note?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    commentNote?: StringFieldUpdateOperationsInput | string
    dateNote?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PropositionCreateManyFreelancerInput = {
    idProposition?: number
    projetId: number
    delaiProposition: number
    descripProposition: string
    coutProposition: number
    competenceProposition: string
  }

  export type ContratCreateManyFreelancerInput = {
    idContrat?: number
    entrepriseId: number
    titreProjContrat: string
    datDebConrat: Date | string
    datFinConrat: Date | string
    coutContrat: number
    descripContrat: string
    statutContrat: string
  }

  export type PropositionUpdateWithoutFreelancerInput = {
    delaiProposition?: IntFieldUpdateOperationsInput | number
    descripProposition?: StringFieldUpdateOperationsInput | string
    coutProposition?: IntFieldUpdateOperationsInput | number
    competenceProposition?: StringFieldUpdateOperationsInput | string
    projets?: ProjetUpdateOneRequiredWithoutPropositionsNestedInput
  }

  export type PropositionUncheckedUpdateWithoutFreelancerInput = {
    idProposition?: IntFieldUpdateOperationsInput | number
    projetId?: IntFieldUpdateOperationsInput | number
    delaiProposition?: IntFieldUpdateOperationsInput | number
    descripProposition?: StringFieldUpdateOperationsInput | string
    coutProposition?: IntFieldUpdateOperationsInput | number
    competenceProposition?: StringFieldUpdateOperationsInput | string
  }

  export type PropositionUncheckedUpdateManyWithoutFreelancerInput = {
    idProposition?: IntFieldUpdateOperationsInput | number
    projetId?: IntFieldUpdateOperationsInput | number
    delaiProposition?: IntFieldUpdateOperationsInput | number
    descripProposition?: StringFieldUpdateOperationsInput | string
    coutProposition?: IntFieldUpdateOperationsInput | number
    competenceProposition?: StringFieldUpdateOperationsInput | string
  }

  export type ContratUpdateWithoutFreelancerInput = {
    titreProjContrat?: StringFieldUpdateOperationsInput | string
    datDebConrat?: DateTimeFieldUpdateOperationsInput | Date | string
    datFinConrat?: DateTimeFieldUpdateOperationsInput | Date | string
    coutContrat?: IntFieldUpdateOperationsInput | number
    descripContrat?: StringFieldUpdateOperationsInput | string
    statutContrat?: StringFieldUpdateOperationsInput | string
    entreprise?: EntrepriseUpdateOneRequiredWithoutContratsNestedInput
  }

  export type ContratUncheckedUpdateWithoutFreelancerInput = {
    idContrat?: IntFieldUpdateOperationsInput | number
    entrepriseId?: IntFieldUpdateOperationsInput | number
    titreProjContrat?: StringFieldUpdateOperationsInput | string
    datDebConrat?: DateTimeFieldUpdateOperationsInput | Date | string
    datFinConrat?: DateTimeFieldUpdateOperationsInput | Date | string
    coutContrat?: IntFieldUpdateOperationsInput | number
    descripContrat?: StringFieldUpdateOperationsInput | string
    statutContrat?: StringFieldUpdateOperationsInput | string
  }

  export type ContratUncheckedUpdateManyWithoutFreelancerInput = {
    idContrat?: IntFieldUpdateOperationsInput | number
    entrepriseId?: IntFieldUpdateOperationsInput | number
    titreProjContrat?: StringFieldUpdateOperationsInput | string
    datDebConrat?: DateTimeFieldUpdateOperationsInput | Date | string
    datFinConrat?: DateTimeFieldUpdateOperationsInput | Date | string
    coutContrat?: IntFieldUpdateOperationsInput | number
    descripContrat?: StringFieldUpdateOperationsInput | string
    statutContrat?: StringFieldUpdateOperationsInput | string
  }

  export type PropositionCreateManyProjetsInput = {
    idProposition?: number
    freelancerId: number
    delaiProposition: number
    descripProposition: string
    coutProposition: number
    competenceProposition: string
  }

  export type PropositionUpdateWithoutProjetsInput = {
    delaiProposition?: IntFieldUpdateOperationsInput | number
    descripProposition?: StringFieldUpdateOperationsInput | string
    coutProposition?: IntFieldUpdateOperationsInput | number
    competenceProposition?: StringFieldUpdateOperationsInput | string
    freelancer?: FreelancerUpdateOneRequiredWithoutPropositionsNestedInput
  }

  export type PropositionUncheckedUpdateWithoutProjetsInput = {
    idProposition?: IntFieldUpdateOperationsInput | number
    freelancerId?: IntFieldUpdateOperationsInput | number
    delaiProposition?: IntFieldUpdateOperationsInput | number
    descripProposition?: StringFieldUpdateOperationsInput | string
    coutProposition?: IntFieldUpdateOperationsInput | number
    competenceProposition?: StringFieldUpdateOperationsInput | string
  }

  export type PropositionUncheckedUpdateManyWithoutProjetsInput = {
    idProposition?: IntFieldUpdateOperationsInput | number
    freelancerId?: IntFieldUpdateOperationsInput | number
    delaiProposition?: IntFieldUpdateOperationsInput | number
    descripProposition?: StringFieldUpdateOperationsInput | string
    coutProposition?: IntFieldUpdateOperationsInput | number
    competenceProposition?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CandidatCountOutputTypeDefaultArgs instead
     */
    export type CandidatCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CandidatCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EntrepriseCountOutputTypeDefaultArgs instead
     */
    export type EntrepriseCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EntrepriseCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FreelancerCountOutputTypeDefaultArgs instead
     */
    export type FreelancerCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FreelancerCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProjetCountOutputTypeDefaultArgs instead
     */
    export type ProjetCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProjetCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AccountDefaultArgs instead
     */
    export type AccountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AccountDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AccountVerificationDefaultArgs instead
     */
    export type AccountVerificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AccountVerificationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PasswordResetDefaultArgs instead
     */
    export type PasswordResetArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PasswordResetDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SessionDefaultArgs instead
     */
    export type SessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SessionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CandidatDefaultArgs instead
     */
    export type CandidatArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CandidatDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ContratDefaultArgs instead
     */
    export type ContratArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ContratDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EntrepriseDefaultArgs instead
     */
    export type EntrepriseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EntrepriseDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EntretienDefaultArgs instead
     */
    export type EntretienArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EntretienDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FreelancerDefaultArgs instead
     */
    export type FreelancerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FreelancerDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NoteDefaultArgs instead
     */
    export type NoteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NoteDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OffreEmploiDefaultArgs instead
     */
    export type OffreEmploiArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OffreEmploiDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProjetDefaultArgs instead
     */
    export type ProjetArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProjetDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PropositionDefaultArgs instead
     */
    export type PropositionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PropositionDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}
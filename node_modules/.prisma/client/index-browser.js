
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  detectRuntime,
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.7.1
 * Query Engine version: 61e140623197a131c2a6189271ffee05a7aa9a59
 */
Prisma.prismaVersion = {
  client: "5.7.1",
  engine: "61e140623197a131c2a6189271ffee05a7aa9a59"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  throw new Error(`Extensions.getExtensionContext is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.defineExtension = () => {
  throw new Error(`Extensions.defineExtension is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  expires_at: 'expires_at',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state'
};

exports.Prisma.AccountVerificationScalarFieldEnum = {
  id: 'id',
  accountType: 'accountType',
  verifiedAt: 'verifiedAt',
  createdAt: 'createdAt',
  verified: 'verified',
  ip: 'ip',
  firstName: 'firstName',
  lastName: 'lastName',
  code: 'code',
  userName: 'userName',
  password: 'password',
  attempt: 'attempt',
  userId: 'userId'
};

exports.Prisma.PasswordResetScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  code: 'code',
  attempt: 'attempt',
  ip: 'ip',
  createdAt: 'createdAt',
  codeVerified: 'codeVerified',
  codeVerifiedAt: 'codeVerifiedAt',
  reset: 'reset',
  resetAt: 'resetAt'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  sessionToken: 'sessionToken',
  userId: 'userId',
  expires: 'expires',
  active: 'active'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  userName: 'userName',
  phoneNumber: 'phoneNumber',
  passwordHash: 'passwordHash',
  active: 'active',
  createdAt: 'createdAt',
  verifiedAt: 'verifiedAt',
  signupMethod: 'signupMethod',
  image: 'image'
};

exports.Prisma.CandidatScalarFieldEnum = {
  idCandidat: 'idCandidat',
  adresCandidat: 'adresCandidat',
  experienceCandidat: 'experienceCandidat',
  nivEtudesCandidat: 'nivEtudesCandidat',
  competencesCandidat: 'competencesCandidat',
  cVCandidat: 'cVCandidat',
  userId: 'userId'
};

exports.Prisma.ContratScalarFieldEnum = {
  idContrat: 'idContrat',
  entrepriseId: 'entrepriseId',
  freelancerId: 'freelancerId',
  titreProjContrat: 'titreProjContrat',
  datDebConrat: 'datDebConrat',
  datFinConrat: 'datFinConrat',
  coutContrat: 'coutContrat',
  descripContrat: 'descripContrat',
  statutContrat: 'statutContrat'
};

exports.Prisma.EntrepriseScalarFieldEnum = {
  idEntreprise: 'idEntreprise',
  nomEntreprise: 'nomEntreprise',
  adresEntreprise: 'adresEntreprise',
  contactEntreprise: 'contactEntreprise',
  sectActivEntreprise: 'sectActivEntreprise',
  tailleEntreprise: 'tailleEntreprise',
  logoEntreprise: 'logoEntreprise',
  descripEntreprise: 'descripEntreprise',
  siteWebEntreprise: 'siteWebEntreprise',
  userId: 'userId'
};

exports.Prisma.EntretienScalarFieldEnum = {
  idEntretien: 'idEntretien',
  entrepriseId: 'entrepriseId',
  candidatId: 'candidatId',
  dateEntretien: 'dateEntretien',
  adresEntretien: 'adresEntretien',
  recruEntretien: 'recruEntretien',
  typeEntretien: 'typeEntretien',
  descripEntreprise: 'descripEntreprise'
};

exports.Prisma.FreelancerScalarFieldEnum = {
  idFreelancer: 'idFreelancer',
  nomFreelancer: 'nomFreelancer',
  prenomFreelancer: 'prenomFreelancer',
  adresFreelancer: 'adresFreelancer',
  TelFreelancer: 'TelFreelancer',
  emailFreelancer: 'emailFreelancer',
  competencesFreelancer: 'competencesFreelancer',
  experienceFreelancer: 'experienceFreelancer',
  portfolioFreelancer: 'portfolioFreelancer'
};

exports.Prisma.NoteScalarFieldEnum = {
  idNote: 'idNote',
  entrepriseId: 'entrepriseId',
  candidatId: 'candidatId',
  Note: 'Note',
  commentNote: 'commentNote',
  dateNote: 'dateNote'
};

exports.Prisma.OffreEmploiScalarFieldEnum = {
  idOffreEmploi: 'idOffreEmploi',
  entrepriseId: 'entrepriseId',
  titreOffreEmploi: 'titreOffreEmploi',
  descripOffreEmploi: 'descripOffreEmploi',
  localiOffreEmploi: 'localiOffreEmploi',
  datePubliOffreEmploi: 'datePubliOffreEmploi',
  datelimitOffreEmploi: 'datelimitOffreEmploi',
  salaireOffreEmploi: 'salaireOffreEmploi',
  typeContOffreEmploi: 'typeContOffreEmploi',
  experienceOffreEmploi: 'experienceOffreEmploi',
  nivEtuOffreEmploi: 'nivEtuOffreEmploi',
  competencesOffreEmploi: 'competencesOffreEmploi'
};

exports.Prisma.ProjetScalarFieldEnum = {
  idProjet: 'idProjet',
  entrepriseId: 'entrepriseId',
  titreProjet: 'titreProjet',
  descripProjet: 'descripProjet',
  BudgetProjet: 'BudgetProjet',
  DelaiProjet: 'DelaiProjet'
};

exports.Prisma.PropositionScalarFieldEnum = {
  idProposition: 'idProposition',
  projetId: 'projetId',
  freelancerId: 'freelancerId',
  delaiProposition: 'delaiProposition',
  descripProposition: 'descripProposition',
  coutProposition: 'coutProposition',
  competenceProposition: 'competenceProposition'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  Account: 'Account',
  AccountVerification: 'AccountVerification',
  PasswordReset: 'PasswordReset',
  Session: 'Session',
  User: 'User',
  Candidat: 'Candidat',
  Contrat: 'Contrat',
  Entreprise: 'Entreprise',
  Entretien: 'Entretien',
  Freelancer: 'Freelancer',
  Note: 'Note',
  OffreEmploi: 'OffreEmploi',
  Projet: 'Projet',
  Proposition: 'Proposition'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        const runtime = detectRuntime()
        const edgeRuntimeName = {
          'workerd': 'Cloudflare Workers',
          'deno': 'Deno and Deno Deploy',
          'netlify': 'Netlify Edge Functions',
          'edge-light': 'Vercel Edge Functions',
        }[runtime]

        let message = 'PrismaClient is unable to run in '
        if (edgeRuntimeName !== undefined) {
          message += edgeRuntimeName + '. As an alternative, try Accelerate: https://pris.ly/d/accelerate.'
        } else {
          message += 'this browser environment, or has been bundled for the browser (running in `' + runtime + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://github.com/prisma/prisma/issues`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
